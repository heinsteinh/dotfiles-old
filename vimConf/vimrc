set nocompatible        " Use Vim settings, rather than Vi settings

"let g:iswindows = 0
"let g:islinux = 0
if(has("win32") || has("win95") || has("win64") || has("win16"))
    let g:iswindows=1
    let g:islinux=0
else
    let g:iswindows=0
    let g:islinux=1
endif

" O S {{{
"====================================================================================================
let s:is_win   = has('win32') || has('win64')
let s:is_mac   = has('mac') || system('uname') =~? '^darwin'
let s:is_linux = !s:is_mac && has('unix')

if s:is_win
elseif s:is_mac
elseif s:is_linux
endif
" }}}

if(g:iswindows==1)

    let webBrowser = "C:\Program Files\Google\Chrome\Application\chrome.exe"
    let scrapbook = "W:\\WorkDir\\scrapbook.textile"
    "map <F12> :silent! !"C:\Program Files\Google\Chrome\Application\chrome.exe" % <CR>

    "     if hostname() == "DESKTOP-LL8PBC8"
    "         set lines=40 columns=130
    "     els,
    "         autocmd GUIEnter * simalt ~x
    "     endif
    "sets path for python3
    if hostname() == "BHI4PCH7D3"
        let &pythonthreehome='C:\Program Files (x86)\Microsoft Visual Studio\Shared\Python37_64'
        let &pythonthreedll='C:\Program Files (x86)\Microsoft Visual Studio\Shared\Python37_64\python37.dll'
    else
    end

    let $LANG='en'
    set langmenu=en
    set encoding=utf-8


    autocmd GUIEnter * simalt ~x


else
    let scrapbook = $HOME."/scrapbook.textile"
    set guifont=Monaco\ 11
endif

if has("gui_running")

endif



"{{{ Plugin Section

" Helps force plugins to load correctly when it is turned back on below
filetype off

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

source ~/.vim/settings/plugins.vim


" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"}}}

source ~/.vim/settings.vim

" Highlighting {{{
" show errors
highlight Errors ctermbg=green guibg=darkred
" }}}


"let mapleader = " " " map leader to Space
let mapleader = "," " map leader to comma
let maplocalleader = ","


set background=dark
"colorscheme slate
colorscheme gruvbox
"colorscheme wombat256
"colorscheme herald
"colorscheme darkblue
"colorscheme oceanicNext


"{{{{

" Source local cutomizations
if filereadable(expand("~/.vimrc.local"))
    source ~/.vimrc.local
endif


" source all the helper files
for f in split(glob('$HOME/.vim/functions/*.vim'), '\n')
    "echo "sourcing dir"
    exec 'source' f
endfor


" source all the helper files
for f in split(glob('$HOME/.vim/plugin/*.vim'), '\n')
    "echo "sourcing dir"
    exec 'source' f
endfo

" source all the helper files
"for f in split(glob('$$HOME/.vim/helpers/**/*.vim'), '\n')
"    exec 'source' f
"endfor

if has("gui_running")

    " Always show cursor
    set ruler

    " Highlight the current line
    set cursorline


    " Hide the toolbar
    set guioptions-=T
    set guioptions-=m  "remove menu bar
    set guioptions-=T  "remove toolbar
    set guioptions-=r  "remove right-hand,scroll bar
    set guioptions-=L  "remove left-hand scroll bar



    "set guifont=Consolas:h11:cANSI
    set guifont=FiraCode_Nerd_Font_Mono:h11
    "set guifont=monofur_for_Powerline:h14

    "  set guifont=Ubuntu\ Mono\ derivative\ Powerline\ 11
    "set guifont=Ubuntu\Mono\derivative\Powerline:h15:cANSI
    "set guifont=Ubuntu_Mono_derivative_Powerline:h11
    "set guifont=Ubuntu_Mono_derivative_Powerlin:h11:cANSI
    " set guifont=Ubuntu_Mono_derivative_Powerline:h14,Ubuntu_Mono_derivative_Powerline_Bold:h14,Ubuntu_Mono_derivative_Powerline_Italic:h14
    "set guifont=Hack_Nerd_Font_Mono:h10
    "set guifont=DejaVuSansMono_Nerd_Font_Mono:h11
    "
    " " Only set guifont once, since it resizes gVim when sourcing $MYVIMRC
    "  if !exists('s:set_guifont')
    "        let s:set_guifont = 1

    "        if has('win32')
    "            set guifont=FiraCode_Nerd_Font_Mono:h11
    "        else
    "            set guifont=Ubuntu\ Mono\ Regular\ 18
    "        endif
    "    endif


    " Open the GUI file browser.
    map <A-o> :browse confirm e<CR>
    nmap <C-S-s> :browse confivm saveas<CR>

endif


"}}}}



"colorscheme OceanicNext
"highlight Normal guifg=white guibg=black

"{{{
" Start NERDTree and leave the cursor in it.
"autocmd VimEnter * NERDTree
let NERDTreeShowHidden=1
let NERDTreeShowBookmarks = 1   " Display bookmarks on startup.

" Basically disable nerdtree markers
"let NERDTreeDirArrowExpandable=">"
"let NERDTreeDirArrowCollapsible="v"

map <leader>ne :NERDTreeFind<cr>
map <C-o> :NERDTreeToggle %<CR>

" don;t show these file types
let NERDTreeIgnore = ['\.pyc$', '\.pyo$']

" Enable folder icons
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:DevIconsEnableFoldersOpenClose = 1

" Fix directory colors
highlight! link NERDTreeFlags NERDTreeDir

" Remove expandable arrow
let g:WebDevIconsNerdTreeBeforeGlyphPadding = ""
let g:WebDevIconsUnicodeDecorateFolderNodes = v:true
let NERDTreeDirArrowExpandable = "\u00a0"
let NERDTreeDirArrowCollapsible = "\u00a0"
let NERDTreeNodeDelimiter = "\x07"

" Autorefresh on tree focus
function! NERDTreeRefresh()
    if &filetype == "nerdtree"
        silent exe substitute(mapcheck("R"), "<CR>", "", "")
    endif
endfunction

autocmd BufEnter * call NERDTreeRefresh()



"enable rainbow it globally
au FileType c,cpp,objc,objcpp call rainbow#load()
"let g:rainbow_active = 1
"

""}}}

"source custom files

"load here my custom settings
"source ~/.vim/settings.vim
"source ~/.vim/settings/settings-extra.vim
"source ~/.vim/settings-light.vim

source ~/.vim/settings/functions.vim
source ~/.vim/settings/keymaps.vim
source ~/.vim/settings/movements.vim
source ~/.vim/settings/spelling.vim

"source ~/.vim/settings/settings-extra.vim


source ~/.vim/plugins/backupFiles.vim
source ~/.vim/plugins/automkdir.vim
"source ~/.vim/plugins/neocomplete.vim

source ~/.vim/settings/vimrc_mappings.vim
source ~/.vim/plugins/diminactive.vim


:let g:session_autosave = 'no'




""{{{ Setting window size
"if has("gui_running")
"    " GUI is running or is about to start.
"    " Maximize gvim window (for an alternative on Windows, see simalt below).
"    set lines=60 columns=200
"else
"    " This is console Vim.
"    if exists("+lines")
"        set lines=50
"    endif
"    if exists("+columns")
"        set columns=150
"    endif
"endif
""}}}


"{{{ AutoCommand  Section
"Automatically remove trailing spaces when saving a file.
"autocmd BufRead,BufWrite * if ! &bin | silent! %s/\s\+$//ge | endif

"useful to clear search highlight
map <esc> :noh <CR>

source ~/.vim/settings/AutoCommand.vim

"}}}

"source

" Cursor style {{{
let &t_SI.="\e[5 q" "SI = INSERT mode
let &t_SR.="\e[4 q" "SR = REPLACE mode
let &t_EI.="\e[1 q" "EI = NORMAL mode (Eu)
"}}}
