set nocompatible        " Use Vim settings, rather than Vi settings


if(has("win32") || has("win95") || has("win64") || has("win16"))
    let g:iswindows=1
else
    let g:iswindows=0
endif

if(g:iswindows==1)

    let webBrowser = "C:\Program Files\Google\Chrome\Application\chrome.exe"
    let $scrapbook = "W:\\WorkDir\\scrapbook.textile"
    "map <F12> :silent! !"C:\Program Files\Google\Chrome\Application\chrome.exe" % <CR>

    "     if hostname() == "DESKTOP-LL8PBC8"
    "         set lines=40 columns=130
    "     els,
    "         autocmd GUIEnter * simalt ~x
    "     endif
    "sets path for python3
    if isdirectory('C:\Users\feng\AppData\Local\Programs\Python\Python37-32')
        set pythonthreedll=C:\Users\feng\AppData\Local\Programs\Python\Python37-32\python37.dll
    elseif isdirectory('C:\Users\fwar3\AppData\Local\Programs\Python\Python36')
        set pythonthreedll=C:\Users\fwar3\AppData\Local\Programs\Python\Python36\python36.dll
    elseif isdirectory('C:\Python37')
        set pythonthreedll=C:\Python37\python37.dll
    elseif isdirectory('C:\Python38')
        set pythonthreedll=C:\Python38\python38.dll
    endif

    let $LANG='en'
    set langmenu=en
    set fileencoding=utf-8
else
    let $scrapbook = $HOME."/scrapbook.textile"
    set guifont=Monaco\ 11



endif




if has("gui_running")
    if has("gui_gtk2")
        set guifont=Monospace\ 13
    elseif has("gui_win32")
        "set guifont=Consolas:h10:cANSI
    endif
endif


" Helps force plugins to load correctly when it is turned back on below
filetype off

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

source ~/.vim/settings/plugins.vim


" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on


source ~/.vim/settings.vim

" Highlighting {{{
" show errors
highlight Errors ctermbg=green guibg=darkred
" }}}


"let mapleader = " " " map leader to Space
let mapleader = "," " map leader to comma
let maplocalleader = ","


"set background=dark
"colorscheme slate
"colorscheme gruvbox
"colorscheme darkblue
colorscheme oceanicNext



"{{{{

" Source local cutomizations
if filereadable(expand("~/.vimrc.local"))
    source ~/.vimrc.local
endif


" source all the helper files
for f in split(glob('$HOME/.vim/functions/*.vim'), '\n')
    "echo "sourcing dir"
    exec 'source' f
endfor

" source all the helper files
for f in split(glob('$$HOME/.vim/helpers/**/*.vim'), '\n')
    exec 'source' f
endfor

if has("gui_running")

    " Always show cursor
    set ruler

    " Highlight the current line
    set cursorline


    " Hide the toolbar
    "set guioptions-=T
    "set guioptions-=m  "remove menu bar
    "set guioptions-=T  "remove toolbar
    "set guioptions-=r  "remove right-hand,scroll bar
    "set guioptions-=L  "remove left-hand scroll bar

    set guifont=Consolas:h11:cANSI
    "set guifont=FiraCode_Nerd_Font_Mono:h9
    "set guifont=Hack_Nerd_Font_Mono:h10
    "set guifont=DejaVuSansMono_Nerd_Font_Mono:h11
    "
    " " Only set guifont once, since it resizes gVim when sourcing $MYVIMRC
    "  if !exists('s:set_guifont')
    "        let s:set_guifont = 1

    "        if has('win32')
    "            set guifont=FiraCode_Nerd_Font_Mono:h11
    "        else
    "            set guifont=Ubuntu\ Mono\ Regular\ 18
    "        endif
    "    endif
endif


"}}}}




"colorscheme OceanicNext
"highlight Normal guifg=white guibg=black

"{{{
" Start NERDTree and leave the cursor in it.
"autocmd VimEnter * NERDTree

map <leader>ne :NERDTreeFind<cr>
map <C-o> :NERDTreeToggle %<CR>
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
" Start NERDTree when Vim is started without file arguments.
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists('s:std_in') | NERDTree | endif
"
"
"Air Vim Pluggin setting
"let g:airline#extensions#tabline#enabled = 1
"let g:airline#extensions#tabline#left_sep = ' '
"let g:airline#extensions#tabline#left_alt_sep = '|'


"enable rainbow it globally
au FileType c,cpp,objc,objcpp call rainbow#load()
let g:rainbow_active = 1
"

""}}}

" source custom files

"load here my custom settings
"source ~/.vim/settings.vim
"source ~/.vim/settings/settings-extra.vim
"source ~/.vim/settings-light.vim

source ~/.vim/settings/functions.vim
source ~/.vim/settings/keymaps.vim
source ~/.vim/settings/movements.vim
source ~/.vim/settings/spelling.vim

"source ~/.vim/settings/settings-extra.vim


source ~/.vim/plugins/backupFiles.vim
source ~/.vim/plugins/automkdir.vim
source ~/.vim/plugins/neocomplete.vim

source ~/.vim/settings/vimrc_mappings.vim


:let g:session_autosave = 'no'



if has("gui_running")
    " GUI is running or is about to start.
    " Maximize gvim window (for an alternative on Windows, see simalt below).
    set lines=50 columns=180
else
    " This is console Vim.
    if exists("+lines")
        set lines=50
    endif
    if exists("+columns")
        set columns=150
    endif
endif

"Automatically remove trailing spaces when saving a file.
"autocmd BufRead,BufWrite * if ! &bin | silent! %s/\s\+$//ge | endif

"useful to clear search highlight
map <esc> :noh <CR>

if has ('autocmd') " Remain compatible with earlier versions

    " automatically rebalance windows on vim resize
    autocmd VimResized * :wincmd =

    " zoom a vim pane, <C-w>= to re-balance
    nnoremap <leader>- :wincmd _<cr>:wincmd \|<cr>
    nnoremap <leader>= :wincmd =<cr>

    " Preserve last editing position in vim
    autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
    autocmd bufreadpre *.mkd setlocal textwidth=0
    autocmd bufreadpre *.md setlocal textwidth=0

    " treat C files differently from C++ files
    "augroup project
    "	autocmd!
    "	autocmd BufRead,BufNewFile *.h,*.c set filetype=c.doxygen
    "augroup END

    "Changing number base on the mode we are in
    augroup toggle_relative_number
        autocmd InsertEnter * :setlocal relativenumber " norelativenumber
        autocmd InsertLeave * :setlocal norelativenumber " relativenumber
    augroup END

    augroup CursorLineOnlyInActiveWindow
        autocmd!
        autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
        autocmd WinLeave * setlocal nocursorline
    augroup END

    "     " relative number 
    "     set number relativenumber
    "     augroup numbertoggle
    "         autocmd!
    "         autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
    "         autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
    "     augroup END


    let NERDTreeShowHidden=1
    let NERDTreeShowBookmarks = 1   " Display bookmarks on startup.

    " Start NERDTree and put the cursor back in the other window.
    autocmd VimEnter * NERDTree | wincmd p
    "autocmd VimEnter * exe "vertical resize 60"

    "Autoclose NERDTree if it's the only open window left.
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

    " Close the tab if NERDTree is the only window remaining in it.
    autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

    " If another buffer tries to replace NERDTree, put it in the other window, and bring back NERDTree.
    autocmd BufEnter * if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
                \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif

    " Cursor at position of last saved line when opening file
    autocmd BufReadPost *
                \ if line("'\"") > 1 && line("'\"") <= line("$") |
                \   exe "normal! g`\"" |
                \ endif


    augroup vimrc     " Source vim configuration upon save
        autocmd! BufWritePost $MYVIMRC source % | echom "Reloaded " . $MYVIMRC | redraw
        autocmd! BufWritePost $MYGVIMRC if has('gui_running') | so % | echom "Reloaded " . $MYGVIMRC | endif | redraw
    augroup END

endif " has autocmd






" Cursor style {{{
let &t_SI.="\e[5 q" "SI = INSERT mode
let &t_SR.="\e[4 q" "SR = REPLACE mode
let &t_EI.="\e[1 q" "EI = NORMAL mode (Eu)
" }}}
