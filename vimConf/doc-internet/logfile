Vim: Achtung: Die Ausgabe erfolgt nicht auf einem Terminal
lese "vimrc_fzf"[?25l[J
Zeile 1: set nocompatible        " Use Vim settings, rather than Vi settings[J

Zeile 2: set langmenu=en[J

Zeile 3: set encoding=utf-8[J

Zeile 4: [J

Zeile 5: set nobackup[J

Zeile 6: set nowritebackup[J

Zeile 7: set noswapfile[J

Zeile 8: [J

Zeile 9: " Use commas as leaders[J

Zeile 10: let mapleader = ','[J

Zeile 11: let maplocalleader = ','[J

Zeile 12: let g:mapleader = ','[J

Zeile 13: [J

Zeile 14: "{{{ OS Variable initialization and Config Dir [J

Zeile 15: let g:is_win   = has('win32') || has('win64')[J

Zeile 16: let g:is_mac   = has('mac') || system('uname') =~? '^darwin'[J

Rufe Shell auf, um "(uname) > /tmp/v0UiRNf/0" auszufÃ¼hren[J
[?25h
Zeile 17: let g:is_linux = !g:is_mac && has('unix')[?25l[J

Zeile 18: "}}[J

Zeile 19: [J

Zeile 20: "{{{ Simple Branch Template Example[J

Zeile 21: if g:is_win[J

Zeile 22: elseif g:is_mac[J

Zeile 23: elseif g:is_linux[J

Zeile 24: endif[J

Zeile 25: [J

Zeile 26: [J

Zeile 27: [J

Zeile 28: [J

Zeile 29: if g:is_win[J

Zeile 30: elseif g:is_linux[J

Zeile 31: endif[J

Zeile 32: "}}}[J

Zeile 33: [J

Zeile 34: "{{{ Python DLL and Dir Path[J

Zeile 35: if hostname() == "BHI4PCH7D3"[J

Zeile 36:     let &pythonthreehome='C:\Program Files (x86)\Microsoft Visual Studio\Shared\Python37_64'[J

Zeile 37:     let &pythonthreedll='C:\Program Files (x86)\Microsoft Visual Studio\Shared\Python37_64\python37.dll'[J

Zeile 38: [J

Zeile 39: else[J

Zeile 40: endif[J

Zeile 41: "}}[J

Zeile 42: [J

Zeile 43: if g:is_win[J

Zeile 44:     :let $VIMFILE_DIR = 'vimfiles'[J

Zeile 45: else[J

Zeile 46:     :let $VIMFILE_DIR = '.vim'[J

Zeile 47: endif[J

Zeile 48: [J

Zeile 49: echo "Current Hostname :: " [J

Current Hostname :: [J
Zeile 50: echo hostname()[J

BHI4PCH7D3[J
Zeile 51: echo $HOME[J

/c/Users/108012516[J
Zeile 52: echo $VIMFILE_DR[J

[JZeile 53: [J

Zeile 54: if g:is_win[J

Zeile 55: [J

Zeile 56: elseif g:is_linux[J

Zeile 57:     " Allows you to enter sudo pass and save the file[J

Zeile 58:     " " when you forgot to open your file with sudo[J

Zeile 59:     cmap w!! %!sudo tee > /dev/null %[J

Zeile 60: endif[J

Zeile 61: [J

Zeile 62: [J

Zeile 63: "{{{ Plugin Installation Section[J

Zeile 64: filetype off                  " required[J

Suche nach "ftoff.vim" in "/c/Users/108012516/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim82,/usr/share/vim/vimfiles/after,/c/Users/108012516/.vim/after"[J
Suche nach "/c/Users/108012516/.vim/ftoff.vim"[J
Suche nach "/usr/share/vim/vimfiles/ftoff.vim"[J
Suche nach "/usr/share/vim/vim82/ftoff.vim"[J
chdir(/usr/share/vim/vim82)[J
fchdir() to previous dir[J
Zeile 64: lese "/usr/share/vim/vim82/ftoff.vim"[J
Zeile 1: " Vim support file to switch off detection of file types[J

Zeile 2: "[J

Zeile 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

Zeile 4: " Last change:^I2001 Jun 11[J

Zeile 5: [J

Zeile 6: if exists("did_load_filetypes")[J

Zeile 7:   unlet did_load_filetypes[J

Zeile 8: endif[J

Zeile 9: [J

Zeile 10: " Remove all autocommands in the filetypedetect group[J

Zeile 11: silent! au! filetypedetect *[J

Lesen von /usr/share/vim/vim82/ftoff.vim beendet[J
weiter in /c/Users/108012516/dotfiles/vimConf/vimrc_fzf[J
Suche nach "/usr/share/vim/vimfiles/after/ftoff.vim"[J
Suche nach "/c/Users/108012516/.vim/after/ftoff.vim"[J
Zeile 65: [J

Zeile 66: " set the runtime path to include Vundle and initialize[J

Zeile 67: set rtp+=~/.vim/bundle/Vundle.vim[J

Zeile 68: call vundle#begin()[J

Suche nach "autoload/vundle.vim" in "/c/Users/108012516/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim82,/usr/share/vim/vimfiles/after,/c/Users/108012516/.vim/after,/c/Users/108012516/.vim/bundle/Vundle.vim"[J
Suche nach "/c/Users/108012516/.vim/autoload/vundle.vim"[J
Suche nach "/usr/share/vim/vimfiles/autoload/vundle.vim"[J
Suche nach "/usr/share/vim/vim82/autoload/vundle.vim"[J
Suche nach "/usr/share/vim/vimfiles/after/autoload/vundle.vim"[J
Suche nach "/c/Users/108012516/.vim/after/autoload/vundle.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/Vundle.vim/autoload/vundle.vim"[J
chdir(/c/Users/108012516/.vim/bundle/Vundle.vim/autoload)[J
fchdir() to previous dir[J
Zeile 68: lese "/c/Users/108012516/.vim/bundle/Vundle.vim/autoload/vundle.vim"[J
Zeile 1: " Vundle        is a shortcut for Vim Bundle and Is a simple plugin manager for Vim[J

Zeile 2: " Author:       gmarik[J

Zeile 3: " HomePage:     http://github.com/VundleVim/Vundle.vim[J

Zeile 4: " Readme:       http://github.com/VundleVim/Vundle.vim/blob/master/README.md[J

Zeile 5: " Version:      0.10.2[J

Zeile 6: [J

Zeile 7: " Plugin Commands[J

Zeile 8: com! -nargs=+  -bar   Plugin call vundle#config#bundle(<args>)[J

Zeile 10: [J

Zeile 11: com! -nargs=* -bang -complete=custom,vundle#scripts#complete PluginInstall call vundle#installer#new('!' == '<bang>', <f-args>)[J

Zeile 13: [J

Zeile 14: com! -nargs=? -bang -complete=custom,vundle#scripts#complete PluginSearch call vundle#scripts#all('!' == '<bang>', <q-args>)[J

Zeile 16: [J

Zeile 17: com! -nargs=0 -bang PluginList call vundle#installer#list('!' == '<bang>')[J

Zeile 19: [J

Zeile 20: com! -nargs=? -bang   PluginClean call vundle#installer#clean('!' == '<bang>')[J

Zeile 22: [J

Zeile 23: com! -nargs=0         PluginDocs call vundle#installer#helptags(g:vundle#bundles)[J

Zeile 25: [J

Zeile 26: " Aliases[J

Zeile 27: com! -nargs=* -complete=custom,vundle#scripts#complete PluginUpdate PluginInstall! <args>[J

Zeile 28: [J

Zeile 29: " Vundle Aliases[J

Zeile 30: com! -nargs=? -bang -complete=custom,vundle#scripts#complete VundleInstall PluginInstall<bang> <args>[J

Zeile 31: com! -nargs=? -bang -complete=custom,vundle#scripts#complete VundleSearch  PluginSearch<bang> <args>[J

Zeile 32: com! -nargs=? -bang                                          VundleClean   PluginClean<bang>[J

Zeile 33: com! -nargs=0                                                VundleDocs    PluginDocs[J

Zeile 34: com!                                                         VundleUpdate  PluginInstall![J

Zeile 35: com! -nargs=*       -complete=custom,vundle#scripts#complete VundleUpdate  PluginInstall! <args>[J

Zeile 36: [J

Zeile 37: " Deprecated Commands[J

Zeile 38: com! -nargs=+                                                Bundle        call vundle#config#bundle(<args>)[J

Zeile 39: com! -nargs=? -bang -complete=custom,vundle#scripts#complete BundleInstall PluginInstall<bang> <args>[J

Zeile 40: com! -nargs=? -bang -complete=custom,vundle#scripts#complete BundleSearch  PluginSearch<bang> <args>[J

Zeile 41: com! -nargs=0 -bang                                          BundleList    PluginList<bang>[J

Zeile 42: com! -nargs=? -bang                                          BundleClean   PluginClean<bang>[J

Zeile 43: com! -nargs=0                                                BundleDocs    PluginDocs[J

Zeile 44: com!                                                         BundleUpdate  PluginInstall![J

Zeile 45: [J

Zeile 46: " Set up the signs used in the installer window. (See :help signs)[J

Zeile 47: if (has('signs'))[J

Zeile 48:   sign define Vu_error    text=!  texthl=Error[J

Zeile 49:   sign define Vu_active   text=>  texthl=Comment[J

Zeile 50:   sign define Vu_todate   text=.  texthl=Comment[J

Zeile 51:   sign define Vu_new      text=+  texthl=Comment[J

Zeile 52:   sign define Vu_updated  text=*  texthl=Comment[J

Zeile 53:   sign define Vu_deleted  text=-  texthl=Comment[J

Zeile 54:   sign define Vu_helptags text=*  texthl=Comment[J

Zeile 55:   sign define Vu_pinned   text==  texthl=Comment[J

Zeile 56: endif[J

Zeile 57: [J

Zeile 58: " Set up Vundle.  This function has to be called from the users vimrc file.[J

Zeile 59: " This will force Vim to source this file as a side effect which wil define[J

Zeile 60: " the :Plugin command.  After calling this function the user can use the[J

Zeile 61: " :Plugin command in the vimrc.  It is not possible to do this automatically[J

Zeile 62: " because when loading the vimrc file no plugins where loaded yet.[J

Zeile 63: func! vundle#rc(...) abort[J

Zeile 69: [J

Zeile 70: " Alternative to vundle#rc, offers speed up by modifying rtp only when end()[J

Zeile 71: " called later.[J

Zeile 72: func! vundle#begin(...) abort[J

Zeile 76: [J

Zeile 77: " Finishes putting plugins on the rtp.[J

Zeile 78: func! vundle#end(...) abort[J

Zeile 82: [J

Zeile 83: " Initialize some global variables used by Vundle.[J

Zeile 84: let vundle#bundle_dir = expand('$HOME/.vim/bundle', 1)[J

Zeile 85: let vundle#bundles = [][J

Zeile 86: let vundle#lazy_load = 0[J

Zeile 87: let vundle#log = [][J

Zeile 88: let vundle#updated_bundles = [][J

Zeile 89: [J

Zeile 90: " vim: set expandtab sts=2 ts=2 sw=2 tw=78 norl:[J

Lesen von /c/Users/108012516/.vim/bundle/Vundle.vim/autoload/vundle.vim beendet[J
weiter in /c/Users/108012516/dotfiles/vimConf/vimrc_fzf[J
rufe vundle#begin auf[J()

Zeile 1:   let g:vundle#lazy_load = 1[J

Zeile 2:   call call('vundle#rc', a:000)[J

rufe vundle#rc auf[J()

Zeile 1:   if a:0 > 0[J

Zeile 2:     let g:vundle#bundle_dir = expand(a:1, 1)[J

Zeile 3:   endif[J

Zeile 4:   call vundle#config#init()[J

Suche nach "autoload/vundle/config.vim" in "/c/Users/108012516/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim82,/usr/share/vim/vimfiles/after,/c/Users/108012516/.vim/after,/c/Users/108012516/.vim/bundle/Vundle.vim"[J
Suche nach "/c/Users/108012516/.vim/autoload/vundle/config.vim"[J
Suche nach "/usr/share/vim/vimfiles/autoload/vundle/config.vim"[J
Suche nach "/usr/share/vim/vim82/autoload/vundle/config.vim"[J
Suche nach "/usr/share/vim/vimfiles/after/autoload/vundle/config.vim"[J
Suche nach "/c/Users/108012516/.vim/after/autoload/vundle/config.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/Vundle.vim/autoload/vundle/config.vim"[J
chdir(/c/Users/108012516/.vim/bundle/Vundle.vim/autoload/vundle)[J
fchdir() to previous dir[J
Zeile 4: lese "/c/Users/108012516/.vim/bundle/Vundle.vim/autoload/vundle/config.vim"[J
Zeile 1: " ---------------------------------------------------------------------------[J

Zeile 2: " Add a plugin to the runtimepath.[J

Zeile 3: "[J

Zeile 4: " arg    -- a string specifying the plugin[J

Zeile 5: " ...    -- a dictionary of options for the plugin[J

Zeile 6: " return -- the return value from vundle#config#init_bundle()[J

Zeile 7: " ---------------------------------------------------------------------------[J

Zeile 8: func! vundle#config#bundle(arg, ...)[J

Zeile 23: [J

Zeile 24: [J

Zeile 25: " ---------------------------------------------------------------------------[J

Zeile 26: "  When lazy bundle load is used (begin/end functions), add all configured[J

Zeile 27: "  bundles to runtimepath and reorder appropriately.[J

Zeile 28: " ---------------------------------------------------------------------------[J

Zeile 29: func! vundle#config#activate_bundles()[J

Zeile 33: [J

Zeile 34: [J

Zeile 35: " ---------------------------------------------------------------------------[J

Zeile 36: " Initialize Vundle.[J

Zeile 37: "[J

Zeile 38: " Start a new bundles list and make sure the runtimepath does not contain[J

Zeile 39: " directories from a previous call. In theory, this should only be called[J

Zeile 40: " once.[J

Zeile 41: " ---------------------------------------------------------------------------[J

Zeile 42: func! vundle#config#init()[J

Zeile 48: [J

Zeile 49: [J

Zeile 50: " ---------------------------------------------------------------------------[J

Zeile 51: " Add a list of bundles to the runtimepath and source them.[J

Zeile 52: "[J

Zeile 53: " bundles -- a list of bundle objects[J

Zeile 54: " ---------------------------------------------------------------------------[J

Zeile 55: func! vundle#config#require(bundles) abort[J

Zeile 66: [J

Zeile 67: [J

Zeile 68: " ---------------------------------------------------------------------------[J

Zeile 69: " Create a bundle object from a bundle specification.[J

Zeile 70: "[J

Zeile 71: " name   -- the bundle specification as a string[J

Zeile 72: " opts   -- the options dictionary from then bundle definition[J

Zeile 73: " return -- an initialized bundle object[J

Zeile 74: " ---------------------------------------------------------------------------[J

Zeile 75: func! vundle#config#init_bundle(name, opts)[J

Zeile 84: [J

Zeile 85: [J

Zeile 86: " ---------------------------------------------------------------------------[J

Zeile 87: " Check if the current bundle name has already been used in this running[J

Zeile 88: " instance and show an error to that effect.[J

Zeile 89: "[J

Zeile 90: " bundle -- a bundle object whose name is to be checked[J

Zeile 91: " return -- 0 if the bundle's name has been seen before, 1 otherwise[J

Zeile 92: " ---------------------------------------------------------------------------[J

Zeile 93: funct! s:check_bundle_name(bundle)[J

Zeile 107: [J

Zeile 108: [J

Zeile 109: " ---------------------------------------------------------------------------[J

Zeile 110: " Parse the options which can be supplied with the bundle specification.[J

Zeile 111: " Corresponding documentation: vundle-plugins-configure[J

Zeile 112: "[J

Zeile 113: " opts   -- a dictionary with the user supplied options for the bundle[J

Zeile 114: " return -- a dictionary with the user supplied options for the bundle, this[J

Zeile 115: "           will be merged with a s:bundle object into one dictionary.[J

Zeile 116: " ---------------------------------------------------------------------------[J

Zeile 117: func! s:parse_options(opts)[J

Zeile 127: [J

Zeile 128: [J

Zeile 129: " ---------------------------------------------------------------------------[J

Zeile 130: " Parse the plugin specification.  Corresponding documentation:[J

Zeile 131: " vundle-plugins-uris[J

Zeile 132: "[J

Zeile 133: " arg    -- the string supplied to identify the plugin[J

Zeile 134: " return -- a dictionary with the folder name (key 'name') and the uri (key[J

Zeile 135: "           'uri') for cloning the plugin  and the original argument (key[J

Zeile 136: "           'name_spec')[J

Zeile 137: " ---------------------------------------------------------------------------[J

Zeile 138: func! s:parse_name(arg)[J

Zeile 160: [J

Zeile 161: [J

Zeile 162: " ---------------------------------------------------------------------------[J

Zeile 163: "  Modify the runtimepath, after all bundles have been added, so that the[J

Zeile 164: "  directories that were in the default runtimepath appear first in the list[J

Zeile 165: "  (with their 'after' directories last).[J

Zeile 166: " ---------------------------------------------------------------------------[J

Zeile 167: func! s:rtp_add_defaults()[J

Zeile 179: [J

Zeile 180: [J

Zeile 181: " ---------------------------------------------------------------------------[J

Zeile 182: " Remove all paths for the plugins which are managed by Vundle from the[J

Zeile 183: " runtimepath.[J

Zeile 184: " ---------------------------------------------------------------------------[J

Zeile 185: func! s:rtp_rm_a()[J

Zeile 192: [J

Zeile 193: [J

Zeile 194: " ---------------------------------------------------------------------------[J

Zeile 195: " Add all paths for the plugins which are managed by Vundle to the[J

Zeile 196: " runtimepath.[J

Zeile 197: " ---------------------------------------------------------------------------[J

Zeile 198: func! s:rtp_add_a()[J

Zeile 205: [J

Zeile 206: [J

Zeile 207: " ---------------------------------------------------------------------------[J

Zeile 208: " Remove a directory and the corresponding 'after' directory from runtimepath.[J

Zeile 209: "[J

Zeile 210: " dir    -- the directory name to be removed as a string.  The corresponding[J

Zeile 211: "           'after' directory will also be removed.[J

Zeile 212: " ---------------------------------------------------------------------------[J

Zeile 213: func! s:rtp_rm(dir) abort[J

Zeile 217: [J

Zeile 218: [J

Zeile 219: " ---------------------------------------------------------------------------[J

Zeile 220: " Add a directory and the corresponding 'after' directory to runtimepath.[J

Zeile 221: "[J

Zeile 222: " dir    -- the directory name to be added as a string.  The corresponding[J

Zeile 223: "           'after' directory will also be added.[J

Zeile 224: " ---------------------------------------------------------------------------[J

Zeile 225: func! s:rtp_add(dir) abort[J

Zeile 229: [J

Zeile 230: [J

Zeile 231: " ---------------------------------------------------------------------------[J

Zeile 232: " Expand and simplify a path.[J

Zeile 233: "[J

Zeile 234: " path   -- the path to expand as a string[J

Zeile 235: " return -- the expanded and simplified path[J

Zeile 236: " ---------------------------------------------------------------------------[J

Zeile 237: func! s:expand_path(path) abort[J

Zeile 240: [J

Zeile 241: [J

Zeile 242: " ---------------------------------------------------------------------------[J

Zeile 243: " Find the actual path inside a bundle directory to be added to the[J

Zeile 244: " runtimepath.  It might be provided by the user with the 'rtp' option.[J

Zeile 245: " Corresponding documentation: vundle-plugins-configure[J

Zeile 246: "[J

Zeile 247: " opts   -- a bundle dict[J

Zeile 248: " return -- expanded path to the corresponding plugin directory[J

Zeile 249: " ---------------------------------------------------------------------------[J

Zeile 250: func! s:rtpath(opts)[J

Zeile 253: [J

Zeile 254: [J

Zeile 255: " ---------------------------------------------------------------------------[J

Zeile 256: " a bundle 'object'[J

Zeile 257: " ---------------------------------------------------------------------------[J

Zeile 258: let s:bundle = {}[J

Zeile 259: [J

Zeile 260: [J

Zeile 261: " ---------------------------------------------------------------------------[J

Zeile 262: " Return the absolute path to the directory inside the bundle directory[J

Zeile 263: " (prefix) where thr bundle will be cloned.[J

Zeile 264: "[J

Zeile 265: " return -- the target location to clone this bundle to[J

Zeile 266: " ---------------------------------------------------------------------------[J

Zeile 267: func! s:bundle.path()[J

Zeile 270: [J

Zeile 271: [J

Zeile 272: " ---------------------------------------------------------------------------[J

Zeile 273: "  Determine if the bundle has the pinned attribute set in the config[J

Zeile 274: "[J

Zeile 275: "  return -- 1 if the bundle is pinned, 0 otherwise[J

Zeile 276: " ---------------------------------------------------------------------------[J

Zeile 277: func! s:bundle.is_pinned()[J

Zeile 280: [J

Zeile 281: " vim: set expandtab sts=2 ts=2 sw=2 tw=78 norl:[J

Lesen von /c/Users/108012516/.vim/bundle/Vundle.vim/autoload/vundle/config.vim beendet[J
weiter in vundle#rc[J
rufe vundle#config#init auf[J()

Zeile 1:   if !exists('g:vundle#bundles') | let g:vundle#bundles = [] | endif[J

Zeile 1:  let g:vundle#bundles = [] | endif[J

Zeile 1:  endif[J

Zeile 2:   call s:rtp_rm_a()[J

rufe <SNR>4_rtp_rm_a auf[J()

Zeile 1:   let paths = map(copy(g:vundle#bundles), 'v:val.rtpath')[J

Zeile 2:   let prepends = join(paths, ',')[J

Zeile 3:   let appends = join(paths, '/after,').'/after'[J

Zeile 4:   exec 'set rtp-='.fnameescape(prepends)[J

Zeile 4: set rtp-=[J

Zeile 5:   exec 'set rtp-='.fnameescape(appends)[J

Zeile 5: set rtp-=/after[J

<SNR>4_rtp_rm_a lieferte #0 zurÃ¼ck[J

weiter in vundle#config#init[J

Zeile 3:   let g:vundle#bundles = [][J

Zeile 4:   let s:bundle_names = {}[J

vundle#config#init lieferte #0 zurÃ¼ck[J

weiter in vundle#rc[J

vundle#rc lieferte #0 zurÃ¼ck[J

weiter in vundle#begin[J

vundle#begin lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vimrc_fzf[J

Zeile 69: " alternatively, pass a path where Vundle should install plugins[J

Zeile 70: "call vundle#begin('~/some/path/here')[J

Zeile 71: [J

Zeile 72: " let Vundle manage Vundle, required[J

Zeile 73: Plugin 'VundleVim/Vundle.vim'[J

Zeile 73: call vundle#config#bundle('VundleVim/Vundle.vim')[J

rufe vundle#config#bundle auf[J('VundleVim/Vundle.vim')

Zeile 1:   let bundle = vundle#config#init_bundle(a:arg, a:000)[J

rufe vundle#config#init_bundle auf[J('VundleVim/Vundle.vim', [])

Zeile 1:   if a:name != substitute(a:name, '^\s*\(.\{-}\)\s*$', '\1', '')[J

Zeile 2:     echo "Spurious leading and/or trailing whitespace found in plugin spec '" . a:name . "'"[J

Zeile 3:   endif[J

Zeile 4:   let opts = extend(s:parse_options(a:opts), s:parse_name(substitute(a:name,"['".'"]\+','','g')), 'keep')[J

rufe <SNR>4_parse_options auf[J([])

Zeile 1:   " TODO: improve this[J

Zeile 2:   if len(a:opts) != 1 | return {} | endif[J

Zeile 2:  return {} | endif[J

<SNR>4_parse_options lieferte "{}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

rufe <SNR>4_parse_name auf[J('VundleVim/Vundle.vim')

Zeile 1:   let arg = a:arg[J

Zeile 2:   let git_proto = exists('g:vundle_default_git_proto') ? g:vundle_default_git_proto : 'https'[J

Zeile 3: [J

Zeile 4:   if    arg =~? '^\s*\(gh\|github\):\S\+'  || arg =~? '^[a-z0-9][a-z0-9-]*/[^/]\+$'[J

Zeile 6:     let uri = git_proto.'://github.com/'.split(arg, ':')[-1][J

Zeile 7:     if uri !~? '\.git$'[J

Zeile 8:       let uri .= '.git'[J

Zeile 9:     endif[J

Zeile 10:     let name = substitute(split(uri,'\/')[-1], '\.git\s*$','','i')[J

Zeile 11:   elseif arg =~? '^\s*\(git@\|git://\)\S\+'   || arg =~? '\(file\|https\?\)://'   || arg =~? '\.git\s*$'[J

Zeile 14:     let uri = arg[J

Zeile 15:     let name = split( substitute(uri,'/\?\.git\s*$','','i') ,'\/')[-1][J

Zeile 16:   else[J

Zeile 17:     let name = arg[J

Zeile 18:     let uri  = git_proto.'://github.com/vim-scripts/'.name.'.git'[J

Zeile 19:   endif[J

Zeile 20:   return {'name': name, 'uri': uri, 'name_spec': arg }[J

<SNR>4_parse_name lieferte "{'uri': 'https://github.com/VundleVim/...', 'name_spec': 'VundleVim/Vundle.vim'}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 5:   let b = extend(opts, copy(s:bundle))[J

Zeile 6:   let b.rtpath = s:rtpath(opts)[J

rufe <SNR>4_rtpath auf[J({'uri': 'https://github.com/VundleVim/...Vim/Vundle.vim', 'path': function('1')})

Zeile 1:   return has_key(a:opts, 'rtp') ? s:expand_path(a:opts.path().'/'.a:opts.rtp) : a:opts.path()[J

rufe 1 auf[J()

Zeile 1:   return s:expand_path(g:vundle#bundle_dir.'/') . self.name[J

rufe <SNR>4_expand_path auf[J('/c/Users/108012516/.vim/bundle/')

Zeile 1:   return simplify(expand(a:path, 1))[J

<SNR>4_expand_path lieferte "'/c/Users/108012516/.vim/bundle/'" zurÃ¼ck[J

weiter in 1[J

1 lieferte "'/c/Users/108012516/.vim/bundle/Vundle.vim'" zurÃ¼ck[J

weiter in <SNR>4_rtpath[J

<SNR>4_rtpath lieferte "'/c/Users/108012516/.vim/bundle/Vundle.vim'" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 7:   return b[J

vundle#config#init_bundle lieferte "{'uri': 'https://github.com/VundleVim/...Vim/Vundle.vim', 'path': function('1')}" zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 2:   if !s:check_bundle_name(bundle)[J

rufe <SNR>4_check_bundle_name auf[J({'uri': 'https://github.com/VundleVim/...Vim/Vundle.vim', 'path': function('1')})

Zeile 1:   if has_key(s:bundle_names, a:bundle.name)[J

Zeile 2:     echoerr 'Vundle error: Name collision for Plugin ' . a:bundle.name_spec . '. Plugin ' . s:bundle_names[a:bundle.name] . ' previously used the name "' . a:bundle.name . '"' . '. Skipping Plugin ' . a:bundle.name_spec . '.'[J

Zeile 6:     return 0[J

Zeile 7:   elseif a:bundle.name !~ '\v^[A-Za-z0-9_-]%(\.?[A-Za-z0-9_-])*$'[J

Zeile 8:     echoerr 'Invalid plugin name: ' . a:bundle.name[J

Zeile 9:     return 0[J

Zeile 10:   endif[J

Zeile 11:   let s:bundle_names[a:bundle.name] = a:bundle.name_spec[J

Zeile 12:   return 1[J

<SNR>4_check_bundle_name lieferte #1 zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 3:     return[J

Zeile 4:   endif[J

Zeile 5:   if exists('g:vundle#lazy_load') && g:vundle#lazy_load[J

Zeile 6:     call add(g:vundle#bundles, bundle)[J

Zeile 7:   else[J

Zeile 8:     call s:rtp_rm_a()[J

Zeile 9:     call add(g:vundle#bundles, bundle)[J

Zeile 10:     call s:rtp_add_a()[J

Zeile 11:     call s:rtp_add_defaults()[J

Zeile 12:   endif[J

Zeile 13:   return bundle[J

vundle#config#bundle lieferte "{'uri': 'https://github.com/VundleVim/...Vim/Vundle.vim', 'path': function('1')}" zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vimrc_fzf[J

Zeile 74: [J

Zeile 75: " The following are examples of different formats supported.[J

Zeile 76: " Keep Plugin commands between vundle#begin/end.[J

Zeile 77: " plugin on GitHub repo[J

Zeile 78: Plugin 'tpope/vim-fugitive'[J

Zeile 78: call vundle#config#bundle('tpope/vim-fugitive')[J

rufe vundle#config#bundle auf[J('tpope/vim-fugitive')

Zeile 1:   let bundle = vundle#config#init_bundle(a:arg, a:000)[J

rufe vundle#config#init_bundle auf[J('tpope/vim-fugitive', [])

Zeile 1:   if a:name != substitute(a:name, '^\s*\(.\{-}\)\s*$', '\1', '')[J

Zeile 2:     echo "Spurious leading and/or trailing whitespace found in plugin spec '" . a:name . "'"[J

Zeile 3:   endif[J

Zeile 4:   let opts = extend(s:parse_options(a:opts), s:parse_name(substitute(a:name,"['".'"]\+','','g')), 'keep')[J

rufe <SNR>4_parse_options auf[J([])

Zeile 1:   " TODO: improve this[J

Zeile 2:   if len(a:opts) != 1 | return {} | endif[J

Zeile 2:  return {} | endif[J

<SNR>4_parse_options lieferte "{}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

rufe <SNR>4_parse_name auf[J('tpope/vim-fugitive')

Zeile 1:   let arg = a:arg[J

Zeile 2:   let git_proto = exists('g:vundle_default_git_proto') ? g:vundle_default_git_proto : 'https'[J

Zeile 3: [J

Zeile 4:   if    arg =~? '^\s*\(gh\|github\):\S\+'  || arg =~? '^[a-z0-9][a-z0-9-]*/[^/]\+$'[J

Zeile 6:     let uri = git_proto.'://github.com/'.split(arg, ':')[-1][J

Zeile 7:     if uri !~? '\.git$'[J

Zeile 8:       let uri .= '.git'[J

Zeile 9:     endif[J

Zeile 10:     let name = substitute(split(uri,'\/')[-1], '\.git\s*$','','i')[J

Zeile 11:   elseif arg =~? '^\s*\(git@\|git://\)\S\+'   || arg =~? '\(file\|https\?\)://'   || arg =~? '\.git\s*$'[J

Zeile 14:     let uri = arg[J

Zeile 15:     let name = split( substitute(uri,'/\?\.git\s*$','','i') ,'\/')[-1][J

Zeile 16:   else[J

Zeile 17:     let name = arg[J

Zeile 18:     let uri  = git_proto.'://github.com/vim-scripts/'.name.'.git'[J

Zeile 19:   endif[J

Zeile 20:   return {'name': name, 'uri': uri, 'name_spec': arg }[J

<SNR>4_parse_name lieferte "{'uri': 'https://github.com/tpope/vim-...ve', 'name_spec': 'tpope/vim-fugitive'}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 5:   let b = extend(opts, copy(s:bundle))[J

Zeile 6:   let b.rtpath = s:rtpath(opts)[J

rufe <SNR>4_rtpath auf[J({'uri': 'https://github.com/tpope/vim-...e/vim-fugitive', 'path': function('1')})

Zeile 1:   return has_key(a:opts, 'rtp') ? s:expand_path(a:opts.path().'/'.a:opts.rtp) : a:opts.path()[J

rufe 1 auf[J()

Zeile 1:   return s:expand_path(g:vundle#bundle_dir.'/') . self.name[J

rufe <SNR>4_expand_path auf[J('/c/Users/108012516/.vim/bundle/')

Zeile 1:   return simplify(expand(a:path, 1))[J

<SNR>4_expand_path lieferte "'/c/Users/108012516/.vim/bundle/'" zurÃ¼ck[J

weiter in 1[J

1 lieferte "'/c/Users/108012516/.vim/bundle/vim-fugitive'" zurÃ¼ck[J

weiter in <SNR>4_rtpath[J

<SNR>4_rtpath lieferte "'/c/Users/108012516/.vim/bundle/vim-fugitive'" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 7:   return b[J

vundle#config#init_bundle lieferte "{'uri': 'https://github.com/tpope/vim-...e/vim-fugitive', 'path': function('1')}" zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 2:   if !s:check_bundle_name(bundle)[J

rufe <SNR>4_check_bundle_name auf[J({'uri': 'https://github.com/tpope/vim-...e/vim-fugitive', 'path': function('1')})

Zeile 1:   if has_key(s:bundle_names, a:bundle.name)[J

Zeile 2:     echoerr 'Vundle error: Name collision for Plugin ' . a:bundle.name_spec . '. Plugin ' . s:bundle_names[a:bundle.name] . ' previously used the name "' . a:bundle.name . '"' . '. Skipping Plugin ' . a:bundle.name_spec . '.'[J

Zeile 6:     return 0[J

Zeile 7:   elseif a:bundle.name !~ '\v^[A-Za-z0-9_-]%(\.?[A-Za-z0-9_-])*$'[J

Zeile 8:     echoerr 'Invalid plugin name: ' . a:bundle.name[J

Zeile 9:     return 0[J

Zeile 10:   endif[J

Zeile 11:   let s:bundle_names[a:bundle.name] = a:bundle.name_spec[J

Zeile 12:   return 1[J

<SNR>4_check_bundle_name lieferte #1 zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 3:     return[J

Zeile 4:   endif[J

Zeile 5:   if exists('g:vundle#lazy_load') && g:vundle#lazy_load[J

Zeile 6:     call add(g:vundle#bundles, bundle)[J

Zeile 7:   else[J

Zeile 8:     call s:rtp_rm_a()[J

Zeile 9:     call add(g:vundle#bundles, bundle)[J

Zeile 10:     call s:rtp_add_a()[J

Zeile 11:     call s:rtp_add_defaults()[J

Zeile 12:   endif[J

Zeile 13:   return bundle[J

vundle#config#bundle lieferte "{'uri': 'https://github.com/tpope/vim-...e/vim-fugitive', 'path': function('1')}" zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vimrc_fzf[J

Zeile 79: Plugin 'airblade/vim-gitgutter'[J

Zeile 79: call vundle#config#bundle('airblade/vim-gitgutter')[J

rufe vundle#config#bundle auf[J('airblade/vim-gitgutter')

Zeile 1:   let bundle = vundle#config#init_bundle(a:arg, a:000)[J

rufe vundle#config#init_bundle auf[J('airblade/vim-gitgutter', [])

Zeile 1:   if a:name != substitute(a:name, '^\s*\(.\{-}\)\s*$', '\1', '')[J

Zeile 2:     echo "Spurious leading and/or trailing whitespace found in plugin spec '" . a:name . "'"[J

Zeile 3:   endif[J

Zeile 4:   let opts = extend(s:parse_options(a:opts), s:parse_name(substitute(a:name,"['".'"]\+','','g')), 'keep')[J

rufe <SNR>4_parse_options auf[J([])

Zeile 1:   " TODO: improve this[J

Zeile 2:   if len(a:opts) != 1 | return {} | endif[J

Zeile 2:  return {} | endif[J

<SNR>4_parse_options lieferte "{}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

rufe <SNR>4_parse_name auf[J('airblade/vim-gitgutter')

Zeile 1:   let arg = a:arg[J

Zeile 2:   let git_proto = exists('g:vundle_default_git_proto') ? g:vundle_default_git_proto : 'https'[J

Zeile 3: [J

Zeile 4:   if    arg =~? '^\s*\(gh\|github\):\S\+'  || arg =~? '^[a-z0-9][a-z0-9-]*/[^/]\+$'[J

Zeile 6:     let uri = git_proto.'://github.com/'.split(arg, ':')[-1][J

Zeile 7:     if uri !~? '\.git$'[J

Zeile 8:       let uri .= '.git'[J

Zeile 9:     endif[J

Zeile 10:     let name = substitute(split(uri,'\/')[-1], '\.git\s*$','','i')[J

Zeile 11:   elseif arg =~? '^\s*\(git@\|git://\)\S\+'   || arg =~? '\(file\|https\?\)://'   || arg =~? '\.git\s*$'[J

Zeile 14:     let uri = arg[J

Zeile 15:     let name = split( substitute(uri,'/\?\.git\s*$','','i') ,'\/')[-1][J

Zeile 16:   else[J

Zeile 17:     let name = arg[J

Zeile 18:     let uri  = git_proto.'://github.com/vim-scripts/'.name.'.git'[J

Zeile 19:   endif[J

Zeile 20:   return {'name': name, 'uri': uri, 'name_spec': arg }[J

<SNR>4_parse_name lieferte "{'uri': 'https://github.com/airblade/v... 'name_spec': 'airblade/vim-gitgutter'}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 5:   let b = extend(opts, copy(s:bundle))[J

Zeile 6:   let b.rtpath = s:rtpath(opts)[J

rufe <SNR>4_rtpath auf[J({'uri': 'https://github.com/airblade/v.../vim-gitgutter', 'path': function('1')})

Zeile 1:   return has_key(a:opts, 'rtp') ? s:expand_path(a:opts.path().'/'.a:opts.rtp) : a:opts.path()[J

rufe 1 auf[J()

Zeile 1:   return s:expand_path(g:vundle#bundle_dir.'/') . self.name[J

rufe <SNR>4_expand_path auf[J('/c/Users/108012516/.vim/bundle/')

Zeile 1:   return simplify(expand(a:path, 1))[J

<SNR>4_expand_path lieferte "'/c/Users/108012516/.vim/bundle/'" zurÃ¼ck[J

weiter in 1[J

1 lieferte "'/c/Users/108012516/.vim/bundle/vim-gitgutter'" zurÃ¼ck[J

weiter in <SNR>4_rtpath[J

<SNR>4_rtpath lieferte "'/c/Users/108012516/.vim/bundle/vim-gitgutter'" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 7:   return b[J

vundle#config#init_bundle lieferte "{'uri': 'https://github.com/airblade/v.../vim-gitgutter', 'path': function('1')}" zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 2:   if !s:check_bundle_name(bundle)[J

rufe <SNR>4_check_bundle_name auf[J({'uri': 'https://github.com/airblade/v.../vim-gitgutter', 'path': function('1')})

Zeile 1:   if has_key(s:bundle_names, a:bundle.name)[J

Zeile 2:     echoerr 'Vundle error: Name collision for Plugin ' . a:bundle.name_spec . '. Plugin ' . s:bundle_names[a:bundle.name] . ' previously used the name "' . a:bundle.name . '"' . '. Skipping Plugin ' . a:bundle.name_spec . '.'[J

Zeile 6:     return 0[J

Zeile 7:   elseif a:bundle.name !~ '\v^[A-Za-z0-9_-]%(\.?[A-Za-z0-9_-])*$'[J

Zeile 8:     echoerr 'Invalid plugin name: ' . a:bundle.name[J

Zeile 9:     return 0[J

Zeile 10:   endif[J

Zeile 11:   let s:bundle_names[a:bundle.name] = a:bundle.name_spec[J

Zeile 12:   return 1[J

<SNR>4_check_bundle_name lieferte #1 zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 3:     return[J

Zeile 4:   endif[J

Zeile 5:   if exists('g:vundle#lazy_load') && g:vundle#lazy_load[J

Zeile 6:     call add(g:vundle#bundles, bundle)[J

Zeile 7:   else[J

Zeile 8:     call s:rtp_rm_a()[J

Zeile 9:     call add(g:vundle#bundles, bundle)[J

Zeile 10:     call s:rtp_add_a()[J

Zeile 11:     call s:rtp_add_defaults()[J

Zeile 12:   endif[J

Zeile 13:   return bundle[J

vundle#config#bundle lieferte "{'uri': 'https://github.com/airblade/v.../vim-gitgutter', 'path': function('1')}" zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vimrc_fzf[J

Zeile 80: Plugin 'octol/vim-cpp-enhanced-highlight'[J

Zeile 80: call vundle#config#bundle('octol/vim-cpp-enhanced-highlight')[J

rufe vundle#config#bundle auf[J('octol/vim-cpp-enhanced-highlight')

Zeile 1:   let bundle = vundle#config#init_bundle(a:arg, a:000)[J

rufe vundle#config#init_bundle auf[J('octol/vim-cpp-enhanced-highlight', [])

Zeile 1:   if a:name != substitute(a:name, '^\s*\(.\{-}\)\s*$', '\1', '')[J

Zeile 2:     echo "Spurious leading and/or trailing whitespace found in plugin spec '" . a:name . "'"[J

Zeile 3:   endif[J

Zeile 4:   let opts = extend(s:parse_options(a:opts), s:parse_name(substitute(a:name,"['".'"]\+','','g')), 'keep')[J

rufe <SNR>4_parse_options auf[J([])

Zeile 1:   " TODO: improve this[J

Zeile 2:   if len(a:opts) != 1 | return {} | endif[J

Zeile 2:  return {} | endif[J

<SNR>4_parse_options lieferte "{}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

rufe <SNR>4_parse_name auf[J('octol/vim-cpp-enhanced-highlight')

Zeile 1:   let arg = a:arg[J

Zeile 2:   let git_proto = exists('g:vundle_default_git_proto') ? g:vundle_default_git_proto : 'https'[J

Zeile 3: [J

Zeile 4:   if    arg =~? '^\s*\(gh\|github\):\S\+'  || arg =~? '^[a-z0-9][a-z0-9-]*/[^/]\+$'[J

Zeile 6:     let uri = git_proto.'://github.com/'.split(arg, ':')[-1][J

Zeile 7:     if uri !~? '\.git$'[J

Zeile 8:       let uri .= '.git'[J

Zeile 9:     endif[J

Zeile 10:     let name = substitute(split(uri,'\/')[-1], '\.git\s*$','','i')[J

Zeile 11:   elseif arg =~? '^\s*\(git@\|git://\)\S\+'   || arg =~? '\(file\|https\?\)://'   || arg =~? '\.git\s*$'[J

Zeile 14:     let uri = arg[J

Zeile 15:     let name = split( substitute(uri,'/\?\.git\s*$','','i') ,'\/')[-1][J

Zeile 16:   else[J

Zeile 17:     let name = arg[J

Zeile 18:     let uri  = git_proto.'://github.com/vim-scripts/'.name.'.git'[J

Zeile 19:   endif[J

Zeile 20:   return {'name': name, 'uri': uri, 'name_spec': arg }[J

<SNR>4_parse_name lieferte "{'uri': 'https://github.com/octol/vim-...c': 'octol/vim-cpp-enhanced-highlight'}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 5:   let b = extend(opts, copy(s:bundle))[J

Zeile 6:   let b.rtpath = s:rtpath(opts)[J

rufe <SNR>4_rtpath auf[J({'uri': 'https://github.com/octol/vim-...nced-highlight', 'path': function('1')})

Zeile 1:   return has_key(a:opts, 'rtp') ? s:expand_path(a:opts.path().'/'.a:opts.rtp) : a:opts.path()[J

rufe 1 auf[J()

Zeile 1:   return s:expand_path(g:vundle#bundle_dir.'/') . self.name[J

rufe <SNR>4_expand_path auf[J('/c/Users/108012516/.vim/bundle/')

Zeile 1:   return simplify(expand(a:path, 1))[J

<SNR>4_expand_path lieferte "'/c/Users/108012516/.vim/bundle/'" zurÃ¼ck[J

weiter in 1[J

1 lieferte "'/c/Users/108012516/.vim/bundle/vim-cpp-enhanced-highlight'" zurÃ¼ck[J

weiter in <SNR>4_rtpath[J

<SNR>4_rtpath lieferte "'/c/Users/108012516/.vim/bundle/vim-cpp-enhanced-highlight'" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 7:   return b[J

vundle#config#init_bundle lieferte "{'uri': 'https://github.com/octol/vim-...nced-highlight', 'path': function('1')}" zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 2:   if !s:check_bundle_name(bundle)[J

rufe <SNR>4_check_bundle_name auf[J({'uri': 'https://github.com/octol/vim-...nced-highlight', 'path': function('1')})

Zeile 1:   if has_key(s:bundle_names, a:bundle.name)[J

Zeile 2:     echoerr 'Vundle error: Name collision for Plugin ' . a:bundle.name_spec . '. Plugin ' . s:bundle_names[a:bundle.name] . ' previously used the name "' . a:bundle.name . '"' . '. Skipping Plugin ' . a:bundle.name_spec . '.'[J

Zeile 6:     return 0[J

Zeile 7:   elseif a:bundle.name !~ '\v^[A-Za-z0-9_-]%(\.?[A-Za-z0-9_-])*$'[J

Zeile 8:     echoerr 'Invalid plugin name: ' . a:bundle.name[J

Zeile 9:     return 0[J

Zeile 10:   endif[J

Zeile 11:   let s:bundle_names[a:bundle.name] = a:bundle.name_spec[J

Zeile 12:   return 1[J

<SNR>4_check_bundle_name lieferte #1 zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 3:     return[J

Zeile 4:   endif[J

Zeile 5:   if exists('g:vundle#lazy_load') && g:vundle#lazy_load[J

Zeile 6:     call add(g:vundle#bundles, bundle)[J

Zeile 7:   else[J

Zeile 8:     call s:rtp_rm_a()[J

Zeile 9:     call add(g:vundle#bundles, bundle)[J

Zeile 10:     call s:rtp_add_a()[J

Zeile 11:     call s:rtp_add_defaults()[J

Zeile 12:   endif[J

Zeile 13:   return bundle[J

vundle#config#bundle lieferte "{'uri': 'https://github.com/octol/vim-...nced-highlight', 'path': function('1')}" zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vimrc_fzf[J

Zeile 81: Plugin 'qpkorr/vim-bufkill'[J

Zeile 81: call vundle#config#bundle('qpkorr/vim-bufkill')[J

rufe vundle#config#bundle auf[J('qpkorr/vim-bufkill')

Zeile 1:   let bundle = vundle#config#init_bundle(a:arg, a:000)[J

rufe vundle#config#init_bundle auf[J('qpkorr/vim-bufkill', [])

Zeile 1:   if a:name != substitute(a:name, '^\s*\(.\{-}\)\s*$', '\1', '')[J

Zeile 2:     echo "Spurious leading and/or trailing whitespace found in plugin spec '" . a:name . "'"[J

Zeile 3:   endif[J

Zeile 4:   let opts = extend(s:parse_options(a:opts), s:parse_name(substitute(a:name,"['".'"]\+','','g')), 'keep')[J

rufe <SNR>4_parse_options auf[J([])

Zeile 1:   " TODO: improve this[J

Zeile 2:   if len(a:opts) != 1 | return {} | endif[J

Zeile 2:  return {} | endif[J

<SNR>4_parse_options lieferte "{}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

rufe <SNR>4_parse_name auf[J('qpkorr/vim-bufkill')

Zeile 1:   let arg = a:arg[J

Zeile 2:   let git_proto = exists('g:vundle_default_git_proto') ? g:vundle_default_git_proto : 'https'[J

Zeile 3: [J

Zeile 4:   if    arg =~? '^\s*\(gh\|github\):\S\+'  || arg =~? '^[a-z0-9][a-z0-9-]*/[^/]\+$'[J

Zeile 6:     let uri = git_proto.'://github.com/'.split(arg, ':')[-1][J

Zeile 7:     if uri !~? '\.git$'[J

Zeile 8:       let uri .= '.git'[J

Zeile 9:     endif[J

Zeile 10:     let name = substitute(split(uri,'\/')[-1], '\.git\s*$','','i')[J

Zeile 11:   elseif arg =~? '^\s*\(git@\|git://\)\S\+'   || arg =~? '\(file\|https\?\)://'   || arg =~? '\.git\s*$'[J

Zeile 14:     let uri = arg[J

Zeile 15:     let name = split( substitute(uri,'/\?\.git\s*$','','i') ,'\/')[-1][J

Zeile 16:   else[J

Zeile 17:     let name = arg[J

Zeile 18:     let uri  = git_proto.'://github.com/vim-scripts/'.name.'.git'[J

Zeile 19:   endif[J

Zeile 20:   return {'name': name, 'uri': uri, 'name_spec': arg }[J

<SNR>4_parse_name lieferte "{'uri': 'https://github.com/qpkorr/vim...ll', 'name_spec': 'qpkorr/vim-bufkill'}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 5:   let b = extend(opts, copy(s:bundle))[J

Zeile 6:   let b.rtpath = s:rtpath(opts)[J

rufe <SNR>4_rtpath auf[J({'uri': 'https://github.com/qpkorr/vim...rr/vim-bufkill', 'path': function('1')})

Zeile 1:   return has_key(a:opts, 'rtp') ? s:expand_path(a:opts.path().'/'.a:opts.rtp) : a:opts.path()[J

rufe 1 auf[J()

Zeile 1:   return s:expand_path(g:vundle#bundle_dir.'/') . self.name[J

rufe <SNR>4_expand_path auf[J('/c/Users/108012516/.vim/bundle/')

Zeile 1:   return simplify(expand(a:path, 1))[J

<SNR>4_expand_path lieferte "'/c/Users/108012516/.vim/bundle/'" zurÃ¼ck[J

weiter in 1[J

1 lieferte "'/c/Users/108012516/.vim/bundle/vim-bufkill'" zurÃ¼ck[J

weiter in <SNR>4_rtpath[J

<SNR>4_rtpath lieferte "'/c/Users/108012516/.vim/bundle/vim-bufkill'" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 7:   return b[J

vundle#config#init_bundle lieferte "{'uri': 'https://github.com/qpkorr/vim...rr/vim-bufkill', 'path': function('1')}" zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 2:   if !s:check_bundle_name(bundle)[J

rufe <SNR>4_check_bundle_name auf[J({'uri': 'https://github.com/qpkorr/vim...rr/vim-bufkill', 'path': function('1')})

Zeile 1:   if has_key(s:bundle_names, a:bundle.name)[J

Zeile 2:     echoerr 'Vundle error: Name collision for Plugin ' . a:bundle.name_spec . '. Plugin ' . s:bundle_names[a:bundle.name] . ' previously used the name "' . a:bundle.name . '"' . '. Skipping Plugin ' . a:bundle.name_spec . '.'[J

Zeile 6:     return 0[J

Zeile 7:   elseif a:bundle.name !~ '\v^[A-Za-z0-9_-]%(\.?[A-Za-z0-9_-])*$'[J

Zeile 8:     echoerr 'Invalid plugin name: ' . a:bundle.name[J

Zeile 9:     return 0[J

Zeile 10:   endif[J

Zeile 11:   let s:bundle_names[a:bundle.name] = a:bundle.name_spec[J

Zeile 12:   return 1[J

<SNR>4_check_bundle_name lieferte #1 zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 3:     return[J

Zeile 4:   endif[J

Zeile 5:   if exists('g:vundle#lazy_load') && g:vundle#lazy_load[J

Zeile 6:     call add(g:vundle#bundles, bundle)[J

Zeile 7:   else[J

Zeile 8:     call s:rtp_rm_a()[J

Zeile 9:     call add(g:vundle#bundles, bundle)[J

Zeile 10:     call s:rtp_add_a()[J

Zeile 11:     call s:rtp_add_defaults()[J

Zeile 12:   endif[J

Zeile 13:   return bundle[J

vundle#config#bundle lieferte "{'uri': 'https://github.com/qpkorr/vim...rr/vim-bufkill', 'path': function('1')}" zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vimrc_fzf[J

Zeile 82: [J

Zeile 83: " fzf fuzzy stuff happen here![J

Zeile 84: Plugin 'mileszs/ack.vim'[J

Zeile 84: call vundle#config#bundle('mileszs/ack.vim')[J

rufe vundle#config#bundle auf[J('mileszs/ack.vim')

Zeile 1:   let bundle = vundle#config#init_bundle(a:arg, a:000)[J

rufe vundle#config#init_bundle auf[J('mileszs/ack.vim', [])

Zeile 1:   if a:name != substitute(a:name, '^\s*\(.\{-}\)\s*$', '\1', '')[J

Zeile 2:     echo "Spurious leading and/or trailing whitespace found in plugin spec '" . a:name . "'"[J

Zeile 3:   endif[J

Zeile 4:   let opts = extend(s:parse_options(a:opts), s:parse_name(substitute(a:name,"['".'"]\+','','g')), 'keep')[J

rufe <SNR>4_parse_options auf[J([])

Zeile 1:   " TODO: improve this[J

Zeile 2:   if len(a:opts) != 1 | return {} | endif[J

Zeile 2:  return {} | endif[J

<SNR>4_parse_options lieferte "{}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

rufe <SNR>4_parse_name auf[J('mileszs/ack.vim')

Zeile 1:   let arg = a:arg[J

Zeile 2:   let git_proto = exists('g:vundle_default_git_proto') ? g:vundle_default_git_proto : 'https'[J

Zeile 3: [J

Zeile 4:   if    arg =~? '^\s*\(gh\|github\):\S\+'  || arg =~? '^[a-z0-9][a-z0-9-]*/[^/]\+$'[J

Zeile 6:     let uri = git_proto.'://github.com/'.split(arg, ':')[-1][J

Zeile 7:     if uri !~? '\.git$'[J

Zeile 8:       let uri .= '.git'[J

Zeile 9:     endif[J

Zeile 10:     let name = substitute(split(uri,'\/')[-1], '\.git\s*$','','i')[J

Zeile 11:   elseif arg =~? '^\s*\(git@\|git://\)\S\+'   || arg =~? '\(file\|https\?\)://'   || arg =~? '\.git\s*$'[J

Zeile 14:     let uri = arg[J

Zeile 15:     let name = split( substitute(uri,'/\?\.git\s*$','','i') ,'\/')[-1][J

Zeile 16:   else[J

Zeile 17:     let name = arg[J

Zeile 18:     let uri  = git_proto.'://github.com/vim-scripts/'.name.'.git'[J

Zeile 19:   endif[J

Zeile 20:   return {'name': name, 'uri': uri, 'name_spec': arg }[J

<SNR>4_parse_name lieferte "{'uri': 'https://github.com/mileszs/ac...k.vim', 'name_spec': 'mileszs/ack.vim'}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 5:   let b = extend(opts, copy(s:bundle))[J

Zeile 6:   let b.rtpath = s:rtpath(opts)[J

rufe <SNR>4_rtpath auf[J({'uri': 'https://github.com/mileszs/ac...ileszs/ack.vim', 'path': function('1')})

Zeile 1:   return has_key(a:opts, 'rtp') ? s:expand_path(a:opts.path().'/'.a:opts.rtp) : a:opts.path()[J

rufe 1 auf[J()

Zeile 1:   return s:expand_path(g:vundle#bundle_dir.'/') . self.name[J

rufe <SNR>4_expand_path auf[J('/c/Users/108012516/.vim/bundle/')

Zeile 1:   return simplify(expand(a:path, 1))[J

<SNR>4_expand_path lieferte "'/c/Users/108012516/.vim/bundle/'" zurÃ¼ck[J

weiter in 1[J

1 lieferte "'/c/Users/108012516/.vim/bundle/ack.vim'" zurÃ¼ck[J

weiter in <SNR>4_rtpath[J

<SNR>4_rtpath lieferte "'/c/Users/108012516/.vim/bundle/ack.vim'" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 7:   return b[J

vundle#config#init_bundle lieferte "{'uri': 'https://github.com/mileszs/ac...ileszs/ack.vim', 'path': function('1')}" zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 2:   if !s:check_bundle_name(bundle)[J

rufe <SNR>4_check_bundle_name auf[J({'uri': 'https://github.com/mileszs/ac...ileszs/ack.vim', 'path': function('1')})

Zeile 1:   if has_key(s:bundle_names, a:bundle.name)[J

Zeile 2:     echoerr 'Vundle error: Name collision for Plugin ' . a:bundle.name_spec . '. Plugin ' . s:bundle_names[a:bundle.name] . ' previously used the name "' . a:bundle.name . '"' . '. Skipping Plugin ' . a:bundle.name_spec . '.'[J

Zeile 6:     return 0[J

Zeile 7:   elseif a:bundle.name !~ '\v^[A-Za-z0-9_-]%(\.?[A-Za-z0-9_-])*$'[J

Zeile 8:     echoerr 'Invalid plugin name: ' . a:bundle.name[J

Zeile 9:     return 0[J

Zeile 10:   endif[J

Zeile 11:   let s:bundle_names[a:bundle.name] = a:bundle.name_spec[J

Zeile 12:   return 1[J

<SNR>4_check_bundle_name lieferte #1 zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 3:     return[J

Zeile 4:   endif[J

Zeile 5:   if exists('g:vundle#lazy_load') && g:vundle#lazy_load[J

Zeile 6:     call add(g:vundle#bundles, bundle)[J

Zeile 7:   else[J

Zeile 8:     call s:rtp_rm_a()[J

Zeile 9:     call add(g:vundle#bundles, bundle)[J

Zeile 10:     call s:rtp_add_a()[J

Zeile 11:     call s:rtp_add_defaults()[J

Zeile 12:   endif[J

Zeile 13:   return bundle[J

vundle#config#bundle lieferte "{'uri': 'https://github.com/mileszs/ac...ileszs/ack.vim', 'path': function('1')}" zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vimrc_fzf[J

Zeile 85: Plugin 'junegunn/fzf.vim'[J

Zeile 85: call vundle#config#bundle('junegunn/fzf.vim')[J

rufe vundle#config#bundle auf[J('junegunn/fzf.vim')

Zeile 1:   let bundle = vundle#config#init_bundle(a:arg, a:000)[J

rufe vundle#config#init_bundle auf[J('junegunn/fzf.vim', [])

Zeile 1:   if a:name != substitute(a:name, '^\s*\(.\{-}\)\s*$', '\1', '')[J

Zeile 2:     echo "Spurious leading and/or trailing whitespace found in plugin spec '" . a:name . "'"[J

Zeile 3:   endif[J

Zeile 4:   let opts = extend(s:parse_options(a:opts), s:parse_name(substitute(a:name,"['".'"]\+','','g')), 'keep')[J

rufe <SNR>4_parse_options auf[J([])

Zeile 1:   " TODO: improve this[J

Zeile 2:   if len(a:opts) != 1 | return {} | endif[J

Zeile 2:  return {} | endif[J

<SNR>4_parse_options lieferte "{}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

rufe <SNR>4_parse_name auf[J('junegunn/fzf.vim')

Zeile 1:   let arg = a:arg[J

Zeile 2:   let git_proto = exists('g:vundle_default_git_proto') ? g:vundle_default_git_proto : 'https'[J

Zeile 3: [J

Zeile 4:   if    arg =~? '^\s*\(gh\|github\):\S\+'  || arg =~? '^[a-z0-9][a-z0-9-]*/[^/]\+$'[J

Zeile 6:     let uri = git_proto.'://github.com/'.split(arg, ':')[-1][J

Zeile 7:     if uri !~? '\.git$'[J

Zeile 8:       let uri .= '.git'[J

Zeile 9:     endif[J

Zeile 10:     let name = substitute(split(uri,'\/')[-1], '\.git\s*$','','i')[J

Zeile 11:   elseif arg =~? '^\s*\(git@\|git://\)\S\+'   || arg =~? '\(file\|https\?\)://'   || arg =~? '\.git\s*$'[J

Zeile 14:     let uri = arg[J

Zeile 15:     let name = split( substitute(uri,'/\?\.git\s*$','','i') ,'\/')[-1][J

Zeile 16:   else[J

Zeile 17:     let name = arg[J

Zeile 18:     let uri  = git_proto.'://github.com/vim-scripts/'.name.'.git'[J

Zeile 19:   endif[J

Zeile 20:   return {'name': name, 'uri': uri, 'name_spec': arg }[J

<SNR>4_parse_name lieferte "{'uri': 'https://github.com/junegunn/f....vim', 'name_spec': 'junegunn/fzf.vim'}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 5:   let b = extend(opts, copy(s:bundle))[J

Zeile 6:   let b.rtpath = s:rtpath(opts)[J

rufe <SNR>4_rtpath auf[J({'uri': 'https://github.com/junegunn/f...negunn/fzf.vim', 'path': function('1')})

Zeile 1:   return has_key(a:opts, 'rtp') ? s:expand_path(a:opts.path().'/'.a:opts.rtp) : a:opts.path()[J

rufe 1 auf[J()

Zeile 1:   return s:expand_path(g:vundle#bundle_dir.'/') . self.name[J

rufe <SNR>4_expand_path auf[J('/c/Users/108012516/.vim/bundle/')

Zeile 1:   return simplify(expand(a:path, 1))[J

<SNR>4_expand_path lieferte "'/c/Users/108012516/.vim/bundle/'" zurÃ¼ck[J

weiter in 1[J

1 lieferte "'/c/Users/108012516/.vim/bundle/fzf.vim'" zurÃ¼ck[J

weiter in <SNR>4_rtpath[J

<SNR>4_rtpath lieferte "'/c/Users/108012516/.vim/bundle/fzf.vim'" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 7:   return b[J

vundle#config#init_bundle lieferte "{'uri': 'https://github.com/junegunn/f...negunn/fzf.vim', 'path': function('1')}" zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 2:   if !s:check_bundle_name(bundle)[J

rufe <SNR>4_check_bundle_name auf[J({'uri': 'https://github.com/junegunn/f...negunn/fzf.vim', 'path': function('1')})

Zeile 1:   if has_key(s:bundle_names, a:bundle.name)[J

Zeile 2:     echoerr 'Vundle error: Name collision for Plugin ' . a:bundle.name_spec . '. Plugin ' . s:bundle_names[a:bundle.name] . ' previously used the name "' . a:bundle.name . '"' . '. Skipping Plugin ' . a:bundle.name_spec . '.'[J

Zeile 6:     return 0[J

Zeile 7:   elseif a:bundle.name !~ '\v^[A-Za-z0-9_-]%(\.?[A-Za-z0-9_-])*$'[J

Zeile 8:     echoerr 'Invalid plugin name: ' . a:bundle.name[J

Zeile 9:     return 0[J

Zeile 10:   endif[J

Zeile 11:   let s:bundle_names[a:bundle.name] = a:bundle.name_spec[J

Zeile 12:   return 1[J

<SNR>4_check_bundle_name lieferte #1 zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 3:     return[J

Zeile 4:   endif[J

Zeile 5:   if exists('g:vundle#lazy_load') && g:vundle#lazy_load[J

Zeile 6:     call add(g:vundle#bundles, bundle)[J

Zeile 7:   else[J

Zeile 8:     call s:rtp_rm_a()[J

Zeile 9:     call add(g:vundle#bundles, bundle)[J

Zeile 10:     call s:rtp_add_a()[J

Zeile 11:     call s:rtp_add_defaults()[J

Zeile 12:   endif[J

Zeile 13:   return bundle[J

vundle#config#bundle lieferte "{'uri': 'https://github.com/junegunn/f...negunn/fzf.vim', 'path': function('1')}" zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vimrc_fzf[J

Zeile 86: Plugin 'junegunn/fzf'[J

Zeile 86: call vundle#config#bundle('junegunn/fzf')[J

rufe vundle#config#bundle auf[J('junegunn/fzf')

Zeile 1:   let bundle = vundle#config#init_bundle(a:arg, a:000)[J

rufe vundle#config#init_bundle auf[J('junegunn/fzf', [])

Zeile 1:   if a:name != substitute(a:name, '^\s*\(.\{-}\)\s*$', '\1', '')[J

Zeile 2:     echo "Spurious leading and/or trailing whitespace found in plugin spec '" . a:name . "'"[J

Zeile 3:   endif[J

Zeile 4:   let opts = extend(s:parse_options(a:opts), s:parse_name(substitute(a:name,"['".'"]\+','','g')), 'keep')[J

rufe <SNR>4_parse_options auf[J([])

Zeile 1:   " TODO: improve this[J

Zeile 2:   if len(a:opts) != 1 | return {} | endif[J

Zeile 2:  return {} | endif[J

<SNR>4_parse_options lieferte "{}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

rufe <SNR>4_parse_name auf[J('junegunn/fzf')

Zeile 1:   let arg = a:arg[J

Zeile 2:   let git_proto = exists('g:vundle_default_git_proto') ? g:vundle_default_git_proto : 'https'[J

Zeile 3: [J

Zeile 4:   if    arg =~? '^\s*\(gh\|github\):\S\+'  || arg =~? '^[a-z0-9][a-z0-9-]*/[^/]\+$'[J

Zeile 6:     let uri = git_proto.'://github.com/'.split(arg, ':')[-1][J

Zeile 7:     if uri !~? '\.git$'[J

Zeile 8:       let uri .= '.git'[J

Zeile 9:     endif[J

Zeile 10:     let name = substitute(split(uri,'\/')[-1], '\.git\s*$','','i')[J

Zeile 11:   elseif arg =~? '^\s*\(git@\|git://\)\S\+'   || arg =~? '\(file\|https\?\)://'   || arg =~? '\.git\s*$'[J

Zeile 14:     let uri = arg[J

Zeile 15:     let name = split( substitute(uri,'/\?\.git\s*$','','i') ,'\/')[-1][J

Zeile 16:   else[J

Zeile 17:     let name = arg[J

Zeile 18:     let uri  = git_proto.'://github.com/vim-scripts/'.name.'.git'[J

Zeile 19:   endif[J

Zeile 20:   return {'name': name, 'uri': uri, 'name_spec': arg }[J

<SNR>4_parse_name lieferte "{'uri': 'https://github.com/junegunn/f...e': 'fzf', 'name_spec': 'junegunn/fzf'}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 5:   let b = extend(opts, copy(s:bundle))[J

Zeile 6:   let b.rtpath = s:rtpath(opts)[J

rufe <SNR>4_rtpath auf[J({'uri': 'https://github.com/junegunn/f... 'junegunn/fzf', 'path': function('1')})

Zeile 1:   return has_key(a:opts, 'rtp') ? s:expand_path(a:opts.path().'/'.a:opts.rtp) : a:opts.path()[J

rufe 1 auf[J()

Zeile 1:   return s:expand_path(g:vundle#bundle_dir.'/') . self.name[J

rufe <SNR>4_expand_path auf[J('/c/Users/108012516/.vim/bundle/')

Zeile 1:   return simplify(expand(a:path, 1))[J

<SNR>4_expand_path lieferte "'/c/Users/108012516/.vim/bundle/'" zurÃ¼ck[J

weiter in 1[J

1 lieferte "'/c/Users/108012516/.vim/bundle/fzf'" zurÃ¼ck[J

weiter in <SNR>4_rtpath[J

<SNR>4_rtpath lieferte "'/c/Users/108012516/.vim/bundle/fzf'" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 7:   return b[J

vundle#config#init_bundle lieferte "{'uri': 'https://github.com/junegunn/f... 'junegunn/fzf', 'path': function('1')}" zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 2:   if !s:check_bundle_name(bundle)[J

rufe <SNR>4_check_bundle_name auf[J({'uri': 'https://github.com/junegunn/f... 'junegunn/fzf', 'path': function('1')})

Zeile 1:   if has_key(s:bundle_names, a:bundle.name)[J

Zeile 2:     echoerr 'Vundle error: Name collision for Plugin ' . a:bundle.name_spec . '. Plugin ' . s:bundle_names[a:bundle.name] . ' previously used the name "' . a:bundle.name . '"' . '. Skipping Plugin ' . a:bundle.name_spec . '.'[J

Zeile 6:     return 0[J

Zeile 7:   elseif a:bundle.name !~ '\v^[A-Za-z0-9_-]%(\.?[A-Za-z0-9_-])*$'[J

Zeile 8:     echoerr 'Invalid plugin name: ' . a:bundle.name[J

Zeile 9:     return 0[J

Zeile 10:   endif[J

Zeile 11:   let s:bundle_names[a:bundle.name] = a:bundle.name_spec[J

Zeile 12:   return 1[J

<SNR>4_check_bundle_name lieferte #1 zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 3:     return[J

Zeile 4:   endif[J

Zeile 5:   if exists('g:vundle#lazy_load') && g:vundle#lazy_load[J

Zeile 6:     call add(g:vundle#bundles, bundle)[J

Zeile 7:   else[J

Zeile 8:     call s:rtp_rm_a()[J

Zeile 9:     call add(g:vundle#bundles, bundle)[J

Zeile 10:     call s:rtp_add_a()[J

Zeile 11:     call s:rtp_add_defaults()[J

Zeile 12:   endif[J

Zeile 13:   return bundle[J

vundle#config#bundle lieferte "{'uri': 'https://github.com/junegunn/f... 'junegunn/fzf', 'path': function('1')}" zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vimrc_fzf[J

Zeile 87: [J

Zeile 88: " Automatically change directory to project root[J

Zeile 89: Plugin 'airblade/vim-rooter'[J

Zeile 89: call vundle#config#bundle('airblade/vim-rooter')[J

rufe vundle#config#bundle auf[J('airblade/vim-rooter')

Zeile 1:   let bundle = vundle#config#init_bundle(a:arg, a:000)[J

rufe vundle#config#init_bundle auf[J('airblade/vim-rooter', [])

Zeile 1:   if a:name != substitute(a:name, '^\s*\(.\{-}\)\s*$', '\1', '')[J

Zeile 2:     echo "Spurious leading and/or trailing whitespace found in plugin spec '" . a:name . "'"[J

Zeile 3:   endif[J

Zeile 4:   let opts = extend(s:parse_options(a:opts), s:parse_name(substitute(a:name,"['".'"]\+','','g')), 'keep')[J

rufe <SNR>4_parse_options auf[J([])

Zeile 1:   " TODO: improve this[J

Zeile 2:   if len(a:opts) != 1 | return {} | endif[J

Zeile 2:  return {} | endif[J

<SNR>4_parse_options lieferte "{}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

rufe <SNR>4_parse_name auf[J('airblade/vim-rooter')

Zeile 1:   let arg = a:arg[J

Zeile 2:   let git_proto = exists('g:vundle_default_git_proto') ? g:vundle_default_git_proto : 'https'[J

Zeile 3: [J

Zeile 4:   if    arg =~? '^\s*\(gh\|github\):\S\+'  || arg =~? '^[a-z0-9][a-z0-9-]*/[^/]\+$'[J

Zeile 6:     let uri = git_proto.'://github.com/'.split(arg, ':')[-1][J

Zeile 7:     if uri !~? '\.git$'[J

Zeile 8:       let uri .= '.git'[J

Zeile 9:     endif[J

Zeile 10:     let name = substitute(split(uri,'\/')[-1], '\.git\s*$','','i')[J

Zeile 11:   elseif arg =~? '^\s*\(git@\|git://\)\S\+'   || arg =~? '\(file\|https\?\)://'   || arg =~? '\.git\s*$'[J

Zeile 14:     let uri = arg[J

Zeile 15:     let name = split( substitute(uri,'/\?\.git\s*$','','i') ,'\/')[-1][J

Zeile 16:   else[J

Zeile 17:     let name = arg[J

Zeile 18:     let uri  = git_proto.'://github.com/vim-scripts/'.name.'.git'[J

Zeile 19:   endif[J

Zeile 20:   return {'name': name, 'uri': uri, 'name_spec': arg }[J

<SNR>4_parse_name lieferte "{'uri': 'https://github.com/airblade/v...r', 'name_spec': 'airblade/vim-rooter'}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 5:   let b = extend(opts, copy(s:bundle))[J

Zeile 6:   let b.rtpath = s:rtpath(opts)[J

rufe <SNR>4_rtpath auf[J({'uri': 'https://github.com/airblade/v...ade/vim-rooter', 'path': function('1')})

Zeile 1:   return has_key(a:opts, 'rtp') ? s:expand_path(a:opts.path().'/'.a:opts.rtp) : a:opts.path()[J

rufe 1 auf[J()

Zeile 1:   return s:expand_path(g:vundle#bundle_dir.'/') . self.name[J

rufe <SNR>4_expand_path auf[J('/c/Users/108012516/.vim/bundle/')

Zeile 1:   return simplify(expand(a:path, 1))[J

<SNR>4_expand_path lieferte "'/c/Users/108012516/.vim/bundle/'" zurÃ¼ck[J

weiter in 1[J

1 lieferte "'/c/Users/108012516/.vim/bundle/vim-rooter'" zurÃ¼ck[J

weiter in <SNR>4_rtpath[J

<SNR>4_rtpath lieferte "'/c/Users/108012516/.vim/bundle/vim-rooter'" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 7:   return b[J

vundle#config#init_bundle lieferte "{'uri': 'https://github.com/airblade/v...ade/vim-rooter', 'path': function('1')}" zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 2:   if !s:check_bundle_name(bundle)[J

rufe <SNR>4_check_bundle_name auf[J({'uri': 'https://github.com/airblade/v...ade/vim-rooter', 'path': function('1')})

Zeile 1:   if has_key(s:bundle_names, a:bundle.name)[J

Zeile 2:     echoerr 'Vundle error: Name collision for Plugin ' . a:bundle.name_spec . '. Plugin ' . s:bundle_names[a:bundle.name] . ' previously used the name "' . a:bundle.name . '"' . '. Skipping Plugin ' . a:bundle.name_spec . '.'[J

Zeile 6:     return 0[J

Zeile 7:   elseif a:bundle.name !~ '\v^[A-Za-z0-9_-]%(\.?[A-Za-z0-9_-])*$'[J

Zeile 8:     echoerr 'Invalid plugin name: ' . a:bundle.name[J

Zeile 9:     return 0[J

Zeile 10:   endif[J

Zeile 11:   let s:bundle_names[a:bundle.name] = a:bundle.name_spec[J

Zeile 12:   return 1[J

<SNR>4_check_bundle_name lieferte #1 zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 3:     return[J

Zeile 4:   endif[J

Zeile 5:   if exists('g:vundle#lazy_load') && g:vundle#lazy_load[J

Zeile 6:     call add(g:vundle#bundles, bundle)[J

Zeile 7:   else[J

Zeile 8:     call s:rtp_rm_a()[J

Zeile 9:     call add(g:vundle#bundles, bundle)[J

Zeile 10:     call s:rtp_add_a()[J

Zeile 11:     call s:rtp_add_defaults()[J

Zeile 12:   endif[J

Zeile 13:   return bundle[J

vundle#config#bundle lieferte "{'uri': 'https://github.com/airblade/v...ade/vim-rooter', 'path': function('1')}" zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vimrc_fzf[J

Zeile 90: [J

Zeile 91: " Syntax highlight[J

Zeile 92: Plugin 'sheerun/vim-polyglot'[J

Zeile 92: call vundle#config#bundle('sheerun/vim-polyglot')[J

rufe vundle#config#bundle auf[J('sheerun/vim-polyglot')

Zeile 1:   let bundle = vundle#config#init_bundle(a:arg, a:000)[J

rufe vundle#config#init_bundle auf[J('sheerun/vim-polyglot', [])

Zeile 1:   if a:name != substitute(a:name, '^\s*\(.\{-}\)\s*$', '\1', '')[J

Zeile 2:     echo "Spurious leading and/or trailing whitespace found in plugin spec '" . a:name . "'"[J

Zeile 3:   endif[J

Zeile 4:   let opts = extend(s:parse_options(a:opts), s:parse_name(substitute(a:name,"['".'"]\+','','g')), 'keep')[J

rufe <SNR>4_parse_options auf[J([])

Zeile 1:   " TODO: improve this[J

Zeile 2:   if len(a:opts) != 1 | return {} | endif[J

Zeile 2:  return {} | endif[J

<SNR>4_parse_options lieferte "{}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

rufe <SNR>4_parse_name auf[J('sheerun/vim-polyglot')

Zeile 1:   let arg = a:arg[J

Zeile 2:   let git_proto = exists('g:vundle_default_git_proto') ? g:vundle_default_git_proto : 'https'[J

Zeile 3: [J

Zeile 4:   if    arg =~? '^\s*\(gh\|github\):\S\+'  || arg =~? '^[a-z0-9][a-z0-9-]*/[^/]\+$'[J

Zeile 6:     let uri = git_proto.'://github.com/'.split(arg, ':')[-1][J

Zeile 7:     if uri !~? '\.git$'[J

Zeile 8:       let uri .= '.git'[J

Zeile 9:     endif[J

Zeile 10:     let name = substitute(split(uri,'\/')[-1], '\.git\s*$','','i')[J

Zeile 11:   elseif arg =~? '^\s*\(git@\|git://\)\S\+'   || arg =~? '\(file\|https\?\)://'   || arg =~? '\.git\s*$'[J

Zeile 14:     let uri = arg[J

Zeile 15:     let name = split( substitute(uri,'/\?\.git\s*$','','i') ,'\/')[-1][J

Zeile 16:   else[J

Zeile 17:     let name = arg[J

Zeile 18:     let uri  = git_proto.'://github.com/vim-scripts/'.name.'.git'[J

Zeile 19:   endif[J

Zeile 20:   return {'name': name, 'uri': uri, 'name_spec': arg }[J

<SNR>4_parse_name lieferte "{'uri': 'https://github.com/sheerun/vi...', 'name_spec': 'sheerun/vim-polyglot'}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 5:   let b = extend(opts, copy(s:bundle))[J

Zeile 6:   let b.rtpath = s:rtpath(opts)[J

rufe <SNR>4_rtpath auf[J({'uri': 'https://github.com/sheerun/vi...n/vim-polyglot', 'path': function('1')})

Zeile 1:   return has_key(a:opts, 'rtp') ? s:expand_path(a:opts.path().'/'.a:opts.rtp) : a:opts.path()[J

rufe 1 auf[J()

Zeile 1:   return s:expand_path(g:vundle#bundle_dir.'/') . self.name[J

rufe <SNR>4_expand_path auf[J('/c/Users/108012516/.vim/bundle/')

Zeile 1:   return simplify(expand(a:path, 1))[J

<SNR>4_expand_path lieferte "'/c/Users/108012516/.vim/bundle/'" zurÃ¼ck[J

weiter in 1[J

1 lieferte "'/c/Users/108012516/.vim/bundle/vim-polyglot'" zurÃ¼ck[J

weiter in <SNR>4_rtpath[J

<SNR>4_rtpath lieferte "'/c/Users/108012516/.vim/bundle/vim-polyglot'" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 7:   return b[J

vundle#config#init_bundle lieferte "{'uri': 'https://github.com/sheerun/vi...n/vim-polyglot', 'path': function('1')}" zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 2:   if !s:check_bundle_name(bundle)[J

rufe <SNR>4_check_bundle_name auf[J({'uri': 'https://github.com/sheerun/vi...n/vim-polyglot', 'path': function('1')})

Zeile 1:   if has_key(s:bundle_names, a:bundle.name)[J

Zeile 2:     echoerr 'Vundle error: Name collision for Plugin ' . a:bundle.name_spec . '. Plugin ' . s:bundle_names[a:bundle.name] . ' previously used the name "' . a:bundle.name . '"' . '. Skipping Plugin ' . a:bundle.name_spec . '.'[J

Zeile 6:     return 0[J

Zeile 7:   elseif a:bundle.name !~ '\v^[A-Za-z0-9_-]%(\.?[A-Za-z0-9_-])*$'[J

Zeile 8:     echoerr 'Invalid plugin name: ' . a:bundle.name[J

Zeile 9:     return 0[J

Zeile 10:   endif[J

Zeile 11:   let s:bundle_names[a:bundle.name] = a:bundle.name_spec[J

Zeile 12:   return 1[J

<SNR>4_check_bundle_name lieferte #1 zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 3:     return[J

Zeile 4:   endif[J

Zeile 5:   if exists('g:vundle#lazy_load') && g:vundle#lazy_load[J

Zeile 6:     call add(g:vundle#bundles, bundle)[J

Zeile 7:   else[J

Zeile 8:     call s:rtp_rm_a()[J

Zeile 9:     call add(g:vundle#bundles, bundle)[J

Zeile 10:     call s:rtp_add_a()[J

Zeile 11:     call s:rtp_add_defaults()[J

Zeile 12:   endif[J

Zeile 13:   return bundle[J

vundle#config#bundle lieferte "{'uri': 'https://github.com/sheerun/vi...n/vim-polyglot', 'path': function('1')}" zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vimrc_fzf[J

Zeile 93: " Code comments[J

Zeile 94: Plugin 'tpope/vim-commentary'[J

Zeile 94: call vundle#config#bundle('tpope/vim-commentary')[J

rufe vundle#config#bundle auf[J('tpope/vim-commentary')

Zeile 1:   let bundle = vundle#config#init_bundle(a:arg, a:000)[J

rufe vundle#config#init_bundle auf[J('tpope/vim-commentary', [])

Zeile 1:   if a:name != substitute(a:name, '^\s*\(.\{-}\)\s*$', '\1', '')[J

Zeile 2:     echo "Spurious leading and/or trailing whitespace found in plugin spec '" . a:name . "'"[J

Zeile 3:   endif[J

Zeile 4:   let opts = extend(s:parse_options(a:opts), s:parse_name(substitute(a:name,"['".'"]\+','','g')), 'keep')[J

rufe <SNR>4_parse_options auf[J([])

Zeile 1:   " TODO: improve this[J

Zeile 2:   if len(a:opts) != 1 | return {} | endif[J

Zeile 2:  return {} | endif[J

<SNR>4_parse_options lieferte "{}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

rufe <SNR>4_parse_name auf[J('tpope/vim-commentary')

Zeile 1:   let arg = a:arg[J

Zeile 2:   let git_proto = exists('g:vundle_default_git_proto') ? g:vundle_default_git_proto : 'https'[J

Zeile 3: [J

Zeile 4:   if    arg =~? '^\s*\(gh\|github\):\S\+'  || arg =~? '^[a-z0-9][a-z0-9-]*/[^/]\+$'[J

Zeile 6:     let uri = git_proto.'://github.com/'.split(arg, ':')[-1][J

Zeile 7:     if uri !~? '\.git$'[J

Zeile 8:       let uri .= '.git'[J

Zeile 9:     endif[J

Zeile 10:     let name = substitute(split(uri,'\/')[-1], '\.git\s*$','','i')[J

Zeile 11:   elseif arg =~? '^\s*\(git@\|git://\)\S\+'   || arg =~? '\(file\|https\?\)://'   || arg =~? '\.git\s*$'[J

Zeile 14:     let uri = arg[J

Zeile 15:     let name = split( substitute(uri,'/\?\.git\s*$','','i') ,'\/')[-1][J

Zeile 16:   else[J

Zeile 17:     let name = arg[J

Zeile 18:     let uri  = git_proto.'://github.com/vim-scripts/'.name.'.git'[J

Zeile 19:   endif[J

Zeile 20:   return {'name': name, 'uri': uri, 'name_spec': arg }[J

<SNR>4_parse_name lieferte "{'uri': 'https://github.com/tpope/vim-...', 'name_spec': 'tpope/vim-commentary'}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 5:   let b = extend(opts, copy(s:bundle))[J

Zeile 6:   let b.rtpath = s:rtpath(opts)[J

rufe <SNR>4_rtpath auf[J({'uri': 'https://github.com/tpope/vim-...vim-commentary', 'path': function('1')})

Zeile 1:   return has_key(a:opts, 'rtp') ? s:expand_path(a:opts.path().'/'.a:opts.rtp) : a:opts.path()[J

rufe 1 auf[J()

Zeile 1:   return s:expand_path(g:vundle#bundle_dir.'/') . self.name[J

rufe <SNR>4_expand_path auf[J('/c/Users/108012516/.vim/bundle/')

Zeile 1:   return simplify(expand(a:path, 1))[J

<SNR>4_expand_path lieferte "'/c/Users/108012516/.vim/bundle/'" zurÃ¼ck[J

weiter in 1[J

1 lieferte "'/c/Users/108012516/.vim/bundle/vim-commentary'" zurÃ¼ck[J

weiter in <SNR>4_rtpath[J

<SNR>4_rtpath lieferte "'/c/Users/108012516/.vim/bundle/vim-commentary'" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 7:   return b[J

vundle#config#init_bundle lieferte "{'uri': 'https://github.com/tpope/vim-...vim-commentary', 'path': function('1')}" zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 2:   if !s:check_bundle_name(bundle)[J

rufe <SNR>4_check_bundle_name auf[J({'uri': 'https://github.com/tpope/vim-...vim-commentary', 'path': function('1')})

Zeile 1:   if has_key(s:bundle_names, a:bundle.name)[J

Zeile 2:     echoerr 'Vundle error: Name collision for Plugin ' . a:bundle.name_spec . '. Plugin ' . s:bundle_names[a:bundle.name] . ' previously used the name "' . a:bundle.name . '"' . '. Skipping Plugin ' . a:bundle.name_spec . '.'[J

Zeile 6:     return 0[J

Zeile 7:   elseif a:bundle.name !~ '\v^[A-Za-z0-9_-]%(\.?[A-Za-z0-9_-])*$'[J

Zeile 8:     echoerr 'Invalid plugin name: ' . a:bundle.name[J

Zeile 9:     return 0[J

Zeile 10:   endif[J

Zeile 11:   let s:bundle_names[a:bundle.name] = a:bundle.name_spec[J

Zeile 12:   return 1[J

<SNR>4_check_bundle_name lieferte #1 zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 3:     return[J

Zeile 4:   endif[J

Zeile 5:   if exists('g:vundle#lazy_load') && g:vundle#lazy_load[J

Zeile 6:     call add(g:vundle#bundles, bundle)[J

Zeile 7:   else[J

Zeile 8:     call s:rtp_rm_a()[J

Zeile 9:     call add(g:vundle#bundles, bundle)[J

Zeile 10:     call s:rtp_add_a()[J

Zeile 11:     call s:rtp_add_defaults()[J

Zeile 12:   endif[J

Zeile 13:   return bundle[J

vundle#config#bundle lieferte "{'uri': 'https://github.com/tpope/vim-...vim-commentary', 'path': function('1')}" zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vimrc_fzf[J

Zeile 95: [J

Zeile 96: "Status line[J

Zeile 97: Plugin 'vim-airline/vim-airline'[J

Zeile 97: call vundle#config#bundle('vim-airline/vim-airline')[J

rufe vundle#config#bundle auf[J('vim-airline/vim-airline')

Zeile 1:   let bundle = vundle#config#init_bundle(a:arg, a:000)[J

rufe vundle#config#init_bundle auf[J('vim-airline/vim-airline', [])

Zeile 1:   if a:name != substitute(a:name, '^\s*\(.\{-}\)\s*$', '\1', '')[J

Zeile 2:     echo "Spurious leading and/or trailing whitespace found in plugin spec '" . a:name . "'"[J

Zeile 3:   endif[J

Zeile 4:   let opts = extend(s:parse_options(a:opts), s:parse_name(substitute(a:name,"['".'"]\+','','g')), 'keep')[J

rufe <SNR>4_parse_options auf[J([])

Zeile 1:   " TODO: improve this[J

Zeile 2:   if len(a:opts) != 1 | return {} | endif[J

Zeile 2:  return {} | endif[J

<SNR>4_parse_options lieferte "{}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

rufe <SNR>4_parse_name auf[J('vim-airline/vim-airline')

Zeile 1:   let arg = a:arg[J

Zeile 2:   let git_proto = exists('g:vundle_default_git_proto') ? g:vundle_default_git_proto : 'https'[J

Zeile 3: [J

Zeile 4:   if    arg =~? '^\s*\(gh\|github\):\S\+'  || arg =~? '^[a-z0-9][a-z0-9-]*/[^/]\+$'[J

Zeile 6:     let uri = git_proto.'://github.com/'.split(arg, ':')[-1][J

Zeile 7:     if uri !~? '\.git$'[J

Zeile 8:       let uri .= '.git'[J

Zeile 9:     endif[J

Zeile 10:     let name = substitute(split(uri,'\/')[-1], '\.git\s*$','','i')[J

Zeile 11:   elseif arg =~? '^\s*\(git@\|git://\)\S\+'   || arg =~? '\(file\|https\?\)://'   || arg =~? '\.git\s*$'[J

Zeile 14:     let uri = arg[J

Zeile 15:     let name = split( substitute(uri,'/\?\.git\s*$','','i') ,'\/')[-1][J

Zeile 16:   else[J

Zeile 17:     let name = arg[J

Zeile 18:     let uri  = git_proto.'://github.com/vim-scripts/'.name.'.git'[J

Zeile 19:   endif[J

Zeile 20:   return {'name': name, 'uri': uri, 'name_spec': arg }[J

<SNR>4_parse_name lieferte "{'uri': 'https://github.com/vim-airlin...'name_spec': 'vim-airline/vim-airline'}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 5:   let b = extend(opts, copy(s:bundle))[J

Zeile 6:   let b.rtpath = s:rtpath(opts)[J

rufe <SNR>4_rtpath auf[J({'uri': 'https://github.com/vim-airlin...ne/vim-airline', 'path': function('1')})

Zeile 1:   return has_key(a:opts, 'rtp') ? s:expand_path(a:opts.path().'/'.a:opts.rtp) : a:opts.path()[J

rufe 1 auf[J()

Zeile 1:   return s:expand_path(g:vundle#bundle_dir.'/') . self.name[J

rufe <SNR>4_expand_path auf[J('/c/Users/108012516/.vim/bundle/')

Zeile 1:   return simplify(expand(a:path, 1))[J

<SNR>4_expand_path lieferte "'/c/Users/108012516/.vim/bundle/'" zurÃ¼ck[J

weiter in 1[J

1 lieferte "'/c/Users/108012516/.vim/bundle/vim-airline'" zurÃ¼ck[J

weiter in <SNR>4_rtpath[J

<SNR>4_rtpath lieferte "'/c/Users/108012516/.vim/bundle/vim-airline'" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 7:   return b[J

vundle#config#init_bundle lieferte "{'uri': 'https://github.com/vim-airlin...ne/vim-airline', 'path': function('1')}" zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 2:   if !s:check_bundle_name(bundle)[J

rufe <SNR>4_check_bundle_name auf[J({'uri': 'https://github.com/vim-airlin...ne/vim-airline', 'path': function('1')})

Zeile 1:   if has_key(s:bundle_names, a:bundle.name)[J

Zeile 2:     echoerr 'Vundle error: Name collision for Plugin ' . a:bundle.name_spec . '. Plugin ' . s:bundle_names[a:bundle.name] . ' previously used the name "' . a:bundle.name . '"' . '. Skipping Plugin ' . a:bundle.name_spec . '.'[J

Zeile 6:     return 0[J

Zeile 7:   elseif a:bundle.name !~ '\v^[A-Za-z0-9_-]%(\.?[A-Za-z0-9_-])*$'[J

Zeile 8:     echoerr 'Invalid plugin name: ' . a:bundle.name[J

Zeile 9:     return 0[J

Zeile 10:   endif[J

Zeile 11:   let s:bundle_names[a:bundle.name] = a:bundle.name_spec[J

Zeile 12:   return 1[J

<SNR>4_check_bundle_name lieferte #1 zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 3:     return[J

Zeile 4:   endif[J

Zeile 5:   if exists('g:vundle#lazy_load') && g:vundle#lazy_load[J

Zeile 6:     call add(g:vundle#bundles, bundle)[J

Zeile 7:   else[J

Zeile 8:     call s:rtp_rm_a()[J

Zeile 9:     call add(g:vundle#bundles, bundle)[J

Zeile 10:     call s:rtp_add_a()[J

Zeile 11:     call s:rtp_add_defaults()[J

Zeile 12:   endif[J

Zeile 13:   return bundle[J

vundle#config#bundle lieferte "{'uri': 'https://github.com/vim-airlin...ne/vim-airline', 'path': function('1')}" zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vimrc_fzf[J

Zeile 98: Plugin 'vim-airline/vim-airline-themes'[J

Zeile 98: call vundle#config#bundle('vim-airline/vim-airline-themes')[J

rufe vundle#config#bundle auf[J('vim-airline/vim-airline-themes')

Zeile 1:   let bundle = vundle#config#init_bundle(a:arg, a:000)[J

rufe vundle#config#init_bundle auf[J('vim-airline/vim-airline-themes', [])

Zeile 1:   if a:name != substitute(a:name, '^\s*\(.\{-}\)\s*$', '\1', '')[J

Zeile 2:     echo "Spurious leading and/or trailing whitespace found in plugin spec '" . a:name . "'"[J

Zeile 3:   endif[J

Zeile 4:   let opts = extend(s:parse_options(a:opts), s:parse_name(substitute(a:name,"['".'"]\+','','g')), 'keep')[J

rufe <SNR>4_parse_options auf[J([])

Zeile 1:   " TODO: improve this[J

Zeile 2:   if len(a:opts) != 1 | return {} | endif[J

Zeile 2:  return {} | endif[J

<SNR>4_parse_options lieferte "{}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

rufe <SNR>4_parse_name auf[J('vim-airline/vim-airline-themes')

Zeile 1:   let arg = a:arg[J

Zeile 2:   let git_proto = exists('g:vundle_default_git_proto') ? g:vundle_default_git_proto : 'https'[J

Zeile 3: [J

Zeile 4:   if    arg =~? '^\s*\(gh\|github\):\S\+'  || arg =~? '^[a-z0-9][a-z0-9-]*/[^/]\+$'[J

Zeile 6:     let uri = git_proto.'://github.com/'.split(arg, ':')[-1][J

Zeile 7:     if uri !~? '\.git$'[J

Zeile 8:       let uri .= '.git'[J

Zeile 9:     endif[J

Zeile 10:     let name = substitute(split(uri,'\/')[-1], '\.git\s*$','','i')[J

Zeile 11:   elseif arg =~? '^\s*\(git@\|git://\)\S\+'   || arg =~? '\(file\|https\?\)://'   || arg =~? '\.git\s*$'[J

Zeile 14:     let uri = arg[J

Zeile 15:     let name = split( substitute(uri,'/\?\.git\s*$','','i') ,'\/')[-1][J

Zeile 16:   else[J

Zeile 17:     let name = arg[J

Zeile 18:     let uri  = git_proto.'://github.com/vim-scripts/'.name.'.git'[J

Zeile 19:   endif[J

Zeile 20:   return {'name': name, 'uri': uri, 'name_spec': arg }[J

<SNR>4_parse_name lieferte "{'uri': 'https://github.com/vim-airlin...pec': 'vim-airline/vim-airline-themes'}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 5:   let b = extend(opts, copy(s:bundle))[J

Zeile 6:   let b.rtpath = s:rtpath(opts)[J

rufe <SNR>4_rtpath auf[J({'uri': 'https://github.com/vim-airlin...airline-themes', 'path': function('1')})

Zeile 1:   return has_key(a:opts, 'rtp') ? s:expand_path(a:opts.path().'/'.a:opts.rtp) : a:opts.path()[J

rufe 1 auf[J()

Zeile 1:   return s:expand_path(g:vundle#bundle_dir.'/') . self.name[J

rufe <SNR>4_expand_path auf[J('/c/Users/108012516/.vim/bundle/')

Zeile 1:   return simplify(expand(a:path, 1))[J

<SNR>4_expand_path lieferte "'/c/Users/108012516/.vim/bundle/'" zurÃ¼ck[J

weiter in 1[J

1 lieferte "'/c/Users/108012516/.vim/bundle/vim-airline-themes'" zurÃ¼ck[J

weiter in <SNR>4_rtpath[J

<SNR>4_rtpath lieferte "'/c/Users/108012516/.vim/bundle/vim-airline-themes'" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 7:   return b[J

vundle#config#init_bundle lieferte "{'uri': 'https://github.com/vim-airlin...airline-themes', 'path': function('1')}" zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 2:   if !s:check_bundle_name(bundle)[J

rufe <SNR>4_check_bundle_name auf[J({'uri': 'https://github.com/vim-airlin...airline-themes', 'path': function('1')})

Zeile 1:   if has_key(s:bundle_names, a:bundle.name)[J

Zeile 2:     echoerr 'Vundle error: Name collision for Plugin ' . a:bundle.name_spec . '. Plugin ' . s:bundle_names[a:bundle.name] . ' previously used the name "' . a:bundle.name . '"' . '. Skipping Plugin ' . a:bundle.name_spec . '.'[J

Zeile 6:     return 0[J

Zeile 7:   elseif a:bundle.name !~ '\v^[A-Za-z0-9_-]%(\.?[A-Za-z0-9_-])*$'[J

Zeile 8:     echoerr 'Invalid plugin name: ' . a:bundle.name[J

Zeile 9:     return 0[J

Zeile 10:   endif[J

Zeile 11:   let s:bundle_names[a:bundle.name] = a:bundle.name_spec[J

Zeile 12:   return 1[J

<SNR>4_check_bundle_name lieferte #1 zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 3:     return[J

Zeile 4:   endif[J

Zeile 5:   if exists('g:vundle#lazy_load') && g:vundle#lazy_load[J

Zeile 6:     call add(g:vundle#bundles, bundle)[J

Zeile 7:   else[J

Zeile 8:     call s:rtp_rm_a()[J

Zeile 9:     call add(g:vundle#bundles, bundle)[J

Zeile 10:     call s:rtp_add_a()[J

Zeile 11:     call s:rtp_add_defaults()[J

Zeile 12:   endif[J

Zeile 13:   return bundle[J

vundle#config#bundle lieferte "{'uri': 'https://github.com/vim-airlin...airline-themes', 'path': function('1')}" zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vimrc_fzf[J

Zeile 99: "vim simple status line[J

Zeile 100: "Plugin 'itchyny/lightline.vim'[J

Zeile 101: [J

Zeile 102: " Gruvbox Community theme.  !!!!Danger for fzf make it Hang!!![J

Zeile 103: "Plugin 'gruvbox-community/gruvbox'[J

Zeile 104: Plugin 'frazrepo/vim-rainbow'[J

Zeile 104: call vundle#config#bundle('frazrepo/vim-rainbow')[J

rufe vundle#config#bundle auf[J('frazrepo/vim-rainbow')

Zeile 1:   let bundle = vundle#config#init_bundle(a:arg, a:000)[J

rufe vundle#config#init_bundle auf[J('frazrepo/vim-rainbow', [])

Zeile 1:   if a:name != substitute(a:name, '^\s*\(.\{-}\)\s*$', '\1', '')[J

Zeile 2:     echo "Spurious leading and/or trailing whitespace found in plugin spec '" . a:name . "'"[J

Zeile 3:   endif[J

Zeile 4:   let opts = extend(s:parse_options(a:opts), s:parse_name(substitute(a:name,"['".'"]\+','','g')), 'keep')[J

rufe <SNR>4_parse_options auf[J([])

Zeile 1:   " TODO: improve this[J

Zeile 2:   if len(a:opts) != 1 | return {} | endif[J

Zeile 2:  return {} | endif[J

<SNR>4_parse_options lieferte "{}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

rufe <SNR>4_parse_name auf[J('frazrepo/vim-rainbow')

Zeile 1:   let arg = a:arg[J

Zeile 2:   let git_proto = exists('g:vundle_default_git_proto') ? g:vundle_default_git_proto : 'https'[J

Zeile 3: [J

Zeile 4:   if    arg =~? '^\s*\(gh\|github\):\S\+'  || arg =~? '^[a-z0-9][a-z0-9-]*/[^/]\+$'[J

Zeile 6:     let uri = git_proto.'://github.com/'.split(arg, ':')[-1][J

Zeile 7:     if uri !~? '\.git$'[J

Zeile 8:       let uri .= '.git'[J

Zeile 9:     endif[J

Zeile 10:     let name = substitute(split(uri,'\/')[-1], '\.git\s*$','','i')[J

Zeile 11:   elseif arg =~? '^\s*\(git@\|git://\)\S\+'   || arg =~? '\(file\|https\?\)://'   || arg =~? '\.git\s*$'[J

Zeile 14:     let uri = arg[J

Zeile 15:     let name = split( substitute(uri,'/\?\.git\s*$','','i') ,'\/')[-1][J

Zeile 16:   else[J

Zeile 17:     let name = arg[J

Zeile 18:     let uri  = git_proto.'://github.com/vim-scripts/'.name.'.git'[J

Zeile 19:   endif[J

Zeile 20:   return {'name': name, 'uri': uri, 'name_spec': arg }[J

<SNR>4_parse_name lieferte "{'uri': 'https://github.com/frazrepo/v...', 'name_spec': 'frazrepo/vim-rainbow'}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 5:   let b = extend(opts, copy(s:bundle))[J

Zeile 6:   let b.rtpath = s:rtpath(opts)[J

rufe <SNR>4_rtpath auf[J({'uri': 'https://github.com/frazrepo/v...po/vim-rainbow', 'path': function('1')})

Zeile 1:   return has_key(a:opts, 'rtp') ? s:expand_path(a:opts.path().'/'.a:opts.rtp) : a:opts.path()[J

rufe 1 auf[J()

Zeile 1:   return s:expand_path(g:vundle#bundle_dir.'/') . self.name[J

rufe <SNR>4_expand_path auf[J('/c/Users/108012516/.vim/bundle/')

Zeile 1:   return simplify(expand(a:path, 1))[J

<SNR>4_expand_path lieferte "'/c/Users/108012516/.vim/bundle/'" zurÃ¼ck[J

weiter in 1[J

1 lieferte "'/c/Users/108012516/.vim/bundle/vim-rainbow'" zurÃ¼ck[J

weiter in <SNR>4_rtpath[J

<SNR>4_rtpath lieferte "'/c/Users/108012516/.vim/bundle/vim-rainbow'" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 7:   return b[J

vundle#config#init_bundle lieferte "{'uri': 'https://github.com/frazrepo/v...po/vim-rainbow', 'path': function('1')}" zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 2:   if !s:check_bundle_name(bundle)[J

rufe <SNR>4_check_bundle_name auf[J({'uri': 'https://github.com/frazrepo/v...po/vim-rainbow', 'path': function('1')})

Zeile 1:   if has_key(s:bundle_names, a:bundle.name)[J

Zeile 2:     echoerr 'Vundle error: Name collision for Plugin ' . a:bundle.name_spec . '. Plugin ' . s:bundle_names[a:bundle.name] . ' previously used the name "' . a:bundle.name . '"' . '. Skipping Plugin ' . a:bundle.name_spec . '.'[J

Zeile 6:     return 0[J

Zeile 7:   elseif a:bundle.name !~ '\v^[A-Za-z0-9_-]%(\.?[A-Za-z0-9_-])*$'[J

Zeile 8:     echoerr 'Invalid plugin name: ' . a:bundle.name[J

Zeile 9:     return 0[J

Zeile 10:   endif[J

Zeile 11:   let s:bundle_names[a:bundle.name] = a:bundle.name_spec[J

Zeile 12:   return 1[J

<SNR>4_check_bundle_name lieferte #1 zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 3:     return[J

Zeile 4:   endif[J

Zeile 5:   if exists('g:vundle#lazy_load') && g:vundle#lazy_load[J

Zeile 6:     call add(g:vundle#bundles, bundle)[J

Zeile 7:   else[J

Zeile 8:     call s:rtp_rm_a()[J

Zeile 9:     call add(g:vundle#bundles, bundle)[J

Zeile 10:     call s:rtp_add_a()[J

Zeile 11:     call s:rtp_add_defaults()[J

Zeile 12:   endif[J

Zeile 13:   return bundle[J

vundle#config#bundle lieferte "{'uri': 'https://github.com/frazrepo/v...po/vim-rainbow', 'path': function('1')}" zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vimrc_fzf[J

Zeile 105: Plugin 'ryanoasis/vim-devicons'[J

Zeile 105: call vundle#config#bundle('ryanoasis/vim-devicons')[J

rufe vundle#config#bundle auf[J('ryanoasis/vim-devicons')

Zeile 1:   let bundle = vundle#config#init_bundle(a:arg, a:000)[J

rufe vundle#config#init_bundle auf[J('ryanoasis/vim-devicons', [])

Zeile 1:   if a:name != substitute(a:name, '^\s*\(.\{-}\)\s*$', '\1', '')[J

Zeile 2:     echo "Spurious leading and/or trailing whitespace found in plugin spec '" . a:name . "'"[J

Zeile 3:   endif[J

Zeile 4:   let opts = extend(s:parse_options(a:opts), s:parse_name(substitute(a:name,"['".'"]\+','','g')), 'keep')[J

rufe <SNR>4_parse_options auf[J([])

Zeile 1:   " TODO: improve this[J

Zeile 2:   if len(a:opts) != 1 | return {} | endif[J

Zeile 2:  return {} | endif[J

<SNR>4_parse_options lieferte "{}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

rufe <SNR>4_parse_name auf[J('ryanoasis/vim-devicons')

Zeile 1:   let arg = a:arg[J

Zeile 2:   let git_proto = exists('g:vundle_default_git_proto') ? g:vundle_default_git_proto : 'https'[J

Zeile 3: [J

Zeile 4:   if    arg =~? '^\s*\(gh\|github\):\S\+'  || arg =~? '^[a-z0-9][a-z0-9-]*/[^/]\+$'[J

Zeile 6:     let uri = git_proto.'://github.com/'.split(arg, ':')[-1][J

Zeile 7:     if uri !~? '\.git$'[J

Zeile 8:       let uri .= '.git'[J

Zeile 9:     endif[J

Zeile 10:     let name = substitute(split(uri,'\/')[-1], '\.git\s*$','','i')[J

Zeile 11:   elseif arg =~? '^\s*\(git@\|git://\)\S\+'   || arg =~? '\(file\|https\?\)://'   || arg =~? '\.git\s*$'[J

Zeile 14:     let uri = arg[J

Zeile 15:     let name = split( substitute(uri,'/\?\.git\s*$','','i') ,'\/')[-1][J

Zeile 16:   else[J

Zeile 17:     let name = arg[J

Zeile 18:     let uri  = git_proto.'://github.com/vim-scripts/'.name.'.git'[J

Zeile 19:   endif[J

Zeile 20:   return {'name': name, 'uri': uri, 'name_spec': arg }[J

<SNR>4_parse_name lieferte "{'uri': 'https://github.com/ryanoasis/... 'name_spec': 'ryanoasis/vim-devicons'}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 5:   let b = extend(opts, copy(s:bundle))[J

Zeile 6:   let b.rtpath = s:rtpath(opts)[J

rufe <SNR>4_rtpath auf[J({'uri': 'https://github.com/ryanoasis/...s/vim-devicons', 'path': function('1')})

Zeile 1:   return has_key(a:opts, 'rtp') ? s:expand_path(a:opts.path().'/'.a:opts.rtp) : a:opts.path()[J

rufe 1 auf[J()

Zeile 1:   return s:expand_path(g:vundle#bundle_dir.'/') . self.name[J

rufe <SNR>4_expand_path auf[J('/c/Users/108012516/.vim/bundle/')

Zeile 1:   return simplify(expand(a:path, 1))[J

<SNR>4_expand_path lieferte "'/c/Users/108012516/.vim/bundle/'" zurÃ¼ck[J

weiter in 1[J

1 lieferte "'/c/Users/108012516/.vim/bundle/vim-devicons'" zurÃ¼ck[J

weiter in <SNR>4_rtpath[J

<SNR>4_rtpath lieferte "'/c/Users/108012516/.vim/bundle/vim-devicons'" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 7:   return b[J

vundle#config#init_bundle lieferte "{'uri': 'https://github.com/ryanoasis/...s/vim-devicons', 'path': function('1')}" zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 2:   if !s:check_bundle_name(bundle)[J

rufe <SNR>4_check_bundle_name auf[J({'uri': 'https://github.com/ryanoasis/...s/vim-devicons', 'path': function('1')})

Zeile 1:   if has_key(s:bundle_names, a:bundle.name)[J

Zeile 2:     echoerr 'Vundle error: Name collision for Plugin ' . a:bundle.name_spec . '. Plugin ' . s:bundle_names[a:bundle.name] . ' previously used the name "' . a:bundle.name . '"' . '. Skipping Plugin ' . a:bundle.name_spec . '.'[J

Zeile 6:     return 0[J

Zeile 7:   elseif a:bundle.name !~ '\v^[A-Za-z0-9_-]%(\.?[A-Za-z0-9_-])*$'[J

Zeile 8:     echoerr 'Invalid plugin name: ' . a:bundle.name[J

Zeile 9:     return 0[J

Zeile 10:   endif[J

Zeile 11:   let s:bundle_names[a:bundle.name] = a:bundle.name_spec[J

Zeile 12:   return 1[J

<SNR>4_check_bundle_name lieferte #1 zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 3:     return[J

Zeile 4:   endif[J

Zeile 5:   if exists('g:vundle#lazy_load') && g:vundle#lazy_load[J

Zeile 6:     call add(g:vundle#bundles, bundle)[J

Zeile 7:   else[J

Zeile 8:     call s:rtp_rm_a()[J

Zeile 9:     call add(g:vundle#bundles, bundle)[J

Zeile 10:     call s:rtp_add_a()[J

Zeile 11:     call s:rtp_add_defaults()[J

Zeile 12:   endif[J

Zeile 13:   return bundle[J

vundle#config#bundle lieferte "{'uri': 'https://github.com/ryanoasis/...s/vim-devicons', 'path': function('1')}" zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vimrc_fzf[J

Zeile 106: Plugin 'ryanoasis/vim-webdevicons'[J

Zeile 106: call vundle#config#bundle('ryanoasis/vim-webdevicons')[J

rufe vundle#config#bundle auf[J('ryanoasis/vim-webdevicons')

Zeile 1:   let bundle = vundle#config#init_bundle(a:arg, a:000)[J

rufe vundle#config#init_bundle auf[J('ryanoasis/vim-webdevicons', [])

Zeile 1:   if a:name != substitute(a:name, '^\s*\(.\{-}\)\s*$', '\1', '')[J

Zeile 2:     echo "Spurious leading and/or trailing whitespace found in plugin spec '" . a:name . "'"[J

Zeile 3:   endif[J

Zeile 4:   let opts = extend(s:parse_options(a:opts), s:parse_name(substitute(a:name,"['".'"]\+','','g')), 'keep')[J

rufe <SNR>4_parse_options auf[J([])

Zeile 1:   " TODO: improve this[J

Zeile 2:   if len(a:opts) != 1 | return {} | endif[J

Zeile 2:  return {} | endif[J

<SNR>4_parse_options lieferte "{}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

rufe <SNR>4_parse_name auf[J('ryanoasis/vim-webdevicons')

Zeile 1:   let arg = a:arg[J

Zeile 2:   let git_proto = exists('g:vundle_default_git_proto') ? g:vundle_default_git_proto : 'https'[J

Zeile 3: [J

Zeile 4:   if    arg =~? '^\s*\(gh\|github\):\S\+'  || arg =~? '^[a-z0-9][a-z0-9-]*/[^/]\+$'[J

Zeile 6:     let uri = git_proto.'://github.com/'.split(arg, ':')[-1][J

Zeile 7:     if uri !~? '\.git$'[J

Zeile 8:       let uri .= '.git'[J

Zeile 9:     endif[J

Zeile 10:     let name = substitute(split(uri,'\/')[-1], '\.git\s*$','','i')[J

Zeile 11:   elseif arg =~? '^\s*\(git@\|git://\)\S\+'   || arg =~? '\(file\|https\?\)://'   || arg =~? '\.git\s*$'[J

Zeile 14:     let uri = arg[J

Zeile 15:     let name = split( substitute(uri,'/\?\.git\s*$','','i') ,'\/')[-1][J

Zeile 16:   else[J

Zeile 17:     let name = arg[J

Zeile 18:     let uri  = git_proto.'://github.com/vim-scripts/'.name.'.git'[J

Zeile 19:   endif[J

Zeile 20:   return {'name': name, 'uri': uri, 'name_spec': arg }[J

<SNR>4_parse_name lieferte "{'uri': 'https://github.com/ryanoasis/...ame_spec': 'ryanoasis/vim-webdevicons'}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 5:   let b = extend(opts, copy(s:bundle))[J

Zeile 6:   let b.rtpath = s:rtpath(opts)[J

rufe <SNR>4_rtpath auf[J({'uri': 'https://github.com/ryanoasis/...im-webdevicons', 'path': function('1')})

Zeile 1:   return has_key(a:opts, 'rtp') ? s:expand_path(a:opts.path().'/'.a:opts.rtp) : a:opts.path()[J

rufe 1 auf[J()

Zeile 1:   return s:expand_path(g:vundle#bundle_dir.'/') . self.name[J

rufe <SNR>4_expand_path auf[J('/c/Users/108012516/.vim/bundle/')

Zeile 1:   return simplify(expand(a:path, 1))[J

<SNR>4_expand_path lieferte "'/c/Users/108012516/.vim/bundle/'" zurÃ¼ck[J

weiter in 1[J

1 lieferte "'/c/Users/108012516/.vim/bundle/vim-webdevicons'" zurÃ¼ck[J

weiter in <SNR>4_rtpath[J

<SNR>4_rtpath lieferte "'/c/Users/108012516/.vim/bundle/vim-webdevicons'" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 7:   return b[J

vundle#config#init_bundle lieferte "{'uri': 'https://github.com/ryanoasis/...im-webdevicons', 'path': function('1')}" zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 2:   if !s:check_bundle_name(bundle)[J

rufe <SNR>4_check_bundle_name auf[J({'uri': 'https://github.com/ryanoasis/...im-webdevicons', 'path': function('1')})

Zeile 1:   if has_key(s:bundle_names, a:bundle.name)[J

Zeile 2:     echoerr 'Vundle error: Name collision for Plugin ' . a:bundle.name_spec . '. Plugin ' . s:bundle_names[a:bundle.name] . ' previously used the name "' . a:bundle.name . '"' . '. Skipping Plugin ' . a:bundle.name_spec . '.'[J

Zeile 6:     return 0[J

Zeile 7:   elseif a:bundle.name !~ '\v^[A-Za-z0-9_-]%(\.?[A-Za-z0-9_-])*$'[J

Zeile 8:     echoerr 'Invalid plugin name: ' . a:bundle.name[J

Zeile 9:     return 0[J

Zeile 10:   endif[J

Zeile 11:   let s:bundle_names[a:bundle.name] = a:bundle.name_spec[J

Zeile 12:   return 1[J

<SNR>4_check_bundle_name lieferte #1 zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 3:     return[J

Zeile 4:   endif[J

Zeile 5:   if exists('g:vundle#lazy_load') && g:vundle#lazy_load[J

Zeile 6:     call add(g:vundle#bundles, bundle)[J

Zeile 7:   else[J

Zeile 8:     call s:rtp_rm_a()[J

Zeile 9:     call add(g:vundle#bundles, bundle)[J

Zeile 10:     call s:rtp_add_a()[J

Zeile 11:     call s:rtp_add_defaults()[J

Zeile 12:   endif[J

Zeile 13:   return bundle[J

vundle#config#bundle lieferte "{'uri': 'https://github.com/ryanoasis/...im-webdevicons', 'path': function('1')}" zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vimrc_fzf[J

Zeile 107: [J

Zeile 108: "Nice to have colorscheme[J

Zeile 109: Plugin 'rafi/awesome-vim-colorschemes'[J

Zeile 109: call vundle#config#bundle('rafi/awesome-vim-colorschemes')[J

rufe vundle#config#bundle auf[J('rafi/awesome-vim-colorschemes')

Zeile 1:   let bundle = vundle#config#init_bundle(a:arg, a:000)[J

rufe vundle#config#init_bundle auf[J('rafi/awesome-vim-colorschemes', [])

Zeile 1:   if a:name != substitute(a:name, '^\s*\(.\{-}\)\s*$', '\1', '')[J

Zeile 2:     echo "Spurious leading and/or trailing whitespace found in plugin spec '" . a:name . "'"[J

Zeile 3:   endif[J

Zeile 4:   let opts = extend(s:parse_options(a:opts), s:parse_name(substitute(a:name,"['".'"]\+','','g')), 'keep')[J

rufe <SNR>4_parse_options auf[J([])

Zeile 1:   " TODO: improve this[J

Zeile 2:   if len(a:opts) != 1 | return {} | endif[J

Zeile 2:  return {} | endif[J

<SNR>4_parse_options lieferte "{}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

rufe <SNR>4_parse_name auf[J('rafi/awesome-vim-colorschemes')

Zeile 1:   let arg = a:arg[J

Zeile 2:   let git_proto = exists('g:vundle_default_git_proto') ? g:vundle_default_git_proto : 'https'[J

Zeile 3: [J

Zeile 4:   if    arg =~? '^\s*\(gh\|github\):\S\+'  || arg =~? '^[a-z0-9][a-z0-9-]*/[^/]\+$'[J

Zeile 6:     let uri = git_proto.'://github.com/'.split(arg, ':')[-1][J

Zeile 7:     if uri !~? '\.git$'[J

Zeile 8:       let uri .= '.git'[J

Zeile 9:     endif[J

Zeile 10:     let name = substitute(split(uri,'\/')[-1], '\.git\s*$','','i')[J

Zeile 11:   elseif arg =~? '^\s*\(git@\|git://\)\S\+'   || arg =~? '\(file\|https\?\)://'   || arg =~? '\.git\s*$'[J

Zeile 14:     let uri = arg[J

Zeile 15:     let name = split( substitute(uri,'/\?\.git\s*$','','i') ,'\/')[-1][J

Zeile 16:   else[J

Zeile 17:     let name = arg[J

Zeile 18:     let uri  = git_proto.'://github.com/vim-scripts/'.name.'.git'[J

Zeile 19:   endif[J

Zeile 20:   return {'name': name, 'uri': uri, 'name_spec': arg }[J

<SNR>4_parse_name lieferte "{'uri': 'https://github.com/rafi/aweso...spec': 'rafi/awesome-vim-colorschemes'}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 5:   let b = extend(opts, copy(s:bundle))[J

Zeile 6:   let b.rtpath = s:rtpath(opts)[J

rufe <SNR>4_rtpath auf[J({'uri': 'https://github.com/rafi/aweso...m-colorschemes', 'path': function('1')})

Zeile 1:   return has_key(a:opts, 'rtp') ? s:expand_path(a:opts.path().'/'.a:opts.rtp) : a:opts.path()[J

rufe 1 auf[J()

Zeile 1:   return s:expand_path(g:vundle#bundle_dir.'/') . self.name[J

rufe <SNR>4_expand_path auf[J('/c/Users/108012516/.vim/bundle/')

Zeile 1:   return simplify(expand(a:path, 1))[J

<SNR>4_expand_path lieferte "'/c/Users/108012516/.vim/bundle/'" zurÃ¼ck[J

weiter in 1[J

1 lieferte "'/c/Users/108012516/.vim/bundle/awesome-vim-colorschemes'" zurÃ¼ck[J

weiter in <SNR>4_rtpath[J

<SNR>4_rtpath lieferte "'/c/Users/108012516/.vim/bundle/awesome-vim-colorschemes'" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 7:   return b[J

vundle#config#init_bundle lieferte "{'uri': 'https://github.com/rafi/aweso...m-colorschemes', 'path': function('1')}" zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 2:   if !s:check_bundle_name(bundle)[J

rufe <SNR>4_check_bundle_name auf[J({'uri': 'https://github.com/rafi/aweso...m-colorschemes', 'path': function('1')})

Zeile 1:   if has_key(s:bundle_names, a:bundle.name)[J

Zeile 2:     echoerr 'Vundle error: Name collision for Plugin ' . a:bundle.name_spec . '. Plugin ' . s:bundle_names[a:bundle.name] . ' previously used the name "' . a:bundle.name . '"' . '. Skipping Plugin ' . a:bundle.name_spec . '.'[J

Zeile 6:     return 0[J

Zeile 7:   elseif a:bundle.name !~ '\v^[A-Za-z0-9_-]%(\.?[A-Za-z0-9_-])*$'[J

Zeile 8:     echoerr 'Invalid plugin name: ' . a:bundle.name[J

Zeile 9:     return 0[J

Zeile 10:   endif[J

Zeile 11:   let s:bundle_names[a:bundle.name] = a:bundle.name_spec[J

Zeile 12:   return 1[J

<SNR>4_check_bundle_name lieferte #1 zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 3:     return[J

Zeile 4:   endif[J

Zeile 5:   if exists('g:vundle#lazy_load') && g:vundle#lazy_load[J

Zeile 6:     call add(g:vundle#bundles, bundle)[J

Zeile 7:   else[J

Zeile 8:     call s:rtp_rm_a()[J

Zeile 9:     call add(g:vundle#bundles, bundle)[J

Zeile 10:     call s:rtp_add_a()[J

Zeile 11:     call s:rtp_add_defaults()[J

Zeile 12:   endif[J

Zeile 13:   return bundle[J

vundle#config#bundle lieferte "{'uri': 'https://github.com/rafi/aweso...m-colorschemes', 'path': function('1')}" zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vimrc_fzf[J

Zeile 110: Plugin 'xolox/vim-misc'[J

Zeile 110: call vundle#config#bundle('xolox/vim-misc')[J

rufe vundle#config#bundle auf[J('xolox/vim-misc')

Zeile 1:   let bundle = vundle#config#init_bundle(a:arg, a:000)[J

rufe vundle#config#init_bundle auf[J('xolox/vim-misc', [])

Zeile 1:   if a:name != substitute(a:name, '^\s*\(.\{-}\)\s*$', '\1', '')[J

Zeile 2:     echo "Spurious leading and/or trailing whitespace found in plugin spec '" . a:name . "'"[J

Zeile 3:   endif[J

Zeile 4:   let opts = extend(s:parse_options(a:opts), s:parse_name(substitute(a:name,"['".'"]\+','','g')), 'keep')[J

rufe <SNR>4_parse_options auf[J([])

Zeile 1:   " TODO: improve this[J

Zeile 2:   if len(a:opts) != 1 | return {} | endif[J

Zeile 2:  return {} | endif[J

<SNR>4_parse_options lieferte "{}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

rufe <SNR>4_parse_name auf[J('xolox/vim-misc')

Zeile 1:   let arg = a:arg[J

Zeile 2:   let git_proto = exists('g:vundle_default_git_proto') ? g:vundle_default_git_proto : 'https'[J

Zeile 3: [J

Zeile 4:   if    arg =~? '^\s*\(gh\|github\):\S\+'  || arg =~? '^[a-z0-9][a-z0-9-]*/[^/]\+$'[J

Zeile 6:     let uri = git_proto.'://github.com/'.split(arg, ':')[-1][J

Zeile 7:     if uri !~? '\.git$'[J

Zeile 8:       let uri .= '.git'[J

Zeile 9:     endif[J

Zeile 10:     let name = substitute(split(uri,'\/')[-1], '\.git\s*$','','i')[J

Zeile 11:   elseif arg =~? '^\s*\(git@\|git://\)\S\+'   || arg =~? '\(file\|https\?\)://'   || arg =~? '\.git\s*$'[J

Zeile 14:     let uri = arg[J

Zeile 15:     let name = split( substitute(uri,'/\?\.git\s*$','','i') ,'\/')[-1][J

Zeile 16:   else[J

Zeile 17:     let name = arg[J

Zeile 18:     let uri  = git_proto.'://github.com/vim-scripts/'.name.'.git'[J

Zeile 19:   endif[J

Zeile 20:   return {'name': name, 'uri': uri, 'name_spec': arg }[J

<SNR>4_parse_name lieferte "{'uri': 'https://github.com/xolox/vim-...m-misc', 'name_spec': 'xolox/vim-misc'}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 5:   let b = extend(opts, copy(s:bundle))[J

Zeile 6:   let b.rtpath = s:rtpath(opts)[J

rufe <SNR>4_rtpath auf[J({'uri': 'https://github.com/xolox/vim-...xolox/vim-misc', 'path': function('1')})

Zeile 1:   return has_key(a:opts, 'rtp') ? s:expand_path(a:opts.path().'/'.a:opts.rtp) : a:opts.path()[J

rufe 1 auf[J()

Zeile 1:   return s:expand_path(g:vundle#bundle_dir.'/') . self.name[J

rufe <SNR>4_expand_path auf[J('/c/Users/108012516/.vim/bundle/')

Zeile 1:   return simplify(expand(a:path, 1))[J

<SNR>4_expand_path lieferte "'/c/Users/108012516/.vim/bundle/'" zurÃ¼ck[J

weiter in 1[J

1 lieferte "'/c/Users/108012516/.vim/bundle/vim-misc'" zurÃ¼ck[J

weiter in <SNR>4_rtpath[J

<SNR>4_rtpath lieferte "'/c/Users/108012516/.vim/bundle/vim-misc'" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 7:   return b[J

vundle#config#init_bundle lieferte "{'uri': 'https://github.com/xolox/vim-...xolox/vim-misc', 'path': function('1')}" zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 2:   if !s:check_bundle_name(bundle)[J

rufe <SNR>4_check_bundle_name auf[J({'uri': 'https://github.com/xolox/vim-...xolox/vim-misc', 'path': function('1')})

Zeile 1:   if has_key(s:bundle_names, a:bundle.name)[J

Zeile 2:     echoerr 'Vundle error: Name collision for Plugin ' . a:bundle.name_spec . '. Plugin ' . s:bundle_names[a:bundle.name] . ' previously used the name "' . a:bundle.name . '"' . '. Skipping Plugin ' . a:bundle.name_spec . '.'[J

Zeile 6:     return 0[J

Zeile 7:   elseif a:bundle.name !~ '\v^[A-Za-z0-9_-]%(\.?[A-Za-z0-9_-])*$'[J

Zeile 8:     echoerr 'Invalid plugin name: ' . a:bundle.name[J

Zeile 9:     return 0[J

Zeile 10:   endif[J

Zeile 11:   let s:bundle_names[a:bundle.name] = a:bundle.name_spec[J

Zeile 12:   return 1[J

<SNR>4_check_bundle_name lieferte #1 zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 3:     return[J

Zeile 4:   endif[J

Zeile 5:   if exists('g:vundle#lazy_load') && g:vundle#lazy_load[J

Zeile 6:     call add(g:vundle#bundles, bundle)[J

Zeile 7:   else[J

Zeile 8:     call s:rtp_rm_a()[J

Zeile 9:     call add(g:vundle#bundles, bundle)[J

Zeile 10:     call s:rtp_add_a()[J

Zeile 11:     call s:rtp_add_defaults()[J

Zeile 12:   endif[J

Zeile 13:   return bundle[J

vundle#config#bundle lieferte "{'uri': 'https://github.com/xolox/vim-...xolox/vim-misc', 'path': function('1')}" zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vimrc_fzf[J

Zeile 111: Plugin 'xolox/vim-colorscheme-switcher'[J

Zeile 111: call vundle#config#bundle('xolox/vim-colorscheme-switcher')[J

rufe vundle#config#bundle auf[J('xolox/vim-colorscheme-switcher')

Zeile 1:   let bundle = vundle#config#init_bundle(a:arg, a:000)[J

rufe vundle#config#init_bundle auf[J('xolox/vim-colorscheme-switcher', [])

Zeile 1:   if a:name != substitute(a:name, '^\s*\(.\{-}\)\s*$', '\1', '')[J

Zeile 2:     echo "Spurious leading and/or trailing whitespace found in plugin spec '" . a:name . "'"[J

Zeile 3:   endif[J

Zeile 4:   let opts = extend(s:parse_options(a:opts), s:parse_name(substitute(a:name,"['".'"]\+','','g')), 'keep')[J

rufe <SNR>4_parse_options auf[J([])

Zeile 1:   " TODO: improve this[J

Zeile 2:   if len(a:opts) != 1 | return {} | endif[J

Zeile 2:  return {} | endif[J

<SNR>4_parse_options lieferte "{}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

rufe <SNR>4_parse_name auf[J('xolox/vim-colorscheme-switcher')

Zeile 1:   let arg = a:arg[J

Zeile 2:   let git_proto = exists('g:vundle_default_git_proto') ? g:vundle_default_git_proto : 'https'[J

Zeile 3: [J

Zeile 4:   if    arg =~? '^\s*\(gh\|github\):\S\+'  || arg =~? '^[a-z0-9][a-z0-9-]*/[^/]\+$'[J

Zeile 6:     let uri = git_proto.'://github.com/'.split(arg, ':')[-1][J

Zeile 7:     if uri !~? '\.git$'[J

Zeile 8:       let uri .= '.git'[J

Zeile 9:     endif[J

Zeile 10:     let name = substitute(split(uri,'\/')[-1], '\.git\s*$','','i')[J

Zeile 11:   elseif arg =~? '^\s*\(git@\|git://\)\S\+'   || arg =~? '\(file\|https\?\)://'   || arg =~? '\.git\s*$'[J

Zeile 14:     let uri = arg[J

Zeile 15:     let name = split( substitute(uri,'/\?\.git\s*$','','i') ,'\/')[-1][J

Zeile 16:   else[J

Zeile 17:     let name = arg[J

Zeile 18:     let uri  = git_proto.'://github.com/vim-scripts/'.name.'.git'[J

Zeile 19:   endif[J

Zeile 20:   return {'name': name, 'uri': uri, 'name_spec': arg }[J

<SNR>4_parse_name lieferte "{'uri': 'https://github.com/xolox/vim-...pec': 'xolox/vim-colorscheme-switcher'}" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 5:   let b = extend(opts, copy(s:bundle))[J

Zeile 6:   let b.rtpath = s:rtpath(opts)[J

rufe <SNR>4_rtpath auf[J({'uri': 'https://github.com/xolox/vim-...cheme-switcher', 'path': function('1')})

Zeile 1:   return has_key(a:opts, 'rtp') ? s:expand_path(a:opts.path().'/'.a:opts.rtp) : a:opts.path()[J

rufe 1 auf[J()

Zeile 1:   return s:expand_path(g:vundle#bundle_dir.'/') . self.name[J

rufe <SNR>4_expand_path auf[J('/c/Users/108012516/.vim/bundle/')

Zeile 1:   return simplify(expand(a:path, 1))[J

<SNR>4_expand_path lieferte "'/c/Users/108012516/.vim/bundle/'" zurÃ¼ck[J

weiter in 1[J

1 lieferte "'/c/Users/108012516/.vim/bundle/vim-colorscheme-switcher'" zurÃ¼ck[J

weiter in <SNR>4_rtpath[J

<SNR>4_rtpath lieferte "'/c/Users/108012516/.vim/bundle/vim-colorscheme-switcher'" zurÃ¼ck[J

weiter in vundle#config#init_bundle[J

Zeile 7:   return b[J

vundle#config#init_bundle lieferte "{'uri': 'https://github.com/xolox/vim-...cheme-switcher', 'path': function('1')}" zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 2:   if !s:check_bundle_name(bundle)[J

rufe <SNR>4_check_bundle_name auf[J({'uri': 'https://github.com/xolox/vim-...cheme-switcher', 'path': function('1')})

Zeile 1:   if has_key(s:bundle_names, a:bundle.name)[J

Zeile 2:     echoerr 'Vundle error: Name collision for Plugin ' . a:bundle.name_spec . '. Plugin ' . s:bundle_names[a:bundle.name] . ' previously used the name "' . a:bundle.name . '"' . '. Skipping Plugin ' . a:bundle.name_spec . '.'[J

Zeile 6:     return 0[J

Zeile 7:   elseif a:bundle.name !~ '\v^[A-Za-z0-9_-]%(\.?[A-Za-z0-9_-])*$'[J

Zeile 8:     echoerr 'Invalid plugin name: ' . a:bundle.name[J

Zeile 9:     return 0[J

Zeile 10:   endif[J

Zeile 11:   let s:bundle_names[a:bundle.name] = a:bundle.name_spec[J

Zeile 12:   return 1[J

<SNR>4_check_bundle_name lieferte #1 zurÃ¼ck[J

weiter in vundle#config#bundle[J

Zeile 3:     return[J

Zeile 4:   endif[J

Zeile 5:   if exists('g:vundle#lazy_load') && g:vundle#lazy_load[J

Zeile 6:     call add(g:vundle#bundles, bundle)[J

Zeile 7:   else[J

Zeile 8:     call s:rtp_rm_a()[J

Zeile 9:     call add(g:vundle#bundles, bundle)[J

Zeile 10:     call s:rtp_add_a()[J

Zeile 11:     call s:rtp_add_defaults()[J

Zeile 12:   endif[J

Zeile 13:   return bundle[J

vundle#config#bundle lieferte "{'uri': 'https://github.com/xolox/vim-...cheme-switcher', 'path': function('1')}" zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vimrc_fzf[J

Zeile 112: [J

Zeile 113: " All of your Plugins must be added before the following line[J

Zeile 114: call vundle#end()            " required[J

rufe vundle#end auf[J()

Zeile 1:   unlet g:vundle#lazy_load[J

Zeile 2:   call vundle#config#activate_bundles()[J

rufe vundle#config#activate_bundles auf[J()

Zeile 1:   call s:rtp_add_a()[J

rufe <SNR>4_rtp_add_a auf[J()

Zeile 1:   let paths = map(copy(g:vundle#bundles), 'v:val.rtpath')[J

Zeile 2:   let prepends = join(paths, ',')[J

Zeile 3:   let appends = join(paths, '/after,').'/after'[J

Zeile 4:   exec 'set rtp^='.fnameescape(prepends)[J

Zeile 4: set rtp^=/c/Users/108012516/.vim/bundle/Vundle.vim,/c/Users/108012516/.vim/bundle/vim-fugitive,/c/Users/108012516/.vim/bundle/vim-gitgutter,/c/Users/108012516/.vim/bundle/vim-cpp-enhanced-highlight,/c/Users/108012516/.vim/bundle/vim-bufkill,/c/Users/108012516/.vim/bundle/ack.vim,/c/Users/108012516/.vim/bundle/fzf.vim,/c/Users/108012516/.vim/bundle/fzf,/c/Users/108012516/.vim/bundle/vim-rooter,/c/Users/108012516/.vim/bundle/vim-polyglot,/c/Users/108012516/.vim/bundle/vim-commentary,/c/Users/108012516/.vim/bundle/vim-airline,/c/Users/108012516/.vim/bundle/vim-airline-themes,/c/Users/108012516/.vim/bundle/vim-rainbow,/c/Users/108012516/.vim/bundle/vim-devicons,/c/Users/108012516/.vim/bundle/vim-webdevicons,/c/Users/108012516/.vim/bundle/awesome-vim-colorschemes,/c/Users/108012516/.vim/bundle/vim-misc,/c/Users/108012516/.vim/bundle/vim-colorscheme-switcher[J

Zeile 5:   exec 'set rtp+='.fnameescape(appends)[J

Zeile 5: set rtp+=/c/Users/108012516/.vim/bundle/Vundle.vim/after,/c/Users/108012516/.vim/bundle/vim-fugitive/after,/c/Users/108012516/.vim/bundle/vim-gitgutter/after,/c/Users/108012516/.vim/bundle/vim-cpp-enhanced-highlight/after,/c/Users/108012516/.vim/bundle/vim-bufkill/after,/c/Users/108012516/.vim/bundle/ack.vim/after,/c/Users/108012516/.vim/bundle/fzf.vim/after,/c/Users/108012516/.vim/bundle/fzf/after,/c/Users/108012516/.vim/bundle/vim-rooter/after,/c/Users/108012516/.vim/bundle/vim-polyglot/after,/c/Users/108012516/.vim/bundle/vim-commentary/after,/c/Users/108012516/.vim/bundle/vim-airline/after,/c/Users/108012516/.vim/bundle/vim-airline-themes/after,/c/Users/108012516/.vim/bundle/vim-rainbow/after,/c/Users/108012516/.vim/bundle/vim-devicons/after,/c/Users/108012516/.vim/bundle/vim-webdevicons/after,/c/Users/108012516/.vim/bundle/awesome-vim-colorschemes/after,/c/Users/108012516/.vim/bundle/vim-misc/after,/c/Users/108012516/.vim/bundle/vim-colorscheme-switcher/after[J

<SNR>4_rtp_add_a lieferte #0 zurÃ¼ck[J

weiter in vundle#config#activate_bundles[J

Zeile 2:   call s:rtp_add_defaults()[J

rufe <SNR>4_rtp_add_defaults auf[J()

Zeile 1:   let current = &rtp[J

Zeile 2:   set rtp&vim[J

Zeile 3:   let default = &rtp[J

Zeile 4:   let &rtp = current[J

Zeile 5:   let default_rtp_items = split(default, ',')[J

Zeile 6:   if !empty(default_rtp_items)[J

Zeile 7:     let first_item = fnameescape(default_rtp_items[0])[J

Zeile 8:     exec 'set rtp-=' . first_item[J

Zeile 8: set rtp-=/c/Users/108012516/.vim[J

Zeile 9:     exec 'set rtp^=' . first_item[J

Zeile 9: set rtp^=/c/Users/108012516/.vim[J

Zeile 10:   endif[J

<SNR>4_rtp_add_defaults lieferte #0 zurÃ¼ck[J

weiter in vundle#config#activate_bundles[J

vundle#config#activate_bundles lieferte #0 zurÃ¼ck[J

weiter in vundle#end[J

vundle#end lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vimrc_fzf[J

Zeile 115: filetype plugin indent on    " required[J

Suche nach "filetype.vim" in "/c/Users/108012516/.vim,/c/Users/108012516/.vim/bundle/Vundle.vim,/c/Users/108012516/.vim/bundle/vim-fugitive,/c/Users/108012516/.vim/bundle/vim-gitgutter,/c/Users/108012516/.vim/bundle/vim-cpp-enhanced-highlight,/c/Users/108012516/.vim/bundle/vim-bufkill,/c/Users/108012516/.vim/bundle/ack.vim,/c/Users/108012516/.vim/bundle/fzf.vim,/c/Users/108012516/.vim/bundle/fzf,/c/Users/108012516/.vim/bundle/vim-rooter,/c/Users/108012516/.vim/bundle/vim-polyglot,/c/Users/108012516/.vim/bundle/vim-commentary,/c/Users/108012516/.vim/bundle/vim-airline,/c/Users/108012516/.vim/bundle/vim-airline-themes,/c/Users/108012516/.vim/bundle/vim-rainbow,/c/Users/108012516/.vim/bundle/vim-devicons,/c/Users/108012516/.vim/bundle/vim-webdevicons,/c/Users/108012516/.vim/bundle/awesome-vim-colorschemes,/c/Users/108012516/.vim/bundle/vim-misc,/c/Users/108012516/.vim/bundle/vim-colorscheme-switcher,/usr/share/vim/vimfiles,/usr/share/vim/vim82,/usr/share/vim/vimfiles/after,/c/Users/108012516/.vim/after,/c/Users/[J
Suche nach "/c/Users/108012516/.vim/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/Vundle.vim/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-fugitive/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-gitgutter/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-cpp-enhanced-highlight/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-bufkill/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/ack.vim/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/fzf.vim/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/fzf/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-rooter/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-polyglot/filetype.vim"[J
chdir(/c/Users/108012516/.vim/bundle/vim-polyglot)[J
fchdir() to previous dir[J
Zeile 115: lese "/c/Users/108012516/.vim/bundle/vim-polyglot/filetype.vim"[J
Zeile 1: call polyglot#init#init()[J

Suche nach "autoload/polyglot/init.vim" in "/c/Users/108012516/.vim,/c/Users/108012516/.vim/bundle/Vundle.vim,/c/Users/108012516/.vim/bundle/vim-fugitive,/c/Users/108012516/.vim/bundle/vim-gitgutter,/c/Users/108012516/.vim/bundle/vim-cpp-enhanced-highlight,/c/Users/108012516/.vim/bundle/vim-bufkill,/c/Users/108012516/.vim/bundle/ack.vim,/c/Users/108012516/.vim/bundle/fzf.vim,/c/Users/108012516/.vim/bundle/fzf,/c/Users/108012516/.vim/bundle/vim-rooter,/c/Users/108012516/.vim/bundle/vim-polyglot,/c/Users/108012516/.vim/bundle/vim-commentary,/c/Users/108012516/.vim/bundle/vim-airline,/c/Users/108012516/.vim/bundle/vim-airline-themes,/c/Users/108012516/.vim/bundle/vim-rainbow,/c/Users/108012516/.vim/bundle/vim-devicons,/c/Users/108012516/.vim/bundle/vim-webdevicons,/c/Users/108012516/.vim/bundle/awesome-vim-colorschemes,/c/Users/108012516/.vim/bundle/vim-misc,/c/Users/108012516/.vim/bundle/vim-colorscheme-switcher,/usr/share/vim/vimfiles,/usr/share/vim/vim82,/usr/share/vim/vimfiles/after,/c/Users/108012516/.vim/a[J
Suche nach "/c/Users/108012516/.vim/autoload/polyglot/init.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/Vundle.vim/autoload/polyglot/init.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-fugitive/autoload/polyglot/init.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-gitgutter/autoload/polyglot/init.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-cpp-enhanced-highlight/autoload/polyglot/init.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-bufkill/autoload/polyglot/init.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/ack.vim/autoload/polyglot/init.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/fzf.vim/autoload/polyglot/init.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/fzf/autoload/polyglot/init.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-rooter/autoload/polyglot/init.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim"[J
chdir(/c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot)[J
fchdir() to previous dir[J
Zeile 1: lese "/c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim"[J
Zeile 1: " Vim support file to detect file types[J

Zeile 2: "[J

Zeile 3: " Maintainer:^IAdam Stankiewicz <sheerun@sher.pl>[J

Zeile 4: " URL: https://github.com/sheerun/vim-polyglot[J

Zeile 5: [J

Zeile 6: " Listen very carefully, I will say this only once[J

Zeile 7: if exists("did_load_polyglot")[J

Zeile 8:   finish[J

Zeile 9: endif[J

Zeile 10: [J

Zeile 11: " Switch to compatible mode for the time being[J

Zeile 12: let s:cpo_save = &cpo[J

Zeile 13: set cpo&vim[J

Zeile 14: [J

Zeile 15: let did_load_polyglot = 1[J

Zeile 16: [J

Zeile 17: let g:polyglot_initialized = 0[J

Zeile 18: [J

Zeile 19: func! polyglot#init#init()[J

Zeile 22: [J

Zeile 23: func! polyglot#init#is_disabled(caller, name, path)[J

Zeile 38: [J

Zeile 39: let g:polyglot_is_disabled = {}[J

Zeile 40: let s:new_polyglot_disabled = [][J

Zeile 41: [J

Zeile 42: if exists('g:polyglot_disabled')[J

Zeile 43:   for pkg in g:polyglot_disabled[J

Zeile 44:     let base = split(pkg, '\.')[J

Zeile 45:     if len(base) > 0[J

Zeile 46:       let g:polyglot_is_disabled[pkg] = 1[J

Zeile 47:       call add(s:new_polyglot_disabled, base[0])[J

Zeile 48:     endif[J

Zeile 49:   endfor[J

Zeile 50: else[J

Zeile 51:   let g:polyglot_disabled_not_set = 1[J

Zeile 52: endif[J

Zeile 53: [J

Zeile 54: func! PolyglotVerify()[J

Zeile 65: [J

Zeile 66: au VimEnter * call PolyglotVerify()[J

Zeile 67: [J

Zeile 68: function! s:SetDefault(name, value)[J

Zeile 73: [J

Zeile 74: call s:SetDefault('g:markdown_enable_spell_checking', 0)[J

rufe <SNR>6_SetDefault auf[J('g:markdown_enable_spell_checking', 0)

Zeile 1:   if !exists(a:name)[J

Zeile 2:     let {a:name} = a:value[J

Zeile 3:   endif[J

<SNR>6_SetDefault lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim[J

Zeile 75: call s:SetDefault('g:markdown_enable_input_abbreviations', 0)[J

rufe <SNR>6_SetDefault auf[J('g:markdown_enable_input_abbreviations', 0)

Zeile 1:   if !exists(a:name)[J

Zeile 2:     let {a:name} = a:value[J

Zeile 3:   endif[J

<SNR>6_SetDefault lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim[J

Zeile 76: call s:SetDefault('g:markdown_enable_mappings', 0)[J

rufe <SNR>6_SetDefault auf[J('g:markdown_enable_mappings', 0)

Zeile 1:   if !exists(a:name)[J

Zeile 2:     let {a:name} = a:value[J

Zeile 3:   endif[J

<SNR>6_SetDefault lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim[J

Zeile 77: [J

Zeile 78: " Enable jsx syntax by default[J

Zeile 79: call s:SetDefault('g:jsx_ext_required', 0)[J

rufe <SNR>6_SetDefault auf[J('g:jsx_ext_required', 0)

Zeile 1:   if !exists(a:name)[J

Zeile 2:     let {a:name} = a:value[J

Zeile 3:   endif[J

<SNR>6_SetDefault lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim[J

Zeile 80: [J

Zeile 81: " Needed for sql highlighting[J

Zeile 82: call s:SetDefault('g:javascript_sql_dialect', 'sql')[J

rufe <SNR>6_SetDefault auf[J('g:javascript_sql_dialect', 'sql')

Zeile 1:   if !exists(a:name)[J

Zeile 2:     let {a:name} = a:value[J

Zeile 3:   endif[J

<SNR>6_SetDefault lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim[J

Zeile 83: [J

Zeile 84: " Enable jsdoc highlighting by default[J

Zeile 85: call s:SetDefault('g:javascript_plugin_jsdoc', 1)[J

rufe <SNR>6_SetDefault auf[J('g:javascript_plugin_jsdoc', 1)

Zeile 1:   if !exists(a:name)[J

Zeile 2:     let {a:name} = a:value[J

Zeile 3:   endif[J

<SNR>6_SetDefault lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim[J

Zeile 86: [J

Zeile 87: " Make csv loading faster[J

Zeile 88: call s:SetDefault('g:csv_start', 1)[J

rufe <SNR>6_SetDefault auf[J('g:csv_start', 1)

Zeile 1:   if !exists(a:name)[J

Zeile 2:     let {a:name} = a:value[J

Zeile 3:   endif[J

<SNR>6_SetDefault lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim[J

Zeile 89: call s:SetDefault('g:csv_end', 2)[J

rufe <SNR>6_SetDefault auf[J('g:csv_end', 2)

Zeile 1:   if !exists(a:name)[J

Zeile 2:     let {a:name} = a:value[J

Zeile 3:   endif[J

<SNR>6_SetDefault lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim[J

Zeile 90: call s:SetDefault('g:csv_default_delim', ',')[J

rufe <SNR>6_SetDefault auf[J('g:csv_default_delim', ',')

Zeile 1:   if !exists(a:name)[J

Zeile 2:     let {a:name} = a:value[J

Zeile 3:   endif[J

<SNR>6_SetDefault lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim[J

Zeile 91: [J

Zeile 92: " Disable json concealing by default[J

Zeile 93: call s:SetDefault('g:vim_json_syntax_conceal', 0)[J

rufe <SNR>6_SetDefault auf[J('g:vim_json_syntax_conceal', 0)

Zeile 1:   if !exists(a:name)[J

Zeile 2:     let {a:name} = a:value[J

Zeile 3:   endif[J

<SNR>6_SetDefault lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim[J

Zeile 94: [J

Zeile 95: call s:SetDefault('g:filetype_euphoria', 'elixir')[J

rufe <SNR>6_SetDefault auf[J('g:filetype_euphoria', 'elixir')

Zeile 1:   if !exists(a:name)[J

Zeile 2:     let {a:name} = a:value[J

Zeile 3:   endif[J

<SNR>6_SetDefault lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim[J

Zeile 96: [J

Zeile 97: if !exists('g:python_highlight_all')[J

Zeile 98:   call s:SetDefault('g:python_highlight_builtins', 1)[J

rufe <SNR>6_SetDefault auf[J('g:python_highlight_builtins', 1)

Zeile 1:   if !exists(a:name)[J

Zeile 2:     let {a:name} = a:value[J

Zeile 3:   endif[J

<SNR>6_SetDefault lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim[J

Zeile 99:   call s:SetDefault('g:python_highlight_builtin_objs', 1)[J

rufe <SNR>6_SetDefault auf[J('g:python_highlight_builtin_objs', 1)

Zeile 1:   if !exists(a:name)[J

Zeile 2:     let {a:name} = a:value[J

Zeile 3:   endif[J

<SNR>6_SetDefault lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim[J

Zeile 100:   call s:SetDefault('g:python_highlight_builtin_types', 1)[J

rufe <SNR>6_SetDefault auf[J('g:python_highlight_builtin_types', 1)

Zeile 1:   if !exists(a:name)[J

Zeile 2:     let {a:name} = a:value[J

Zeile 3:   endif[J

<SNR>6_SetDefault lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim[J

Zeile 101:   call s:SetDefault('g:python_highlight_builtin_funcs', 1)[J

rufe <SNR>6_SetDefault auf[J('g:python_highlight_builtin_funcs', 1)

Zeile 1:   if !exists(a:name)[J

Zeile 2:     let {a:name} = a:value[J

Zeile 3:   endif[J

<SNR>6_SetDefault lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim[J

Zeile 102:   call s:SetDefault('g:python_highlight_builtin_funcs_kwarg', 1)[J

rufe <SNR>6_SetDefault auf[J('g:python_highlight_builtin_funcs_kwarg', 1)

Zeile 1:   if !exists(a:name)[J

Zeile 2:     let {a:name} = a:value[J

Zeile 3:   endif[J

<SNR>6_SetDefault lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim[J

Zeile 103:   call s:SetDefault('g:python_highlight_exceptions', 1)[J

rufe <SNR>6_SetDefault auf[J('g:python_highlight_exceptions', 1)

Zeile 1:   if !exists(a:name)[J

Zeile 2:     let {a:name} = a:value[J

Zeile 3:   endif[J

<SNR>6_SetDefault lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim[J

Zeile 104:   call s:SetDefault('g:python_highlight_string_formatting', 1)[J

rufe <SNR>6_SetDefault auf[J('g:python_highlight_string_formatting', 1)

Zeile 1:   if !exists(a:name)[J

Zeile 2:     let {a:name} = a:value[J

Zeile 3:   endif[J

<SNR>6_SetDefault lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim[J

Zeile 105:   call s:SetDefault('g:python_highlight_string_format', 1)[J

rufe <SNR>6_SetDefault auf[J('g:python_highlight_string_format', 1)

Zeile 1:   if !exists(a:name)[J

Zeile 2:     let {a:name} = a:value[J

Zeile 3:   endif[J

<SNR>6_SetDefault lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim[J

Zeile 106:   call s:SetDefault('g:python_highlight_string_templates', 1)[J

rufe <SNR>6_SetDefault auf[J('g:python_highlight_string_templates', 1)

Zeile 1:   if !exists(a:name)[J

Zeile 2:     let {a:name} = a:value[J

Zeile 3:   endif[J

<SNR>6_SetDefault lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim[J

Zeile 107:   call s:SetDefault('g:python_highlight_indent_errors', 1)[J

rufe <SNR>6_SetDefault auf[J('g:python_highlight_indent_errors', 1)

Zeile 1:   if !exists(a:name)[J

Zeile 2:     let {a:name} = a:value[J

Zeile 3:   endif[J

<SNR>6_SetDefault lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim[J

Zeile 108:   call s:SetDefault('g:python_highlight_space_errors', 1)[J

rufe <SNR>6_SetDefault auf[J('g:python_highlight_space_errors', 1)

Zeile 1:   if !exists(a:name)[J

Zeile 2:     let {a:name} = a:value[J

Zeile 3:   endif[J

<SNR>6_SetDefault lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim[J

Zeile 109:   call s:SetDefault('g:python_highlight_doctests', 1)[J

rufe <SNR>6_SetDefault auf[J('g:python_highlight_doctests', 1)

Zeile 1:   if !exists(a:name)[J

Zeile 2:     let {a:name} = a:value[J

Zeile 3:   endif[J

<SNR>6_SetDefault lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim[J

Zeile 110:   call s:SetDefault('g:python_highlight_func_calls', 1)[J

rufe <SNR>6_SetDefault auf[J('g:python_highlight_func_calls', 1)

Zeile 1:   if !exists(a:name)[J

Zeile 2:     let {a:name} = a:value[J

Zeile 3:   endif[J

<SNR>6_SetDefault lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim[J

Zeile 111:   call s:SetDefault('g:python_highlight_class_vars', 1)[J

rufe <SNR>6_SetDefault auf[J('g:python_highlight_class_vars', 1)

Zeile 1:   if !exists(a:name)[J

Zeile 2:     let {a:name} = a:value[J

Zeile 3:   endif[J

<SNR>6_SetDefault lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim[J

Zeile 112:   call s:SetDefault('g:python_highlight_operators', 1)[J

rufe <SNR>6_SetDefault auf[J('g:python_highlight_operators', 1)

Zeile 1:   if !exists(a:name)[J

Zeile 2:     let {a:name} = a:value[J

Zeile 3:   endif[J

<SNR>6_SetDefault lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim[J

Zeile 113:   call s:SetDefault('g:python_highlight_file_headers_as_comments', 1)[J

rufe <SNR>6_SetDefault auf[J('g:python_highlight_file_headers_as_comments', 1)

Zeile 1:   if !exists(a:name)[J

Zeile 2:     let {a:name} = a:value[J

Zeile 3:   endif[J

<SNR>6_SetDefault lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim[J

Zeile 114:   call s:SetDefault('g:python_slow_sync', 1)[J

rufe <SNR>6_SetDefault auf[J('g:python_slow_sync', 1)

Zeile 1:   if !exists(a:name)[J

Zeile 2:     let {a:name} = a:value[J

Zeile 3:   endif[J

<SNR>6_SetDefault lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim[J

Zeile 115: endif[J

Zeile 116: [J

Zeile 117: " Some variables are needed for haxe loading[J

Zeile 118: [J

Zeile 119: " We need it because scripts.vim in vim uses "set ft=" which cannot be[J

Zeile 120: " overridden with setf (and we can't use set ft= so our scripts.vim work)[J

Zeile 121: func! s:Setf(ft)[J

Zeile 126: [J

Zeile 127: " Function used for patterns that end in a star: don't set the filetype if the[J

Zeile 128: " file name matches ft_ignore_pat.[J

Zeile 129: " When using this, the entry should probably be further down below with the[J

Zeile 130: " other StarSetf() calls.[J

Zeile 131: func! s:StarSetf(ft)[J

Zeile 136: [J

Zeile 137: augroup polyglot-observer | augroup END[J

Zeile 137:  augroup END[J

Zeile 138: [J

Zeile 139: if exists('s:cpo_save')[J

Zeile 140:   " Restore 'cpoptions'[J

Zeile 141:   let &cpo = s:cpo_save[J

Zeile 142:   unlet s:cpo_save[J

Zeile 143: endif[J

Zeile 144: [J

Zeile 145: " Load user-defined filetype.vim and oter plugins ftdetect first[J

Zeile 146: " This is to use polyglot-defined ftdetect always as fallback to user settings[J

Zeile 147: augroup filetypedetect[J

Zeile 148:   runtime! filetype.vim[J

Suche nach "filetype.vim" in "/c/Users/108012516/.vim,/c/Users/108012516/.vim/bundle/Vundle.vim,/c/Users/108012516/.vim/bundle/vim-fugitive,/c/Users/108012516/.vim/bundle/vim-gitgutter,/c/Users/108012516/.vim/bundle/vim-cpp-enhanced-highlight,/c/Users/108012516/.vim/bundle/vim-bufkill,/c/Users/108012516/.vim/bundle/ack.vim,/c/Users/108012516/.vim/bundle/fzf.vim,/c/Users/108012516/.vim/bundle/fzf,/c/Users/108012516/.vim/bundle/vim-rooter,/c/Users/108012516/.vim/bundle/vim-polyglot,/c/Users/108012516/.vim/bundle/vim-commentary,/c/Users/108012516/.vim/bundle/vim-airline,/c/Users/108012516/.vim/bundle/vim-airline-themes,/c/Users/108012516/.vim/bundle/vim-rainbow,/c/Users/108012516/.vim/bundle/vim-devicons,/c/Users/108012516/.vim/bundle/vim-webdevicons,/c/Users/108012516/.vim/bundle/awesome-vim-colorschemes,/c/Users/108012516/.vim/bundle/vim-misc,/c/Users/108012516/.vim/bundle/vim-colorscheme-switcher,/usr/share/vim/vimfiles,/usr/share/vim/vim82,/usr/share/vim/vimfiles/after,/c/Users/108012516/.vim/after,/c/Users/[J
Suche nach "/c/Users/108012516/.vim/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/Vundle.vim/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-fugitive/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-gitgutter/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-cpp-enhanced-highlight/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-bufkill/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/ack.vim/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/fzf.vim/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/fzf/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-rooter/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-polyglot/filetype.vim"[J
chdir(/c/Users/108012516/.vim/bundle/vim-polyglot)[J
fchdir() to previous dir[J
Zeile 148: lese "/c/Users/108012516/.vim/bundle/vim-polyglot/filetype.vim"[J
Zeile 1: call polyglot#init#init()[J

rufe polyglot#init#init auf[J()

Zeile 1:   " A no-op as sourcing this file is enough[J

polyglot#init#init lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/filetype.vim[J

Lesen von /c/Users/108012516/.vim/bundle/vim-polyglot/filetype.vim beendet[J
weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-commentary/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-airline/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-airline-themes/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-rainbow/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-devicons/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-webdevicons/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/awesome-vim-colorschemes/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-misc/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-colorscheme-switcher/filetype.vim"[J
Suche nach "/usr/share/vim/vimfiles/filetype.vim"[J
Suche nach "/usr/share/vim/vim82/filetype.vim"[J
chdir(/usr/share/vim/vim82)[J
fchdir() to previous dir[J
Zeile 148: lese "/usr/share/vim/vim82/filetype.vim"[J
Zeile 1: " Vim support file to detect file types[J

Zeile 2: "[J

Zeile 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

Zeile 4: " Last Change:^I2021 Apr 17[J

Zeile 5: [J

Zeile 6: " Listen very carefully, I will say this only once[J

Zeile 7: if exists("did_load_filetypes")[J

Zeile 8:   finish[J

Zeile 9: endif[J

Zeile 10: let did_load_filetypes = 1[J

Zeile 11: [J

Zeile 12: " Line continuation is used here, remove 'C' from 'cpoptions'[J

Zeile 13: let s:cpo_save = &cpo[J

Zeile 14: set cpo&vim[J

Zeile 15: [J

Zeile 16: augroup filetypedetect[J

Zeile 17: [J

Zeile 18: " Ignored extensions[J

Zeile 19: if exists("*fnameescape")[J

Zeile 20: au BufNewFile,BufRead ?\+.orig,?\+.bak,?\+.old,?\+.new,?\+.dpkg-dist,?\+.dpkg-old,?\+.dpkg-new,?\+.dpkg-bak,?\+.pacsave,?\+.pacnew,?\+.pacsave,?\+.pacnew exe "doau filetypedetect BufRead " . fnameescape(expand("<afile>:r"))[J

Zeile 22: au BufNewFile,BufRead *~ let s:name = expand("<afile>") | let s:short = substitute(s:name, '\~$', '', '') | if s:name != s:short && s:short != "" |   exe "doau filetypedetect BufRead " . fnameescape(s:short) | endif | unlet! s:name s:short[J

Zeile 29: au BufNewFile,BufRead ?\+.in if expand("<afile>:t") != "configure.in" |   exe "doau filetypedetect BufRead " . fnameescape(expand("<afile>:r")) | endif[J

Zeile 33: elseif &verbose > 0[J

Zeile 34:   echomsg "Warning: some filetypes will not be recognized because this version of Vim does not have fnameescape()"[J

Zeile 35: endif[J

Zeile 36: [J

Zeile 37: " Pattern used to match file names which should not be inspected.[J

Zeile 38: " Currently finds compressed files.[J

Zeile 39: if !exists("g:ft_ignore_pat")[J

Zeile 40:   let g:ft_ignore_pat = '\.\(Z\|gz\|bz2\|zip\|tgz\)$'[J

Zeile 41: endif[J

Zeile 42: [J

Zeile 43: " Function used for patterns that end in a star: don't set the filetype if the[J

Zeile 44: " file name matches ft_ignore_pat.[J

Zeile 45: " When using this, the entry should probably be further down below with the[J

Zeile 46: " other StarSetf() calls.[J

Zeile 47: func! s:StarSetf(ft)[J

Zeile 52: [J

Zeile 53: " Vim help file[J

Zeile 54: au BufNewFile,BufRead $VIMRUNTIME/doc/*.txt^Isetf help[J

Zeile 55: [J

Zeile 56: " Abaqus or Trasys[J

Zeile 57: au BufNewFile,BufRead *.inp^I^I^Icall dist#ft#Check_inp()[J

Zeile 58: [J

Zeile 59: " 8th (Firth-derivative)[J

Zeile 60: au BufNewFile,BufRead *.8th^I^I^Isetf 8th[J

Zeile 61: [J

Zeile 62: " A-A-P recipe[J

Zeile 63: au BufNewFile,BufRead *.aap^I^I^Isetf aap[J

Zeile 64: [J

Zeile 65: " A2ps printing utility[J

Zeile 66: au BufNewFile,BufRead */etc/a2ps.cfg,*/etc/a2ps/*.cfg,a2psrc,.a2psrc setf a2ps[J

Zeile 67: [J

Zeile 68: " ABAB/4[J

Zeile 69: au BufNewFile,BufRead *.abap^I^I^Isetf abap[J

Zeile 70: [J

Zeile 71: " ABC music notation[J

Zeile 72: au BufNewFile,BufRead *.abc^I^I^Isetf abc[J

Zeile 73: [J

Zeile 74: " ABEL[J

Zeile 75: au BufNewFile,BufRead *.abl^I^I^Isetf abel[J

Zeile 76: [J

Zeile 77: " AceDB[J

Zeile 78: au BufNewFile,BufRead *.wrm^I^I^Isetf acedb[J

Zeile 79: [J

Zeile 80: " Ada (83, 9X, 95)[J

Zeile 81: au BufNewFile,BufRead *.adb,*.ads,*.ada^I^Isetf ada[J

Zeile 82: if has("vms")[J

Zeile 83:   au BufNewFile,BufRead *.gpr,*.ada_m,*.adc^Isetf ada[J

Zeile 84: else[J

Zeile 85:   au BufNewFile,BufRead *.gpr^I^I^Isetf ada[J

Zeile 86: endif[J

Zeile 87: [J

Zeile 88: " AHDL[J

Zeile 89: au BufNewFile,BufRead *.tdf^I^I^Isetf ahdl[J

Zeile 90: [J

Zeile 91: " AIDL[J

Zeile 92: au BufNewFile,BufRead *.aidl^I^I^Isetf aidl[J

Zeile 93: [J

Zeile 94: " AMPL[J

Zeile 95: au BufNewFile,BufRead *.run^I^I^Isetf ampl[J

Zeile 96: [J

Zeile 97: " Ant[J

Zeile 98: au BufNewFile,BufRead build.xml^I^I^Isetf ant[J

Zeile 99: [J

Zeile 100: " Arduino[J

Zeile 101: au BufNewFile,BufRead *.ino,*.pde^I^Isetf arduino[J

Zeile 102: [J

Zeile 103: " Apache config file[J

Zeile 104: au BufNewFile,BufRead .htaccess,*/etc/httpd/*.conf^I^Isetf apache[J

Zeile 105: au BufNewFile,BufRead */etc/apache2/sites-*/*.com^I^Isetf apache[J

Zeile 106: [J

Zeile 107: " XA65 MOS6510 cross assembler[J

Zeile 108: au BufNewFile,BufRead *.a65^I^I^Isetf a65[J

Zeile 109: [J

Zeile 110: " Applescript[J

Zeile 111: au BufNewFile,BufRead *.scpt^I^I^Isetf applescript[J

Zeile 112: [J

Zeile 113: " Applix ELF[J

Zeile 114: au BufNewFile,BufRead *.am if expand("<afile>") !~? 'Makefile.am\>' | setf elf | endif[J

Zeile 116: [J

Zeile 117: " ALSA configuration[J

Zeile 118: au BufNewFile,BufRead .asoundrc,*/usr/share/alsa/alsa.conf,*/etc/asound.conf setf alsaconf[J

Zeile 119: [J

Zeile 120: " Arc Macro Language[J

Zeile 121: au BufNewFile,BufRead *.aml^I^I^Isetf aml[J

Zeile 122: [J

Zeile 123: " APT config file[J

Zeile 124: au BufNewFile,BufRead apt.conf^I^I       setf aptconf[J

Zeile 125: au BufNewFile,BufRead */.aptitude/config       setf aptconf[J

Zeile 126: au BufNewFile,BufRead */etc/apt/apt.conf.d/{[-_[:alnum:]]\+,[-_.[:alnum:]]\+.conf} setf aptconf[J

Zeile 127: [J

Zeile 128: " Arch Inventory file[J

Zeile 129: au BufNewFile,BufRead .arch-inventory,=tagging-method^Isetf arch[J

Zeile 130: [J

Zeile 131: " ART*Enterprise (formerly ART-IM)[J

Zeile 132: au BufNewFile,BufRead *.art^I^I^Isetf art[J

Zeile 133: [J

Zeile 134: " AsciiDoc[J

Zeile 135: au BufNewFile,BufRead *.asciidoc,*.adoc^I^Isetf asciidoc[J

Zeile 136: [J

Zeile 137: " ASN.1[J

Zeile 138: au BufNewFile,BufRead *.asn,*.asn1^I^Isetf asn[J

Zeile 139: [J

Zeile 140: " Active Server Pages (with Visual Basic Script)[J

Zeile 141: au BufNewFile,BufRead *.asa if exists("g:filetype_asa") |   exe "setf " . g:filetype_asa | else |   setf aspvbs | endif[J

Zeile 147: [J

Zeile 148: " Active Server Pages (with Perl or Visual Basic Script)[J

Zeile 149: au BufNewFile,BufRead *.asp if exists("g:filetype_asp") |   exe "setf " . g:filetype_asp | elseif getline(1) . getline(2) . getline(3) =~? "perlscript" |   setf aspperl | else |   setf aspvbs | endif[J

Zeile 157: [J

Zeile 158: " Grub (must be before catch *.lst)[J

Zeile 159: au BufNewFile,BufRead */boot/grub/menu.lst,*/boot/grub/grub.conf,*/etc/grub.conf setf grub[J

Zeile 160: [J

Zeile 161: " Assembly (all kinds)[J

Zeile 162: " *.lst is not pure assembly, it has two extra columns (address, byte codes)[J

Zeile 163: au BufNewFile,BufRead *.asm,*.[sS],*.[aA],*.mac,*.lst^Icall dist#ft#FTasm()[J

Zeile 164: [J

Zeile 165: " Macro (VAX)[J

Zeile 166: au BufNewFile,BufRead *.mar^I^I^Isetf vmasm[J

Zeile 167: [J

Zeile 168: " Atlas[J

Zeile 169: au BufNewFile,BufRead *.atl,*.as^I^Isetf atlas[J

Zeile 170: [J

Zeile 171: " Atom is based on XML[J

Zeile 172: au BufNewFile,BufRead *.atom^I^I^Isetf xml[J

Zeile 173: [J

Zeile 174: " Autoit v3[J

Zeile 175: au BufNewFile,BufRead *.au3^I^I^Isetf autoit[J

Zeile 176: [J

Zeile 177: " Autohotkey[J

Zeile 178: au BufNewFile,BufRead *.ahk^I^I^Isetf autohotkey[J

Zeile 179: [J

Zeile 180: " Automake[J

Zeile 181: au BufNewFile,BufRead [mM]akefile.am,GNUmakefile.am^Isetf automake[J

Zeile 182: [J

Zeile 183: " Autotest .at files are actually m4[J

Zeile 184: au BufNewFile,BufRead *.at^I^I^Isetf m4[J

Zeile 185: [J

Zeile 186: " Avenue[J

Zeile 187: au BufNewFile,BufRead *.ave^I^I^Isetf ave[J

Zeile 188: [J

Zeile 189: " Awk[J

Zeile 190: au BufNewFile,BufRead *.awk,*.gawk^I^Isetf awk[J

Zeile 191: [J

Zeile 192: " B[J

Zeile 193: au BufNewFile,BufRead *.mch,*.ref,*.imp^I^Isetf b[J

Zeile 194: [J

Zeile 195: " BASIC or Visual Basic[J

Zeile 196: au BufNewFile,BufRead *.bas^I^I^Icall dist#ft#FTVB("basic")[J

Zeile 197: [J

Zeile 198: " Visual Basic Script (close to Visual Basic) or Visual Basic .NET[J

Zeile 199: au BufNewFile,BufRead *.vb,*.vbs,*.dsm,*.ctl^Isetf vb[J

Zeile 200: [J

Zeile 201: " IBasic file (similar to QBasic)[J

Zeile 202: au BufNewFile,BufRead *.iba,*.ibi^I^Isetf ibasic[J

Zeile 203: [J

Zeile 204: " FreeBasic file (similar to QBasic)[J

Zeile 205: au BufNewFile,BufRead *.fb,*.bi^I^I^Isetf freebasic[J

Zeile 206: [J

Zeile 207: " Batch file for MSDOS.[J

Zeile 208: au BufNewFile,BufRead *.bat,*.sys^I^Isetf dosbatch[J

Zeile 209: " *.cmd is close to a Batch file, but on OS/2 Rexx files also use *.cmd.[J

Zeile 210: au BufNewFile,BufRead *.cmd if getline(1) =~ '^/\*' | setf rexx | else | setf dosbatch | endif[J

Zeile 212: [J

Zeile 213: " Batch file for 4DOS[J

Zeile 214: au BufNewFile,BufRead *.btm^I^I^Icall dist#ft#FTbtm()[J

Zeile 215: [J

Zeile 216: " BC calculator[J

Zeile 217: au BufNewFile,BufRead *.bc^I^I^Isetf bc[J

Zeile 218: [J

Zeile 219: " BDF font[J

Zeile 220: au BufNewFile,BufRead *.bdf^I^I^Isetf bdf[J

Zeile 221: [J

Zeile 222: " Beancount[J

Zeile 223: au BufNewFile,BufRead *.beancount^I^Isetf beancount[J

Zeile 224: [J

Zeile 225: " BibTeX bibliography database file[J

Zeile 226: au BufNewFile,BufRead *.bib^I^I^Isetf bib[J

Zeile 227: [J

Zeile 228: " BibTeX Bibliography Style[J

Zeile 229: au BufNewFile,BufRead *.bst^I^I^Isetf bst[J

Zeile 230: [J

Zeile 231: " BIND configuration[J

Zeile 232: " sudoedit uses namedXXXX.conf[J

Zeile 233: au BufNewFile,BufRead named*.conf,rndc*.conf,rndc*.key^Isetf named[J

Zeile 234: [J

Zeile 235: " BIND zone[J

Zeile 236: au BufNewFile,BufRead named.root^I^Isetf bindzone[J

Zeile 237: au BufNewFile,BufRead *.db^I^I^Icall dist#ft#BindzoneCheck('')[J

Zeile 238: [J

Zeile 239: " Blank[J

Zeile 240: au BufNewFile,BufRead *.bl^I^I^Isetf blank[J

Zeile 241: [J

Zeile 242: " Blkid cache file[J

Zeile 243: au BufNewFile,BufRead */etc/blkid.tab,*/etc/blkid.tab.old   setf xml[J

Zeile 244: [J

Zeile 245: " BSDL[J

Zeile 246: au BufNewFile,BufRead *bsd,*.bsdl^I^Isetf bsdl[J

Zeile 247: [J

Zeile 248: " Bazel (http://bazel.io)[J

Zeile 249: autocmd BufRead,BufNewFile *.bzl,*.bazel,WORKSPACE^Isetf bzl[J

Zeile 250: if has("fname_case")[J

Zeile 251:   " There is another check for BUILD further below.[J

Zeile 252:   autocmd BufRead,BufNewFile *.BUILD,BUILD^I^Isetf bzl[J

Zeile 253: endif[J

Zeile 254: [J

Zeile 255: " C or lpc[J

Zeile 256: au BufNewFile,BufRead *.c^I^I^Icall dist#ft#FTlpc()[J

Zeile 257: au BufNewFile,BufRead *.lpc,*.ulpc^I^Isetf lpc[J

Zeile 258: [J

Zeile 259: " Calendar[J

Zeile 260: au BufNewFile,BufRead calendar^I^I^Isetf calendar[J

Zeile 261: [J

Zeile 262: " C#[J

Zeile 263: au BufNewFile,BufRead *.cs^I^I^Isetf cs[J

Zeile 264: [J

Zeile 265: " CSDL[J

Zeile 266: au BufNewFile,BufRead *.csdl^I^I^Isetf csdl[J

Zeile 267: [J

Zeile 268: " Cabal[J

Zeile 269: au BufNewFile,BufRead *.cabal^I^I^Isetf cabal[J

Zeile 270: [J

Zeile 271: " Cdrdao TOC[J

Zeile 272: au BufNewFile,BufRead *.toc^I^I^Isetf cdrtoc[J

Zeile 273: [J

Zeile 274: " Cdrdao config[J

Zeile 275: au BufNewFile,BufRead */etc/cdrdao.conf,*/etc/defaults/cdrdao,*/etc/default/cdrdao,.cdrdao^Isetf cdrdaoconf[J

Zeile 276: [J

Zeile 277: " Cfengine[J

Zeile 278: au BufNewFile,BufRead cfengine.conf^I^Isetf cfengine[J

Zeile 279: [J

Zeile 280: " ChaiScript[J

Zeile 281: au BufRead,BufNewFile *.chai^I^I^Isetf chaiscript[J

Zeile 282: [J

Zeile 283: " Comshare Dimension Definition Language[J

Zeile 284: au BufNewFile,BufRead *.cdl^I^I^Isetf cdl[J

Zeile 285: [J

Zeile 286: " Conary Recipe[J

Zeile 287: au BufNewFile,BufRead *.recipe^I^I^Isetf conaryrecipe[J

Zeile 288: [J

Zeile 289: " Controllable Regex Mutilator[J

Zeile 290: au BufNewFile,BufRead *.crm^I^I^Isetf crm[J

Zeile 291: [J

Zeile 292: " Cyn++[J

Zeile 293: au BufNewFile,BufRead *.cyn^I^I^Isetf cynpp[J

Zeile 294: [J

Zeile 295: " Cynlib[J

Zeile 296: " .cc and .cpp files can be C++ or Cynlib.[J

Zeile 297: au BufNewFile,BufRead *.cc if exists("cynlib_syntax_for_cc")|setf cynlib|else|setf cpp|endif[J

Zeile 299: au BufNewFile,BufRead *.cpp if exists("cynlib_syntax_for_cpp")|setf cynlib|else|setf cpp|endif[J

Zeile 301: [J

Zeile 302: " C++[J

Zeile 303: au BufNewFile,BufRead *.cxx,*.c++,*.hh,*.hxx,*.hpp,*.ipp,*.moc,*.tcc,*.inl setf cpp[J

Zeile 304: if has("fname_case")[J

Zeile 305:   au BufNewFile,BufRead *.C,*.H setf cpp[J

Zeile 306: endif[J

Zeile 307: [J

Zeile 308: " .h files can be C, Ch C++, ObjC or ObjC++.[J

Zeile 309: " Set c_syntax_for_h if you want C, ch_syntax_for_h if you want Ch. ObjC is[J

Zeile 310: " detected automatically.[J

Zeile 311: au BufNewFile,BufRead *.h^I^I^Icall dist#ft#FTheader()[J

Zeile 312: [J

Zeile 313: " Ch (CHscript)[J

Zeile 314: au BufNewFile,BufRead *.chf^I^I^Isetf ch[J

Zeile 315: [J

Zeile 316: " TLH files are C++ headers generated by Visual C++'s #import from typelibs[J

Zeile 317: au BufNewFile,BufRead *.tlh^I^I^Isetf cpp[J

Zeile 318: [J

Zeile 319: " Cascading Style Sheets[J

Zeile 320: au BufNewFile,BufRead *.css^I^I^Isetf css[J

Zeile 321: [J

Zeile 322: " Century Term Command Scripts (*.cmd too)[J

Zeile 323: au BufNewFile,BufRead *.con^I^I^Isetf cterm[J

Zeile 324: [J

Zeile 325: " Changelog[J

Zeile 326: au BufNewFile,BufRead changelog.Debian,changelog.dch,NEWS.Debian,NEWS.dch,*/debian/changelog^Isetf debchangelog[J

Zeile 328: [J

Zeile 329: au BufNewFile,BufRead [cC]hange[lL]og  if getline(1) =~ '; urgency='|   setf debchangelog| else|   setf changelog| endif[J

Zeile 335: [J

Zeile 336: au BufNewFile,BufRead NEWS  if getline(1) =~ '; urgency='|   setf debchangelog| endif[J

Zeile 340: [J

Zeile 341: " CHILL[J

Zeile 342: au BufNewFile,BufRead *..ch^I^I^Isetf chill[J

Zeile 343: [J

Zeile 344: " Changes for WEB and CWEB or CHILL[J

Zeile 345: au BufNewFile,BufRead *.ch^I^I^Icall dist#ft#FTchange()[J

Zeile 346: [J

Zeile 347: " ChordPro[J

Zeile 348: au BufNewFile,BufRead *.chopro,*.crd,*.cho,*.crdpro,*.chordpro^Isetf chordpro[J

Zeile 349: [J

Zeile 350: " Clean[J

Zeile 351: au BufNewFile,BufRead *.dcl,*.icl^I^Isetf clean[J

Zeile 352: [J

Zeile 353: " Clever[J

Zeile 354: au BufNewFile,BufRead *.eni^I^I^Isetf cl[J

Zeile 355: [J

Zeile 356: " Clever or dtd[J

Zeile 357: au BufNewFile,BufRead *.ent^I^I^Icall dist#ft#FTent()[J

Zeile 358: [J

Zeile 359: " Clipper (or FoxPro; could also be eviews)[J

Zeile 360: au BufNewFile,BufRead *.prg if exists("g:filetype_prg") |   exe "setf " . g:filetype_prg | else |   setf clipper | endif[J

Zeile 366: [J

Zeile 367: " Clojure[J

Zeile 368: au BufNewFile,BufRead *.clj,*.cljs,*.cljx,*.cljc^I^Isetf clojure[J

Zeile 369: [J

Zeile 370: " Cmake[J

Zeile 371: au BufNewFile,BufRead CMakeLists.txt,*.cmake,*.cmake.in^I^Isetf cmake[J

Zeile 372: [J

Zeile 373: " Cmusrc[J

Zeile 374: au BufNewFile,BufRead */.cmus/{autosave,rc,command-history,*.theme} setf cmusrc[J

Zeile 375: au BufNewFile,BufRead */cmus/{rc,*.theme}^I^I^Isetf cmusrc[J

Zeile 376: [J

Zeile 377: " Cobol[J

Zeile 378: au BufNewFile,BufRead *.cbl,*.cob,*.lib^Isetf cobol[J

Zeile 379: "   cobol or zope form controller python script? (heuristic)[J

Zeile 380: au BufNewFile,BufRead *.cpy if getline(1) =~ '^##' |   setf python | else |   setf cobol | endif[J

Zeile 386: [J

Zeile 387: " Coco/R[J

Zeile 388: au BufNewFile,BufRead *.atg^I^I^Isetf coco[J

Zeile 389: [J

Zeile 390: " Cold Fusion[J

Zeile 391: au BufNewFile,BufRead *.cfm,*.cfi,*.cfc^I^Isetf cf[J

Zeile 392: [J

Zeile 393: " Configure scripts[J

Zeile 394: au BufNewFile,BufRead configure.in,configure.ac setf config[J

Zeile 395: [J

Zeile 396: " CUDA  Cumpute Unified Device Architecture[J

Zeile 397: au BufNewFile,BufRead *.cu,*.cuh^I^Isetf cuda[J

Zeile 398: [J

Zeile 399: " Dockerfile; Podman uses the same syntax with name Containerfile[J

Zeile 400: au BufNewFile,BufRead Containerfile,Dockerfile,*.Dockerfile^Isetf dockerfile[J

Zeile 401: [J

Zeile 402: " WildPackets EtherPeek Decoder[J

Zeile 403: au BufNewFile,BufRead *.dcd^I^I^Isetf dcd[J

Zeile 404: [J

Zeile 405: " Enlightenment configuration files[J

Zeile 406: au BufNewFile,BufRead *enlightenment/*.cfg^Isetf c[J

Zeile 407: [J

Zeile 408: " Eterm[J

Zeile 409: au BufNewFile,BufRead *Eterm/*.cfg^I^Isetf eterm[J

Zeile 410: [J

Zeile 411: " Euphoria 3 or 4[J

Zeile 412: au BufNewFile,BufRead *.eu,*.ew,*.ex,*.exu,*.exw  call dist#ft#EuphoriaCheck()[J

Zeile 413: if has("fname_case")[J

Zeile 414:    au BufNewFile,BufRead *.EU,*.EW,*.EX,*.EXU,*.EXW  call dist#ft#EuphoriaCheck()[J

Zeile 415: endif[J

Zeile 416: [J

Zeile 417: " Lynx config files[J

Zeile 418: au BufNewFile,BufRead lynx.cfg^I^I^Isetf lynx[J

Zeile 419: [J

Zeile 420: " Modula-3 configuration language (must be before *.cfg and *makefile)[J

Zeile 421: au BufNewFile,BufRead *.quake,cm3.cfg^I^Isetf m3quake[J

Zeile 422: au BufNewFile,BufRead m3makefile,m3overrides^Isetf m3build[J

Zeile 423: [J

Zeile 424: " Quake[J

Zeile 425: au BufNewFile,BufRead *baseq[2-3]/*.cfg,*id1/*.cfg^Isetf quake[J

Zeile 426: au BufNewFile,BufRead *quake[1-3]/*.cfg^I^I^Isetf quake[J

Zeile 427: [J

Zeile 428: " Quake C[J

Zeile 429: au BufNewFile,BufRead *.qc^I^I^Isetf c[J

Zeile 430: [J

Zeile 431: " Configure files[J

Zeile 432: au BufNewFile,BufRead *.cfg^I^I^Isetf cfg[J

Zeile 433: [J

Zeile 434: " Cucumber[J

Zeile 435: au BufNewFile,BufRead *.feature^I^I^Isetf cucumber[J

Zeile 436: [J

Zeile 437: " Communicating Sequential Processes[J

Zeile 438: au BufNewFile,BufRead *.csp,*.fdr^I^Isetf csp[J

Zeile 439: [J

Zeile 440: " CUPL logic description and simulation[J

Zeile 441: au BufNewFile,BufRead *.pld^I^I^Isetf cupl[J

Zeile 442: au BufNewFile,BufRead *.si^I^I^Isetf cuplsim[J

Zeile 443: [J

Zeile 444: " Dart[J

Zeile 445: au BufRead,BufNewfile *.dart,*.drt^I^Isetf dart[J

Zeile 446: [J

Zeile 447: " Debian Control[J

Zeile 448: au BufNewFile,BufRead */debian/control^I^Isetf debcontrol[J

Zeile 449: au BufNewFile,BufRead control  if getline(1) =~ '^Source:'|   setf debcontrol| endif[J

Zeile 453: [J

Zeile 454: " Debian Copyright[J

Zeile 455: au BufNewFile,BufRead */debian/copyright^Isetf debcopyright[J

Zeile 456: au BufNewFile,BufRead copyright  if getline(1) =~ '^Format:'|   setf debcopyright| endif[J

Zeile 460: [J

Zeile 461: " Debian Sources.list[J

Zeile 462: au BufNewFile,BufRead */etc/apt/sources.list^I^Isetf debsources[J

Zeile 463: au BufNewFile,BufRead */etc/apt/sources.list.d/*.list^Isetf debsources[J

Zeile 464: [J

Zeile 465: " Deny hosts[J

Zeile 466: au BufNewFile,BufRead denyhosts.conf^I^Isetf denyhosts[J

Zeile 467: [J

Zeile 468: " dnsmasq(8) configuration files[J

Zeile 469: au BufNewFile,BufRead */etc/dnsmasq.conf^Isetf dnsmasq[J

Zeile 470: [J

Zeile 471: " ROCKLinux package description[J

Zeile 472: au BufNewFile,BufRead *.desc^I^I^Isetf desc[J

Zeile 473: [J

Zeile 474: " the D language or dtrace[J

Zeile 475: au BufNewFile,BufRead *.d^I^I^Icall dist#ft#DtraceCheck()[J

Zeile 476: [J

Zeile 477: " Desktop files[J

Zeile 478: au BufNewFile,BufRead *.desktop,*.directory^Isetf desktop[J

Zeile 479: [J

Zeile 480: " Dict config[J

Zeile 481: au BufNewFile,BufRead dict.conf,.dictrc^I^Isetf dictconf[J

Zeile 482: [J

Zeile 483: " Dictd config[J

Zeile 484: au BufNewFile,BufRead dictd.conf^I^Isetf dictdconf[J

Zeile 485: [J

Zeile 486: " Diff files[J

Zeile 487: au BufNewFile,BufRead *.diff,*.rej^I^Isetf diff[J

Zeile 488: au BufNewFile,BufRead *.patch if getline(1) =~ '^From [0-9a-f]\{40\} Mon Sep 17 00:00:00 2001$' |   setf gitsendemail | else |   setf diff | endif[J

Zeile 494: [J

Zeile 495: " Dircolors[J

Zeile 496: au BufNewFile,BufRead .dir_colors,.dircolors,*/etc/DIR_COLORS^Isetf dircolors[J

Zeile 497: [J

Zeile 498: " Diva (with Skill) or InstallShield[J

Zeile 499: au BufNewFile,BufRead *.rul if getline(1).getline(2).getline(3).getline(4).getline(5).getline(6) =~? 'InstallShield' |   setf ishd | else |   setf diva | endif[J

Zeile 505: [J

Zeile 506: " DCL (Digital Command Language - vms) or DNS zone file[J

Zeile 507: au BufNewFile,BufRead *.com^I^I^Icall dist#ft#BindzoneCheck('dcl')[J

Zeile 508: [J

Zeile 509: " DOT[J

Zeile 510: au BufNewFile,BufRead *.dot,*.gv^I^Isetf dot[J

Zeile 511: [J

Zeile 512: " Dune[J

Zeile 513: au BufNewFile,BufRead jbuild,dune,dune-project,dune-workspace setf dune[J

Zeile 514: [J

Zeile 515: " Dylan - lid files[J

Zeile 516: au BufNewFile,BufRead *.lid^I^I^Isetf dylanlid[J

Zeile 517: [J

Zeile 518: " Dylan - intr files (melange)[J

Zeile 519: au BufNewFile,BufRead *.intr^I^I^Isetf dylanintr[J

Zeile 520: [J

Zeile 521: " Dylan[J

Zeile 522: au BufNewFile,BufRead *.dylan^I^I^Isetf dylan[J

Zeile 523: [J

Zeile 524: " Microsoft Module Definition[J

Zeile 525: au BufNewFile,BufRead *.def^I^I^Isetf def[J

Zeile 526: [J

Zeile 527: " Dracula[J

Zeile 528: au BufNewFile,BufRead *.drac,*.drc,*lvs,*lpe^Isetf dracula[J

Zeile 529: [J

Zeile 530: " Datascript[J

Zeile 531: au BufNewFile,BufRead *.ds^I^I^Isetf datascript[J

Zeile 532: [J

Zeile 533: " dsl[J

Zeile 534: au BufNewFile,BufRead *.dsl^I^I^Isetf dsl[J

Zeile 535: [J

Zeile 536: " DTD (Document Type Definition for XML)[J

Zeile 537: au BufNewFile,BufRead *.dtd^I^I^Isetf dtd[J

Zeile 538: [J

Zeile 539: " DTS/DSTI (device tree files)[J

Zeile 540: au BufNewFile,BufRead *.dts,*.dtsi^I^Isetf dts[J

Zeile 541: [J

Zeile 542: " EDIF (*.edf,*.edif,*.edn,*.edo) or edn[J

Zeile 543: au BufNewFile,BufRead *.ed\(f\|if\|o\)^I^Isetf edif[J

Zeile 544: au BufNewFile,BufRead *.edn if getline(1) =~ '^\s*(\s*edif\>' |   setf edif | else |   setf clojure | endif[J

Zeile 550: [J

Zeile 551: " EditorConfig (close enough to dosini)[J

Zeile 552: au BufNewFile,BufRead .editorconfig^I^Isetf dosini[J

Zeile 553: [J

Zeile 554: " Embedix Component Description[J

Zeile 555: au BufNewFile,BufRead *.ecd^I^I^Isetf ecd[J

Zeile 556: [J

Zeile 557: " Eiffel or Specman or Euphoria[J

Zeile 558: au BufNewFile,BufRead *.e,*.E^I^I^Icall dist#ft#FTe()[J

Zeile 559: [J

Zeile 560: " Elinks configuration[J

Zeile 561: au BufNewFile,BufRead elinks.conf^I^Isetf elinks[J

Zeile 562: [J

Zeile 563: " ERicsson LANGuage; Yaws is erlang too[J

Zeile 564: au BufNewFile,BufRead *.erl,*.hrl,*.yaws^Isetf erlang[J

Zeile 565: [J

Zeile 566: " Elm[J

Zeile 567: au BufNewFile,BufRead *.elm^I^I^Isetf elm[J

Zeile 568: [J

Zeile 569: " Elm Filter Rules file[J

Zeile 570: au BufNewFile,BufRead filter-rules^I^Isetf elmfilt[J

Zeile 571: [J

Zeile 572: " ESMTP rc file[J

Zeile 573: au BufNewFile,BufRead *esmtprc^I^I^Isetf esmtprc[J

Zeile 574: [J

Zeile 575: " ESQL-C[J

Zeile 576: au BufNewFile,BufRead *.ec,*.EC^I^I^Isetf esqlc[J

Zeile 577: [J

Zeile 578: " Esterel[J

Zeile 579: au BufNewFile,BufRead *.strl^I^I^Isetf esterel[J

Zeile 580: [J

Zeile 581: " Essbase script[J

Zeile 582: au BufNewFile,BufRead *.csc^I^I^Isetf csc[J

Zeile 583: [J

Zeile 584: " Exim[J

Zeile 585: au BufNewFile,BufRead exim.conf^I^I^Isetf exim[J

Zeile 586: [J

Zeile 587: " Expect[J

Zeile 588: au BufNewFile,BufRead *.exp^I^I^Isetf expect[J

Zeile 589: [J

Zeile 590: " Exports[J

Zeile 591: au BufNewFile,BufRead exports^I^I^Isetf exports[J

Zeile 592: [J

Zeile 593: " Falcon[J

Zeile 594: au BufNewFile,BufRead *.fal^I^I^Isetf falcon[J

Zeile 595: [J

Zeile 596: " Fantom[J

Zeile 597: au BufNewFile,BufRead *.fan,*.fwt^I^Isetf fan[J

Zeile 598: [J

Zeile 599: " Factor[J

Zeile 600: au BufNewFile,BufRead *.factor^I^I^Isetf factor[J

Zeile 601: [J

Zeile 602: " Fennel[J

Zeile 603: autocmd BufRead,BufNewFile *.fnl^I^Isetf fennel[J

Zeile 604: [J

Zeile 605: " Fetchmail RC file[J

Zeile 606: au BufNewFile,BufRead .fetchmailrc^I^Isetf fetchmail[J

Zeile 607: [J

Zeile 608: " FlexWiki - disabled, because it has side effects when a .wiki file[J

Zeile 609: " is not actually FlexWiki[J

Zeile 610: "au BufNewFile,BufRead *.wiki^I^I^Isetf flexwiki[J

Zeile 611: [J

Zeile 612: " Focus Executable[J

Zeile 613: au BufNewFile,BufRead *.fex,*.focexec^I^Isetf focexec[J

Zeile 614: [J

Zeile 615: " Focus Master file (but not for auto.master)[J

Zeile 616: au BufNewFile,BufRead auto.master^I^Isetf conf[J

Zeile 617: au BufNewFile,BufRead *.mas,*.master^I^Isetf master[J

Zeile 618: [J

Zeile 619: " Forth[J

Zeile 620: au BufNewFile,BufRead *.fs,*.ft,*.fth^I^Isetf forth[J

Zeile 621: [J

Zeile 622: " Reva Forth[J

Zeile 623: au BufNewFile,BufRead *.frt^I^I^Isetf reva[J

Zeile 624: [J

Zeile 625: " Fortran[J

Zeile 626: if has("fname_case")[J

Zeile 627:   au BufNewFile,BufRead *.F,*.FOR,*.FPP,*.FTN,*.F77,*.F90,*.F95,*.F03,*.F08^I setf fortran[J

Zeile 628: endif[J

Zeile 629: au BufNewFile,BufRead   *.f,*.for,*.fortran,*.fpp,*.ftn,*.f77,*.f90,*.f95,*.f03,*.f08  setf fortran[J

Zeile 630: [J

Zeile 631: " Framescript[J

Zeile 632: au BufNewFile,BufRead *.fsl^I^I^Isetf framescript[J

Zeile 633: [J

Zeile 634: " FStab[J

Zeile 635: au BufNewFile,BufRead fstab,mtab^I^Isetf fstab[J

Zeile 636: [J

Zeile 637: " GDB command files[J

Zeile 638: au BufNewFile,BufRead .gdbinit^I^I^Isetf gdb[J

Zeile 639: [J

Zeile 640: " GDMO[J

Zeile 641: au BufNewFile,BufRead *.mo,*.gdmo^I^Isetf gdmo[J

Zeile 642: [J

Zeile 643: " Gedcom[J

Zeile 644: au BufNewFile,BufRead *.ged,lltxxxxx.txt^Isetf gedcom[J

Zeile 645: [J

Zeile 646: " Gift (Moodle)[J

Zeile 647: autocmd BufRead,BufNewFile *.gift^I^Isetf gift[J

Zeile 648: [J

Zeile 649: " Git[J

Zeile 650: au BufNewFile,BufRead COMMIT_EDITMSG,MERGE_MSG,TAG_EDITMSG^Isetf gitcommit[J

Zeile 651: au BufNewFile,BufRead *.git/config,.gitconfig,/etc/gitconfig^Isetf gitconfig[J

Zeile 652: au BufNewFile,BufRead */.config/git/config^I^I^Isetf gitconfig[J

Zeile 653: au BufNewFile,BufRead .gitmodules,*.git/modules/*/config^Isetf gitconfig[J

Zeile 654: if !empty($XDG_CONFIG_HOME)[J

Zeile 655:   au BufNewFile,BufRead $XDG_CONFIG_HOME/git/config^I^Isetf gitconfig[J

Zeile 656: endif[J

Zeile 657: au BufNewFile,BufRead git-rebase-todo^I^Isetf gitrebase[J

Zeile 658: au BufRead,BufNewFile .gitsendemail.msg.??????^Isetf gitsendemail[J

Zeile 659: au BufNewFile,BufRead .msg.[0-9]* if getline(1) =~ '^From.*# This line is ignored.$' |   setf gitsendemail | endif[J

Zeile 663: au BufNewFile,BufRead *.git/* if getline(1) =~ '^\x\{40\}\>\|^ref: ' |   setf git | endif[J

Zeile 667: [J

Zeile 668: " Gkrellmrc[J

Zeile 669: au BufNewFile,BufRead gkrellmrc,gkrellmrc_?^Isetf gkrellmrc[J

Zeile 670: [J

Zeile 671: " GP scripts (2.0 and onward)[J

Zeile 672: au BufNewFile,BufRead *.gp,.gprc^I^Isetf gp[J

Zeile 673: [J

Zeile 674: " GPG[J

Zeile 675: au BufNewFile,BufRead */.gnupg/options^I^Isetf gpg[J

Zeile 676: au BufNewFile,BufRead */.gnupg/gpg.conf^I^Isetf gpg[J

Zeile 677: au BufNewFile,BufRead */usr/*/gnupg/options.skel setf gpg[J

Zeile 678: if !empty($GNUPGHOME)[J

Zeile 679:   au BufNewFile,BufRead $GNUPGHOME/options^Isetf gpg[J

Zeile 680:   au BufNewFile,BufRead $GNUPGHOME/gpg.conf^Isetf gpg[J

Zeile 681: endif[J

Zeile 682: [J

Zeile 683: " gnash(1) configuration files[J

Zeile 684: au BufNewFile,BufRead gnashrc,.gnashrc,gnashpluginrc,.gnashpluginrc setf gnash[J

Zeile 685: [J

Zeile 686: " Gitolite[J

Zeile 687: au BufNewFile,BufRead gitolite.conf^I^Isetf gitolite[J

Zeile 688: au BufNewFile,BufRead {,.}gitolite.rc,example.gitolite.rc^Isetf perl[J

Zeile 689: [J

Zeile 690: " Gnuplot scripts[J

Zeile 691: au BufNewFile,BufRead *.gpi^I^I^Isetf gnuplot[J

Zeile 692: [J

Zeile 693: " Go (Google)[J

Zeile 694: au BufNewFile,BufRead *.go^I^I^Isetf go[J

Zeile 695: [J

Zeile 696: " GrADS scripts[J

Zeile 697: au BufNewFile,BufRead *.gs^I^I^Isetf grads[J

Zeile 698: [J

Zeile 699: " Gretl[J

Zeile 700: au BufNewFile,BufRead *.gretl^I^I^Isetf gretl[J

Zeile 701: [J

Zeile 702: " Groovy[J

Zeile 703: au BufNewFile,BufRead *.gradle,*.groovy^I^Isetf groovy[J

Zeile 704: [J

Zeile 705: " GNU Server Pages[J

Zeile 706: au BufNewFile,BufRead *.gsp^I^I^Isetf gsp[J

Zeile 707: [J

Zeile 708: " Group file[J

Zeile 709: au BufNewFile,BufRead */etc/group,*/etc/group-,*/etc/group.edit,*/etc/gshadow,*/etc/gshadow-,*/etc/gshadow.edit,*/var/backups/group.bak,*/var/backups/gshadow.bak  setf group[J

Zeile 710: [J

Zeile 711: " GTK RC[J

Zeile 712: au BufNewFile,BufRead .gtkrc,gtkrc^I^Isetf gtkrc[J

Zeile 713: [J

Zeile 714: " Haml[J

Zeile 715: au BufNewFile,BufRead *.haml^I^I^Isetf haml[J

Zeile 716: [J

Zeile 717: " Hamster Classic | Playground files[J

Zeile 718: au BufNewFile,BufRead *.hsm^I^I^Isetf hamster[J

Zeile 719: [J

Zeile 720: " Haskell[J

Zeile 721: au BufNewFile,BufRead *.hs,*.hsc,*.hs-boot^Isetf haskell[J

Zeile 722: au BufNewFile,BufRead *.lhs^I^I^Isetf lhaskell[J

Zeile 723: au BufNewFile,BufRead *.chs^I^I^Isetf chaskell[J

Zeile 724: au BufNewFile,BufRead cabal.project^I^Isetf cabalproject[J

Zeile 725: au BufNewFile,BufRead $HOME/.cabal/config^Isetf cabalconfig[J

Zeile 726: au BufNewFile,BufRead cabal.config^I^Isetf cabalconfig[J

Zeile 727: [J

Zeile 728: " Haste[J

Zeile 729: au BufNewFile,BufRead *.ht^I^I^Isetf haste[J

Zeile 730: au BufNewFile,BufRead *.htpp^I^I^Isetf hastepreproc[J

Zeile 731: [J

Zeile 732: " Hercules[J

Zeile 733: au BufNewFile,BufRead *.vc,*.ev,*.sum,*.errsum^Isetf hercules[J

Zeile 734: [J

Zeile 735: " HEX (Intel)[J

Zeile 736: au BufNewFile,BufRead *.hex,*.h32^I^Isetf hex[J

Zeile 737: [J

Zeile 738: " Hollywood[J

Zeile 739: au BufRead,BufNewFile *.hws^I^I^Isetf hollywood[J

Zeile 740: [J

Zeile 741: " Tilde (must be before HTML)[J

Zeile 742: au BufNewFile,BufRead *.t.html^I^I^Isetf tilde[J

Zeile 743: [J

Zeile 744: " HTML (.shtml and .stm for server side)[J

Zeile 745: au BufNewFile,BufRead *.html,*.htm,*.shtml,*.stm  call dist#ft#FThtml()[J

Zeile 746: [J

Zeile 747: " HTML with Ruby - eRuby[J

Zeile 748: au BufNewFile,BufRead *.erb,*.rhtml^I^Isetf eruby[J

Zeile 749: [J

Zeile 750: " HTML with M4[J

Zeile 751: au BufNewFile,BufRead *.html.m4^I^I^Isetf htmlm4[J

Zeile 752: [J

Zeile 753: " Some template.  Used to be HTML Cheetah.[J

Zeile 754: au BufNewFile,BufRead *.tmpl^I^I^Isetf template[J

Zeile 755: [J

Zeile 756: " Host config[J

Zeile 757: au BufNewFile,BufRead */etc/host.conf^I^Isetf hostconf[J

Zeile 758: [J

Zeile 759: " Hosts access[J

Zeile 760: au BufNewFile,BufRead */etc/hosts.allow,*/etc/hosts.deny  setf hostsaccess[J

Zeile 761: [J

Zeile 762: " Hyper Builder[J

Zeile 763: au BufNewFile,BufRead *.hb^I^I^Isetf hb[J

Zeile 764: [J

Zeile 765: " Httest[J

Zeile 766: au BufNewFile,BufRead *.htt,*.htb^I^Isetf httest[J

Zeile 767: [J

Zeile 768: " Icon[J

Zeile 769: au BufNewFile,BufRead *.icn^I^I^Isetf icon[J

Zeile 770: [J

Zeile 771: " IDL (Interface Description Language)[J

Zeile 772: au BufNewFile,BufRead *.idl^I^I^Icall dist#ft#FTidl()[J

Zeile 773: [J

Zeile 774: " Microsoft IDL (Interface Description Language)  Also *.idl[J

Zeile 775: " MOF = WMI (Windows Management Instrumentation) Managed Object Format[J

Zeile 776: au BufNewFile,BufRead *.odl,*.mof^I^Isetf msidl[J

Zeile 777: [J

Zeile 778: " Icewm menu[J

Zeile 779: au BufNewFile,BufRead */.icewm/menu^I^Isetf icemenu[J

Zeile 780: [J

Zeile 781: " Indent profile (must come before IDL *.pro!)[J

Zeile 782: au BufNewFile,BufRead .indent.pro^I^Isetf indent[J

Zeile 783: au BufNewFile,BufRead indent.pro^I^Icall dist#ft#ProtoCheck('indent')[J

Zeile 784: [J

Zeile 785: " IDL (Interactive Data Language)[J

Zeile 786: au BufNewFile,BufRead *.pro^I^I^Icall dist#ft#ProtoCheck('idlang')[J

Zeile 787: [J

Zeile 788: " Indent RC[J

Zeile 789: au BufNewFile,BufRead indentrc^I^I^Isetf indent[J

Zeile 790: [J

Zeile 791: " Inform[J

Zeile 792: au BufNewFile,BufRead *.inf,*.INF^I^Isetf inform[J

Zeile 793: [J

Zeile 794: " Initng[J

Zeile 795: au BufNewFile,BufRead */etc/initng/*/*.i,*.ii^Isetf initng[J

Zeile 796: [J

Zeile 797: " Innovation Data Processing[J

Zeile 798: au BufRead,BufNewFile upstream.dat\c,upstream.*.dat\c,*.upstream.dat\c^Isetf upstreamdat[J

Zeile 799: au BufRead,BufNewFile fdrupstream.log,upstream.log\c,upstream.*.log\c,*.upstream.log\c,UPSTREAM-*.log\c^Isetf upstreamlog[J

Zeile 800: au BufRead,BufNewFile upstreaminstall.log\c,upstreaminstall.*.log\c,*.upstreaminstall.log\c setf upstreaminstalllog[J

Zeile 801: au BufRead,BufNewFile usserver.log\c,usserver.*.log\c,*.usserver.log\c^Isetf usserverlog[J

Zeile 802: au BufRead,BufNewFile usw2kagt.log\c,usw2kagt.*.log\c,*.usw2kagt.log\c^Isetf usw2kagtlog[J

Zeile 803: [J

Zeile 804: " Ipfilter[J

Zeile 805: au BufNewFile,BufRead ipf.conf,ipf6.conf,ipf.rules^Isetf ipfilter[J

Zeile 806: [J

Zeile 807: " Informix 4GL (source - canonical, include file, I4GL+M4 preproc.)[J

Zeile 808: au BufNewFile,BufRead *.4gl,*.4gh,*.m4gl^Isetf fgl[J

Zeile 809: [J

Zeile 810: " .INI file for MSDOS[J

Zeile 811: au BufNewFile,BufRead *.ini^I^I^Isetf dosini[J

Zeile 812: [J

Zeile 813: " SysV Inittab[J

Zeile 814: au BufNewFile,BufRead inittab^I^I^Isetf inittab[J

Zeile 815: [J

Zeile 816: " Inno Setup[J

Zeile 817: au BufNewFile,BufRead *.iss^I^I^Isetf iss[J

Zeile 818: [J

Zeile 819: " J[J

Zeile 820: au BufNewFile,BufRead *.ijs^I^I^Isetf j[J

Zeile 821: [J

Zeile 822: " JAL[J

Zeile 823: au BufNewFile,BufRead *.jal,*.JAL^I^Isetf jal[J

Zeile 824: [J

Zeile 825: " Jam[J

Zeile 826: au BufNewFile,BufRead *.jpl,*.jpr^I^Isetf jam[J

Zeile 827: [J

Zeile 828: " Java[J

Zeile 829: au BufNewFile,BufRead *.java,*.jav^I^Isetf java[J

Zeile 830: [J

Zeile 831: " JavaCC[J

Zeile 832: au BufNewFile,BufRead *.jj,*.jjt^I^Isetf javacc[J

Zeile 833: [J

Zeile 834: " JavaScript, ECMAScript, ES module script, CommonJS script[J

Zeile 835: au BufNewFile,BufRead *.js,*.javascript,*.es,*.mjs,*.cjs   setf javascript[J

Zeile 836: [J

Zeile 837: " JavaScript with React[J

Zeile 838: au BufNewFile,BufRead *.jsx^I^I^Isetf javascriptreact[J

Zeile 839: [J

Zeile 840: " Java Server Pages[J

Zeile 841: au BufNewFile,BufRead *.jsp^I^I^Isetf jsp[J

Zeile 842: [J

Zeile 843: " Java Properties resource file (note: doesn't catch font.properties.pl)[J

Zeile 844: au BufNewFile,BufRead *.properties,*.properties_??,*.properties_??_??^Isetf jproperties[J

Zeile 845: [J

Zeile 846: " Jess[J

Zeile 847: au BufNewFile,BufRead *.clp^I^I^Isetf jess[J

Zeile 848: [J

Zeile 849: " Jgraph[J

Zeile 850: au BufNewFile,BufRead *.jgr^I^I^Isetf jgraph[J

Zeile 851: [J

Zeile 852: " Jovial[J

Zeile 853: au BufNewFile,BufRead *.jov,*.j73,*.jovial^Isetf jovial[J

Zeile 854: [J

Zeile 855: " JSON[J

Zeile 856: au BufNewFile,BufRead *.json,*.jsonp,*.webmanifest^Isetf json[J

Zeile 857: [J

Zeile 858: " Kixtart[J

Zeile 859: au BufNewFile,BufRead *.kix^I^I^Isetf kix[J

Zeile 860: [J

Zeile 861: " Kimwitu[++][J

Zeile 862: au BufNewFile,BufRead *.k^I^I^Isetf kwt[J

Zeile 863: [J

Zeile 864: " Kivy[J

Zeile 865: au BufNewFile,BufRead *.kv^I^I^Isetf kivy[J

Zeile 866: [J

Zeile 867: " Kotlin[J

Zeile 868: au BufNewFile,BufRead *.kt,*.ktm,*.kts^I^Isetf kotlin[J

Zeile 869: [J

Zeile 870: " KDE script[J

Zeile 871: au BufNewFile,BufRead *.ks^I^I^Isetf kscript[J

Zeile 872: [J

Zeile 873: " Kconfig[J

Zeile 874: au BufNewFile,BufRead Kconfig,Kconfig.debug^Isetf kconfig[J

Zeile 875: [J

Zeile 876: " Lace (ISE)[J

Zeile 877: au BufNewFile,BufRead *.ace,*.ACE^I^Isetf lace[J

Zeile 878: [J

Zeile 879: " Latte[J

Zeile 880: au BufNewFile,BufRead *.latte,*.lte^I^Isetf latte[J

Zeile 881: [J

Zeile 882: " Limits[J

Zeile 883: au BufNewFile,BufRead */etc/limits,*/etc/*limits.conf,*/etc/*limits.d/*.conf^Isetf limits[J

Zeile 884: [J

Zeile 885: " LambdaProlog (*.mod too, see Modsim)[J

Zeile 886: au BufNewFile,BufRead *.sig^I^I^Isetf lprolog[J

Zeile 887: [J

Zeile 888: " LDAP LDIF[J

Zeile 889: au BufNewFile,BufRead *.ldif^I^I^Isetf ldif[J

Zeile 890: [J

Zeile 891: " Ld loader[J

Zeile 892: au BufNewFile,BufRead *.ld^I^I^Isetf ld[J

Zeile 893: [J

Zeile 894: " Less[J

Zeile 895: au BufNewFile,BufRead *.less^I^I^Isetf less[J

Zeile 896: [J

Zeile 897: " Lex[J

Zeile 898: au BufNewFile,BufRead *.lex,*.l,*.lxx,*.l++^Isetf lex[J

Zeile 899: [J

Zeile 900: " Libao[J

Zeile 901: au BufNewFile,BufRead */etc/libao.conf,*/.libao^Isetf libao[J

Zeile 902: [J

Zeile 903: " Libsensors[J

Zeile 904: au BufNewFile,BufRead */etc/sensors.conf,*/etc/sensors3.conf^Isetf sensors[J

Zeile 905: [J

Zeile 906: " LFTP[J

Zeile 907: au BufNewFile,BufRead lftp.conf,.lftprc,*lftp/rc^Isetf lftp[J

Zeile 908: [J

Zeile 909: " Lifelines (or Lex for C++!)[J

Zeile 910: au BufNewFile,BufRead *.ll^I^I^Isetf lifelines[J

Zeile 911: [J

Zeile 912: " Lilo: Linux loader[J

Zeile 913: au BufNewFile,BufRead lilo.conf^I^I^Isetf lilo[J

Zeile 914: [J

Zeile 915: " Lisp (*.el = ELisp, *.cl = Common Lisp)[J

Zeile 916: " *.jl was removed, it's also used for Julia, better skip than guess wrong.[J

Zeile 917: if has("fname_case")[J

Zeile 918:   au BufNewFile,BufRead *.lsp,*.lisp,*.el,*.cl,*.L,.emacs,.sawfishrc setf lisp[J

Zeile 919: else[J

Zeile 920:   au BufNewFile,BufRead *.lsp,*.lisp,*.el,*.cl,.emacs,.sawfishrc setf lisp[J

Zeile 921: endif[J

Zeile 922: [J

Zeile 923: " SBCL implementation of Common Lisp[J

Zeile 924: au BufNewFile,BufRead sbclrc,.sbclrc^I^Isetf lisp[J

Zeile 925: [J

Zeile 926: " Liquid[J

Zeile 927: au BufNewFile,BufRead *.liquid^I^I^Isetf liquid[J

Zeile 928: [J

Zeile 929: " Lite[J

Zeile 930: au BufNewFile,BufRead *.lite,*.lt^I^Isetf lite[J

Zeile 931: [J

Zeile 932: " LiteStep RC files[J

Zeile 933: au BufNewFile,BufRead */LiteStep/*/*.rc^I^Isetf litestep[J

Zeile 934: [J

Zeile 935: " Login access[J

Zeile 936: au BufNewFile,BufRead */etc/login.access^Isetf loginaccess[J

Zeile 937: [J

Zeile 938: " Login defs[J

Zeile 939: au BufNewFile,BufRead */etc/login.defs^I^Isetf logindefs[J

Zeile 940: [J

Zeile 941: " Logtalk[J

Zeile 942: au BufNewFile,BufRead *.lgt^I^I^Isetf logtalk[J

Zeile 943: [J

Zeile 944: " LOTOS[J

Zeile 945: au BufNewFile,BufRead *.lot,*.lotos^I^Isetf lotos[J

Zeile 946: [J

Zeile 947: " Lout (also: *.lt)[J

Zeile 948: au BufNewFile,BufRead *.lou,*.lout^I^Isetf lout[J

Zeile 949: [J

Zeile 950: " Lua[J

Zeile 951: au BufNewFile,BufRead *.lua^I^I^Isetf lua[J

Zeile 952: [J

Zeile 953: " Luarocks[J

Zeile 954: au BufNewFile,BufRead *.rockspec^I^Isetf lua[J

Zeile 955: [J

Zeile 956: " Linden Scripting Language (Second Life)[J

Zeile 957: au BufNewFile,BufRead *.lsl^I^I^Isetf lsl[J

Zeile 958: [J

Zeile 959: " Lynx style file (or LotusScript!)[J

Zeile 960: au BufNewFile,BufRead *.lss^I^I^Isetf lss[J

Zeile 961: [J

Zeile 962: " M4[J

Zeile 963: au BufNewFile,BufRead *.m4 if expand("<afile>") !~? 'html.m4$\|fvwm2rc' | setf m4 | endif[J

Zeile 965: [J

Zeile 966: " MaGic Point[J

Zeile 967: au BufNewFile,BufRead *.mgp^I^I^Isetf mgp[J

Zeile 968: [J

Zeile 969: " Mail (for Elm, trn, mutt, muttng, rn, slrn, neomutt)[J

Zeile 970: au BufNewFile,BufRead snd.\d\+,.letter,.letter.\d\+,.followup,.article,.article.\d\+,pico.\d\+,mutt{ng,}-*-\w\+,mutt[[:alnum:]_-]\\\{6\},neomutt-*-\w\+,neomutt[[:alnum:]_-]\\\{6\},ae\d\+.txt,/tmp/SLRN[0-9A-Z.]\+,*.eml setf mail[J

Zeile 971: [J

Zeile 972: " Mail aliases[J

Zeile 973: au BufNewFile,BufRead */etc/mail/aliases,*/etc/aliases^Isetf mailaliases[J

Zeile 974: [J

Zeile 975: " Mailcap configuration file[J

Zeile 976: au BufNewFile,BufRead .mailcap,mailcap^I^Isetf mailcap[J

Zeile 977: [J

Zeile 978: " Makefile[J

Zeile 979: au BufNewFile,BufRead *[mM]akefile,*.mk,*.mak,*.dsp setf make[J

Zeile 980: [J

Zeile 981: " MakeIndex[J

Zeile 982: au BufNewFile,BufRead *.ist,*.mst^I^Isetf ist[J

Zeile 983: [J

Zeile 984: " Mallard[J

Zeile 985: au BufNewFile,BufRead *.page^I^I^Isetf mallard[J

Zeile 986: [J

Zeile 987: " Manpage[J

Zeile 988: au BufNewFile,BufRead *.man^I^I^Isetf man[J

Zeile 989: [J

Zeile 990: " Man config[J

Zeile 991: au BufNewFile,BufRead */etc/man.conf,man.config^Isetf manconf[J

Zeile 992: [J

Zeile 993: " Maple V[J

Zeile 994: au BufNewFile,BufRead *.mv,*.mpl,*.mws^I^Isetf maple[J

Zeile 995: [J

Zeile 996: " Map (UMN mapserver config file)[J

Zeile 997: au BufNewFile,BufRead *.map^I^I^Isetf map[J

Zeile 998: [J

Zeile 999: " Markdown[J

Zeile 1000: au BufNewFile,BufRead *.markdown,*.mdown,*.mkd,*.mkdn,*.mdwn,*.md  setf markdown[J

Zeile 1001: [J

Zeile 1002: " Mason[J

Zeile 1003: au BufNewFile,BufRead *.mason,*.mhtml,*.comp^Isetf mason[J

Zeile 1004: [J

Zeile 1005: " Mathematica, Matlab, Murphi or Objective C[J

Zeile 1006: au BufNewFile,BufRead *.m^I^I^Icall dist#ft#FTm()[J

Zeile 1007: [J

Zeile 1008: " Mathematica notebook[J

Zeile 1009: au BufNewFile,BufRead *.nb^I^I^Isetf mma[J

Zeile 1010: [J

Zeile 1011: " Maya Extension Language[J

Zeile 1012: au BufNewFile,BufRead *.mel^I^I^Isetf mel[J

Zeile 1013: [J

Zeile 1014: " Mercurial (hg) commit file[J

Zeile 1015: au BufNewFile,BufRead hg-editor-*.txt^I^Isetf hgcommit[J

Zeile 1016: [J

Zeile 1017: " Mercurial config (looks like generic config file)[J

Zeile 1018: au BufNewFile,BufRead *.hgrc,*hgrc^I^Isetf cfg[J

Zeile 1019: [J

Zeile 1020: " Meson Build system config[J

Zeile 1021: au BufNewFile,BufRead meson.build,meson_options.txt setf meson[J

Zeile 1022: au BufNewFile,BufRead *.wrap^I^I^Isetf dosini[J

Zeile 1023: [J

Zeile 1024: " Messages (logs mostly)[J

Zeile 1025: au BufNewFile,BufRead */log/{auth,cron,daemon,debug,kern,lpr,mail,messages,news/news,syslog,user}{,.log,.err,.info,.warn,.crit,.notice}{,.[0-9]*,-[0-9]*} setf messages[J

Zeile 1026: [J

Zeile 1027: " Metafont[J

Zeile 1028: au BufNewFile,BufRead *.mf^I^I^Isetf mf[J

Zeile 1029: [J

Zeile 1030: " MetaPost[J

Zeile 1031: au BufNewFile,BufRead *.mp^I^I^Isetf mp[J

Zeile 1032: [J

Zeile 1033: " MGL[J

Zeile 1034: au BufNewFile,BufRead *.mgl^I^I^Isetf mgl[J

Zeile 1035: [J

Zeile 1036: " MIX - Knuth assembly[J

Zeile 1037: au BufNewFile,BufRead *.mix,*.mixal^I^Isetf mix[J

Zeile 1038: [J

Zeile 1039: " MMIX or VMS makefile[J

Zeile 1040: au BufNewFile,BufRead *.mms^I^I^Icall dist#ft#FTmms()[J

Zeile 1041: [J

Zeile 1042: " Symbian meta-makefile definition (MMP)[J

Zeile 1043: au BufNewFile,BufRead *.mmp^I^I^Isetf mmp[J

Zeile 1044: [J

Zeile 1045: " Modsim III (or LambdaProlog)[J

Zeile 1046: au BufNewFile,BufRead *.mod if getline(1) =~ '\<module\>' |   setf lprolog | else |   setf modsim3 | endif[J

Zeile 1052: [J

Zeile 1053: " Modula-2  (.md removed in favor of Markdown)[J

Zeile 1054: au BufNewFile,BufRead *.m2,*.DEF,*.MOD,*.mi^Isetf modula2[J

Zeile 1055: [J

Zeile 1056: " Modula-3 (.m3, .i3, .mg, .ig)[J

Zeile 1057: au BufNewFile,BufRead *.[mi][3g]^I^Isetf modula3[J

Zeile 1058: [J

Zeile 1059: " Monk[J

Zeile 1060: au BufNewFile,BufRead *.isc,*.monk,*.ssc,*.tsc^Isetf monk[J

Zeile 1061: [J

Zeile 1062: " MOO[J

Zeile 1063: au BufNewFile,BufRead *.moo^I^I^Isetf moo[J

Zeile 1064: [J

Zeile 1065: " Modconf[J

Zeile 1066: au BufNewFile,BufRead */etc/modules.conf,*/etc/modules,*/etc/conf.modules setf modconf[J

Zeile 1067: [J

Zeile 1068: " Mplayer config[J

Zeile 1069: au BufNewFile,BufRead mplayer.conf,*/.mplayer/config^Isetf mplayerconf[J

Zeile 1070: [J

Zeile 1071: " Motorola S record[J

Zeile 1072: au BufNewFile,BufRead *.s19,*.s28,*.s37,*.mot,*.srec^Isetf srec[J

Zeile 1073: [J

Zeile 1074: " Mrxvtrc[J

Zeile 1075: au BufNewFile,BufRead mrxvtrc,.mrxvtrc^I^Isetf mrxvtrc[J

Zeile 1076: [J

Zeile 1077: " Msql[J

Zeile 1078: au BufNewFile,BufRead *.msql^I^I^Isetf msql[J

Zeile 1079: [J

Zeile 1080: " Mysql[J

Zeile 1081: au BufNewFile,BufRead *.mysql^I^I^Isetf mysql[J

Zeile 1082: [J

Zeile 1083: " Mutt setup files (must be before catch *.rc)[J

Zeile 1084: au BufNewFile,BufRead */etc/Muttrc.d/*^I^Icall s:StarSetf('muttrc')[J

Zeile 1085: [J

Zeile 1086: " M$ Resource files[J

Zeile 1087: au BufNewFile,BufRead *.rc,*.rch^I^Isetf rc[J

Zeile 1088: [J

Zeile 1089: " MuPAD source[J

Zeile 1090: au BufRead,BufNewFile *.mu^I^I^Isetf mupad[J

Zeile 1091: [J

Zeile 1092: " Mush[J

Zeile 1093: au BufNewFile,BufRead *.mush^I^I^Isetf mush[J

Zeile 1094: [J

Zeile 1095: " Mutt setup file (also for Muttng)[J

Zeile 1096: au BufNewFile,BufRead Mutt{ng,}rc^I^Isetf muttrc[J

Zeile 1097: [J

Zeile 1098: " N1QL[J

Zeile 1099: au BufRead,BufNewfile *.n1ql,*.nql^I^Isetf n1ql[J

Zeile 1100: [J

Zeile 1101: " Nano[J

Zeile 1102: au BufNewFile,BufRead */etc/nanorc,*.nanorc^Isetf nanorc[J

Zeile 1103: [J

Zeile 1104: " Nastran input/DMAP[J

Zeile 1105: "au BufNewFile,BufRead *.dat^I^I^Isetf nastran[J

Zeile 1106: [J

Zeile 1107: " Natural[J

Zeile 1108: au BufNewFile,BufRead *.NS[ACGLMNPS]^I^Isetf natural[J

Zeile 1109: [J

Zeile 1110: " Noemutt setup file[J

Zeile 1111: au BufNewFile,BufRead Neomuttrc^I^I^Isetf neomuttrc[J

Zeile 1112: [J

Zeile 1113: " Netrc[J

Zeile 1114: au BufNewFile,BufRead .netrc^I^I^Isetf netrc[J

Zeile 1115: [J

Zeile 1116: " Ninja file[J

Zeile 1117: au BufNewFile,BufRead *.ninja^I^I^Isetf ninja[J

Zeile 1118: [J

Zeile 1119: " NPM RC file[J

Zeile 1120: au BufNewFile,BufRead npmrc,.npmrc^I^Isetf dosini[J

Zeile 1121: [J

Zeile 1122: " Novell netware batch files[J

Zeile 1123: au BufNewFile,BufRead *.ncf^I^I^Isetf ncf[J

Zeile 1124: [J

Zeile 1125: " Nroff/Troff (*.ms and *.t are checked below)[J

Zeile 1126: au BufNewFile,BufRead *.me if expand("<afile>") != "read.me" && expand("<afile>") != "click.me" |   setf nroff | endif[J

Zeile 1130: au BufNewFile,BufRead *.tr,*.nr,*.roff,*.tmac,*.mom^Isetf nroff[J

Zeile 1131: au BufNewFile,BufRead *.[1-9]^I^I^Icall dist#ft#FTnroff()[J

Zeile 1132: [J

Zeile 1133: " Nroff or Objective C++[J

Zeile 1134: au BufNewFile,BufRead *.mm^I^I^Icall dist#ft#FTmm()[J

Zeile 1135: [J

Zeile 1136: " Not Quite C[J

Zeile 1137: au BufNewFile,BufRead *.nqc^I^I^Isetf nqc[J

Zeile 1138: [J

Zeile 1139: " NSE - Nmap Script Engine - uses Lua syntax[J

Zeile 1140: au BufNewFile,BufRead *.nse^I^I^Isetf lua[J

Zeile 1141: [J

Zeile 1142: " NSIS[J

Zeile 1143: au BufNewFile,BufRead *.nsi,*.nsh^I^Isetf nsis[J

Zeile 1144: [J

Zeile 1145: " OCaml[J

Zeile 1146: au BufNewFile,BufRead *.ml,*.mli,*.mll,*.mly,.ocamlinit,*.mlt,*.mlp,*.mlip,*.mli.cppo,*.ml.cppo setf ocaml[J

Zeile 1147: [J

Zeile 1148: " Occam[J

Zeile 1149: au BufNewFile,BufRead *.occ^I^I^Isetf occam[J

Zeile 1150: [J

Zeile 1151: " Omnimark[J

Zeile 1152: au BufNewFile,BufRead *.xom,*.xin^I^Isetf omnimark[J

Zeile 1153: [J

Zeile 1154: " OPAM[J

Zeile 1155: au BufNewFile,BufRead opam,*.opam,*.opam.template setf opam[J

Zeile 1156: [J

Zeile 1157: " OpenROAD[J

Zeile 1158: au BufNewFile,BufRead *.or^I^I^Isetf openroad[J

Zeile 1159: [J

Zeile 1160: " OPL[J

Zeile 1161: au BufNewFile,BufRead *.[Oo][Pp][Ll]^I^Isetf opl[J

Zeile 1162: [J

Zeile 1163: " Oracle config file[J

Zeile 1164: au BufNewFile,BufRead *.ora^I^I^Isetf ora[J

Zeile 1165: [J

Zeile 1166: " Packet filter conf[J

Zeile 1167: au BufNewFile,BufRead pf.conf^I^I^Isetf pf[J

Zeile 1168: [J

Zeile 1169: " Pacman Config (close enough to dosini)[J

Zeile 1170: au BufNewFile,BufRead */etc/pacman.conf^I^Isetf dosini[J

Zeile 1171: [J

Zeile 1172: " Pacman hooks[J

Zeile 1173: au BufNewFile,BufRead *.hook if getline(1) == '[Trigger]' |   setf dosini | endif[J

Zeile 1177: [J

Zeile 1178: " Pam conf[J

Zeile 1179: au BufNewFile,BufRead */etc/pam.conf^I^I^Isetf pamconf[J

Zeile 1180: [J

Zeile 1181: " Pam environment[J

Zeile 1182: au BufNewFile,BufRead pam_env.conf,.pam_environment^Isetf pamenv[J

Zeile 1183: [J

Zeile 1184: " PApp[J

Zeile 1185: au BufNewFile,BufRead *.papp,*.pxml,*.pxsl^Isetf papp[J

Zeile 1186: [J

Zeile 1187: " Password file[J

Zeile 1188: au BufNewFile,BufRead */etc/passwd,*/etc/passwd-,*/etc/passwd.edit,*/etc/shadow,*/etc/shadow-,*/etc/shadow.edit,*/var/backups/passwd.bak,*/var/backups/shadow.bak setf passwd[J

Zeile 1189: [J

Zeile 1190: " Pascal (also *.p, *.pp, *.inc)[J

Zeile 1191: au BufNewFile,BufRead *.pas^I^I^Isetf pascal[J

Zeile 1192: [J

Zeile 1193: " Pascal or Puppet manifest[J

Zeile 1194: au BufNewFile,BufRead *.pp^I^I^Icall dist#ft#FTpp()[J

Zeile 1195: [J

Zeile 1196: " Delphi or Lazarus program file[J

Zeile 1197: au BufNewFile,BufRead *.dpr,*.lpr^I^Isetf pascal[J

Zeile 1198: [J

Zeile 1199: " Free Pascal makefile definition file[J

Zeile 1200: au BufNewFile,BufRead *.fpc^I^I^Isetf fpcmake[J

Zeile 1201: [J

Zeile 1202: " PDF[J

Zeile 1203: au BufNewFile,BufRead *.pdf^I^I^Isetf pdf[J

Zeile 1204: [J

Zeile 1205: " PCMK - HAE - crm configure edit[J

Zeile 1206: au BufNewFile,BufRead *.pcmk^I^I^Isetf pcmk[J

Zeile 1207: [J

Zeile 1208: " Perl[J

Zeile 1209: if has("fname_case")[J

Zeile 1210:   au BufNewFile,BufRead *.pl,*.PL^I^Icall dist#ft#FTpl()[J

Zeile 1211: else[J

Zeile 1212:   au BufNewFile,BufRead *.pl^I^I^Icall dist#ft#FTpl()[J

Zeile 1213: endif[J

Zeile 1214: au BufNewFile,BufRead *.plx,*.al,*.psgi^I^Isetf perl[J

Zeile 1215: [J

Zeile 1216: " Perl, XPM or XPM2[J

Zeile 1217: au BufNewFile,BufRead *.pm if getline(1) =~ "XPM2" |   setf xpm2 | elseif getline(1) =~ "XPM" |   setf xpm | else |   setf perl | endif[J

Zeile 1225: [J

Zeile 1226: " Perl POD[J

Zeile 1227: au BufNewFile,BufRead *.pod^I^I^Isetf pod[J

Zeile 1228: [J

Zeile 1229: " Php, php3, php4, etc.[J

Zeile 1230: " Also Phtml (was used for PHP 2 in the past)[J

Zeile 1231: " Also .ctp for Cake template file[J

Zeile 1232: au BufNewFile,BufRead *.php,*.php\d,*.phtml,*.ctp^Isetf php[J

Zeile 1233: [J

Zeile 1234: " PHP config[J

Zeile 1235: au BufNewFile,BufRead php.ini-*^I^I^Isetf dosini[J

Zeile 1236: [J

Zeile 1237: " Pike and Cmod[J

Zeile 1238: au BufNewFile,BufRead *.pike,*.pmod^I^Isetf pike[J

Zeile 1239: au BufNewFile,BufRead *.cmod^I^I^Isetf cmod[J

Zeile 1240: [J

Zeile 1241: " Pinfo config[J

Zeile 1242: au BufNewFile,BufRead */etc/pinforc,*/.pinforc^Isetf pinfo[J

Zeile 1243: [J

Zeile 1244: " Palm Resource compiler[J

Zeile 1245: au BufNewFile,BufRead *.rcp^I^I^Isetf pilrc[J

Zeile 1246: [J

Zeile 1247: " Pine config[J

Zeile 1248: au BufNewFile,BufRead .pinerc,pinerc,.pinercex,pinercex^I^Isetf pine[J

Zeile 1249: [J

Zeile 1250: " Pipenv Pipfiles[J

Zeile 1251: au BufNewFile,BufRead Pipfile^I^I^Isetf config[J

Zeile 1252: au BufNewFile,BufRead Pipfile.lock^I^Isetf json[J

Zeile 1253: [J

Zeile 1254: " PL/1, PL/I[J

Zeile 1255: au BufNewFile,BufRead *.pli,*.pl1^I^Isetf pli[J

Zeile 1256: [J

Zeile 1257: " PL/M (also: *.inp)[J

Zeile 1258: au BufNewFile,BufRead *.plm,*.p36,*.pac^I^Isetf plm[J

Zeile 1259: [J

Zeile 1260: " PL/SQL[J

Zeile 1261: au BufNewFile,BufRead *.pls,*.plsql^I^Isetf plsql[J

Zeile 1262: [J

Zeile 1263: " PLP[J

Zeile 1264: au BufNewFile,BufRead *.plp^I^I^Isetf plp[J

Zeile 1265: [J

Zeile 1266: " PO and PO template (GNU gettext)[J

Zeile 1267: au BufNewFile,BufRead *.po,*.pot^I^Isetf po[J

Zeile 1268: [J

Zeile 1269: " Postfix main config[J

Zeile 1270: au BufNewFile,BufRead main.cf^I^I^Isetf pfmain[J

Zeile 1271: [J

Zeile 1272: " PostScript (+ font files, encapsulated PostScript, Adobe Illustrator)[J

Zeile 1273: au BufNewFile,BufRead *.ps,*.pfa,*.afm,*.eps,*.epsf,*.epsi,*.ai^I  setf postscr[J

Zeile 1274: [J

Zeile 1275: " PostScript Printer Description[J

Zeile 1276: au BufNewFile,BufRead *.ppd^I^I^Isetf ppd[J

Zeile 1277: [J

Zeile 1278: " Povray[J

Zeile 1279: au BufNewFile,BufRead *.pov^I^I^Isetf pov[J

Zeile 1280: [J

Zeile 1281: " Povray configuration[J

Zeile 1282: au BufNewFile,BufRead .povrayrc^I^I^Isetf povini[J

Zeile 1283: [J

Zeile 1284: " Povray, Pascal, PHP or assembly[J

Zeile 1285: au BufNewFile,BufRead *.inc^I^I^Icall dist#ft#FTinc()[J

Zeile 1286: [J

Zeile 1287: " PowerShell[J

Zeile 1288: au BufNewFile,BufRead^I*.ps1,*.psd1,*.psm1,*.pssc^Isetf ps1[J

Zeile 1289: au BufNewFile,BufRead^I*.ps1xml^I^I^Isetf ps1xml[J

Zeile 1290: au BufNewFile,BufRead^I*.cdxml,*.psc1^I^I^Isetf xml[J

Zeile 1291: [J

Zeile 1292: " Printcap and Termcap[J

Zeile 1293: au BufNewFile,BufRead *printcap let b:ptcap_type = "print" | setf ptcap[J

Zeile 1295: au BufNewFile,BufRead *termcap let b:ptcap_type = "term" | setf ptcap[J

Zeile 1297: [J

Zeile 1298: " PCCTS / ANTLR[J

Zeile 1299: "au BufNewFile,BufRead *.g^I^I^Isetf antlr[J

Zeile 1300: au BufNewFile,BufRead *.g^I^I^Isetf pccts[J

Zeile 1301: [J

Zeile 1302: " PPWizard[J

Zeile 1303: au BufNewFile,BufRead *.it,*.ih^I^I^Isetf ppwiz[J

Zeile 1304: [J

Zeile 1305: " Puppet[J

Zeile 1306: au BufNewFile,BufRead Puppetfile^I^Isetf ruby[J

Zeile 1307: [J

Zeile 1308: " Embedded Puppet[J

Zeile 1309: au BufNewFile,BufRead *.epp^I^I^Isetf epuppet[J

Zeile 1310: [J

Zeile 1311: " Obj 3D file format[J

Zeile 1312: " TODO: is there a way to avoid MS-Windows Object files?[J

Zeile 1313: au BufNewFile,BufRead *.obj^I^I^Isetf obj[J

Zeile 1314: [J

Zeile 1315: " Oracle Pro*C/C++[J

Zeile 1316: au BufNewFile,BufRead *.pc^I^I^Isetf proc[J

Zeile 1317: [J

Zeile 1318: " Privoxy actions file[J

Zeile 1319: au BufNewFile,BufRead *.action^I^I^Isetf privoxy[J

Zeile 1320: [J

Zeile 1321: " Procmail[J

Zeile 1322: au BufNewFile,BufRead .procmail,.procmailrc^Isetf procmail[J

Zeile 1323: [J

Zeile 1324: " Progress or CWEB[J

Zeile 1325: au BufNewFile,BufRead *.w^I^I^Icall dist#ft#FTprogress_cweb()[J

Zeile 1326: [J

Zeile 1327: " Progress or assembly[J

Zeile 1328: au BufNewFile,BufRead *.i^I^I^Icall dist#ft#FTprogress_asm()[J

Zeile 1329: [J

Zeile 1330: " Progress or Pascal[J

Zeile 1331: au BufNewFile,BufRead *.p^I^I^Icall dist#ft#FTprogress_pascal()[J

Zeile 1332: [J

Zeile 1333: " Software Distributor Product Specification File (POSIX 1387.2-1995)[J

Zeile 1334: au BufNewFile,BufRead *.psf^I^I^Isetf psf[J

Zeile 1335: au BufNewFile,BufRead INDEX,INFO if getline(1) =~ '^\s*\(distribution\|installed_software\|root\|bundle\|product\)\s*$' |   setf psf | endif[J

Zeile 1339: [J

Zeile 1340: " Prolog[J

Zeile 1341: au BufNewFile,BufRead *.pdb^I^I^Isetf prolog[J

Zeile 1342: [J

Zeile 1343: " Promela[J

Zeile 1344: au BufNewFile,BufRead *.pml^I^I^Isetf promela[J

Zeile 1345: [J

Zeile 1346: " Property Specification Language (PSL)[J

Zeile 1347: au BufNewFile,BufRead *.psl^I^I^Isetf psl[J

Zeile 1348: [J

Zeile 1349: " Google protocol buffers[J

Zeile 1350: au BufNewFile,BufRead *.proto^I^I^Isetf proto[J

Zeile 1351: au BufNewFile,BufRead *.pbtxt^I^I^Isetf pbtxt[J

Zeile 1352: [J

Zeile 1353: " Poke[J

Zeile 1354: au BufNewFile,BufRead *.pk^I^I^Isetf poke[J

Zeile 1355: [J

Zeile 1356: " Protocols[J

Zeile 1357: au BufNewFile,BufRead */etc/protocols^I^Isetf protocols[J

Zeile 1358: [J

Zeile 1359: " Pyrex[J

Zeile 1360: au BufNewFile,BufRead *.pyx,*.pxd^I^Isetf pyrex[J

Zeile 1361: [J

Zeile 1362: " Python, Python Shell Startup and Python Stub Files[J

Zeile 1363: " Quixote (Python-based web framework)[J

Zeile 1364: au BufNewFile,BufRead *.py,*.pyw,.pythonstartup,.pythonrc  setf python[J

Zeile 1365: au BufNewFile,BufRead *.ptl,*.pyi,SConstruct^I^I   setf python[J

Zeile 1366: [J

Zeile 1367: " Radiance[J

Zeile 1368: au BufNewFile,BufRead *.rad,*.mat^I^Isetf radiance[J

Zeile 1369: [J

Zeile 1370: " Raku (formelly Perl6)[J

Zeile 1371: au BufNewFile,BufRead *.pm6,*.p6,*.t6,*.pod6,*.raku,*.rakumod,*.rakudoc,*.rakutest  setf raku[J

Zeile 1372: [J

Zeile 1373: " Ratpoison config/command files[J

Zeile 1374: au BufNewFile,BufRead .ratpoisonrc,ratpoisonrc^Isetf ratpoison[J

Zeile 1375: [J

Zeile 1376: " RCS file[J

Zeile 1377: au BufNewFile,BufRead *\,v^I^I^Isetf rcs[J

Zeile 1378: [J

Zeile 1379: " Readline[J

Zeile 1380: au BufNewFile,BufRead .inputrc,inputrc^I^Isetf readline[J

Zeile 1381: [J

Zeile 1382: " Registry for MS-Windows[J

Zeile 1383: au BufNewFile,BufRead *.reg if getline(1) =~? '^REGEDIT[0-9]*\s*$\|^Windows Registry Editor Version \d*\.\d*\s*$' | setf registry | endif[J

Zeile 1385: [J

Zeile 1386: " Renderman Interface Bytestream[J

Zeile 1387: au BufNewFile,BufRead *.rib^I^I^Isetf rib[J

Zeile 1388: [J

Zeile 1389: " Rego Policy Language[J

Zeile 1390: au BufNewFile,BufRead *.rego^I^I^Isetf rego[J

Zeile 1391: [J

Zeile 1392: " Rexx[J

Zeile 1393: au BufNewFile,BufRead *.rex,*.orx,*.rxo,*.rxj,*.jrexx,*.rexxj,*.rexx,*.testGroup,*.testUnit^Isetf rexx[J

Zeile 1394: [J

Zeile 1395: " R Help file[J

Zeile 1396: if has("fname_case")[J

Zeile 1397:   au BufNewFile,BufRead *.rd,*.Rd^I^Isetf rhelp[J

Zeile 1398: else[J

Zeile 1399:   au BufNewFile,BufRead *.rd^I^I^Isetf rhelp[J

Zeile 1400: endif[J

Zeile 1401: [J

Zeile 1402: " R noweb file[J

Zeile 1403: if has("fname_case")[J

Zeile 1404:   au BufNewFile,BufRead *.Rnw,*.rnw,*.Snw,*.snw^I^Isetf rnoweb[J

Zeile 1405: else[J

Zeile 1406:   au BufNewFile,BufRead *.rnw,*.snw^I^I^Isetf rnoweb[J

Zeile 1407: endif[J

Zeile 1408: [J

Zeile 1409: " R Markdown file[J

Zeile 1410: if has("fname_case")[J

Zeile 1411:   au BufNewFile,BufRead *.Rmd,*.rmd,*.Smd,*.smd^I^Isetf rmd[J

Zeile 1412: else[J

Zeile 1413:   au BufNewFile,BufRead *.rmd,*.smd^I^I^Isetf rmd[J

Zeile 1414: endif[J

Zeile 1415: [J

Zeile 1416: " RSS looks like XML[J

Zeile 1417: au BufNewFile,BufRead *.rss^I^I^I^Isetf xml[J

Zeile 1418: [J

Zeile 1419: " R reStructuredText file[J

Zeile 1420: if has("fname_case")[J

Zeile 1421:   au BufNewFile,BufRead *.Rrst,*.rrst,*.Srst,*.srst^Isetf rrst[J

Zeile 1422: else[J

Zeile 1423:   au BufNewFile,BufRead *.rrst,*.srst^I^I^Isetf rrst[J

Zeile 1424: endif[J

Zeile 1425: [J

Zeile 1426: " Rexx, Rebol or R[J

Zeile 1427: au BufNewFile,BufRead *.r,*.R^I^I^I^Icall dist#ft#FTr()[J

Zeile 1428: [J

Zeile 1429: " Remind[J

Zeile 1430: au BufNewFile,BufRead .reminders,*.remind,*.rem^I^Isetf remind[J

Zeile 1431: [J

Zeile 1432: " Resolv.conf[J

Zeile 1433: au BufNewFile,BufRead resolv.conf^I^Isetf resolv[J

Zeile 1434: [J

Zeile 1435: " Relax NG Compact[J

Zeile 1436: au BufNewFile,BufRead *.rnc^I^I^Isetf rnc[J

Zeile 1437: [J

Zeile 1438: " Relax NG XML[J

Zeile 1439: au BufNewFile,BufRead *.rng^I^I^Isetf rng[J

Zeile 1440: [J

Zeile 1441: " RPL/2[J

Zeile 1442: au BufNewFile,BufRead *.rpl^I^I^Isetf rpl[J

Zeile 1443: [J

Zeile 1444: " Robots.txt[J

Zeile 1445: au BufNewFile,BufRead robots.txt^I^Isetf robots[J

Zeile 1446: [J

Zeile 1447: " Rpcgen[J

Zeile 1448: au BufNewFile,BufRead *.x^I^I^Isetf rpcgen[J

Zeile 1449: [J

Zeile 1450: " reStructuredText Documentation Format[J

Zeile 1451: au BufNewFile,BufRead *.rst^I^I^Isetf rst[J

Zeile 1452: [J

Zeile 1453: " RTF[J

Zeile 1454: au BufNewFile,BufRead *.rtf^I^I^Isetf rtf[J

Zeile 1455: [J

Zeile 1456: " Interactive Ruby shell[J

Zeile 1457: au BufNewFile,BufRead .irbrc,irbrc^I^Isetf ruby[J

Zeile 1458: [J

Zeile 1459: " Ruby[J

Zeile 1460: au BufNewFile,BufRead *.rb,*.rbw^I^Isetf ruby[J

Zeile 1461: [J

Zeile 1462: " RubyGems[J

Zeile 1463: au BufNewFile,BufRead *.gemspec^I^I^Isetf ruby[J

Zeile 1464: [J

Zeile 1465: " RBS (Ruby Signature)[J

Zeile 1466: au BufNewFile,BufRead *.rbs^I^I^Isetf rbs[J

Zeile 1467: [J

Zeile 1468: " Rackup[J

Zeile 1469: au BufNewFile,BufRead *.ru^I^I^Isetf ruby[J

Zeile 1470: [J

Zeile 1471: " Bundler[J

Zeile 1472: au BufNewFile,BufRead Gemfile^I^I^Isetf ruby[J

Zeile 1473: [J

Zeile 1474: " Ruby on Rails[J

Zeile 1475: au BufNewFile,BufRead *.builder,*.rxml,*.rjs^Isetf ruby[J

Zeile 1476: [J

Zeile 1477: " Rantfile and Rakefile is like Ruby[J

Zeile 1478: au BufNewFile,BufRead [rR]antfile,*.rant,[rR]akefile,*.rake^Isetf ruby[J

Zeile 1479: [J

Zeile 1480: " Rust[J

Zeile 1481: au BufNewFile,BufRead *.rs^I^I^Isetf rust[J

Zeile 1482: [J

Zeile 1483: " S-lang (or shader language, or SmallLisp)[J

Zeile 1484: au BufNewFile,BufRead *.sl^I^I^Isetf slang[J

Zeile 1485: [J

Zeile 1486: " Samba config[J

Zeile 1487: au BufNewFile,BufRead smb.conf^I^I^Isetf samba[J

Zeile 1488: [J

Zeile 1489: " SAS script[J

Zeile 1490: au BufNewFile,BufRead *.sas^I^I^Isetf sas[J

Zeile 1491: [J

Zeile 1492: " Sass[J

Zeile 1493: au BufNewFile,BufRead *.sass^I^I^Isetf sass[J

Zeile 1494: [J

Zeile 1495: " Sather[J

Zeile 1496: au BufNewFile,BufRead *.sa^I^I^Isetf sather[J

Zeile 1497: [J

Zeile 1498: " Scala[J

Zeile 1499: au BufNewFile,BufRead *.scala^I^I^Isetf scala[J

Zeile 1500: [J

Zeile 1501: " SBT - Scala Build Tool[J

Zeile 1502: au BufNewFile,BufRead *.sbt^I^I^Isetf sbt[J

Zeile 1503: [J

Zeile 1504: " Scilab[J

Zeile 1505: au BufNewFile,BufRead *.sci,*.sce^I^Isetf scilab[J

Zeile 1506: [J

Zeile 1507: " SCSS[J

Zeile 1508: au BufNewFile,BufRead *.scss^I^I^Isetf scss[J

Zeile 1509: [J

Zeile 1510: " SD: Streaming Descriptors[J

Zeile 1511: au BufNewFile,BufRead *.sd^I^I^Isetf sd[J

Zeile 1512: [J

Zeile 1513: " SDL[J

Zeile 1514: au BufNewFile,BufRead *.sdl,*.pr^I^Isetf sdl[J

Zeile 1515: [J

Zeile 1516: " sed[J

Zeile 1517: au BufNewFile,BufRead *.sed^I^I^Isetf sed[J

Zeile 1518: [J

Zeile 1519: " svelte[J

Zeile 1520: au BufNewFile,BufRead *.svelte^I^I^Isetf svelte[J

Zeile 1521: [J

Zeile 1522: " Sieve (RFC 3028, 5228)[J

Zeile 1523: au BufNewFile,BufRead *.siv,*.sieve^I^Isetf sieve[J

Zeile 1524: [J

Zeile 1525: " Sendmail[J

Zeile 1526: au BufNewFile,BufRead sendmail.cf^I^Isetf sm[J

Zeile 1527: [J

Zeile 1528: " Sendmail .mc files are actually m4.  Could also be MS Message text file.[J

Zeile 1529: au BufNewFile,BufRead *.mc^I^I^Icall dist#ft#McSetf()[J

Zeile 1530: [J

Zeile 1531: " Services[J

Zeile 1532: au BufNewFile,BufRead */etc/services^I^Isetf services[J

Zeile 1533: [J

Zeile 1534: " Service Location config[J

Zeile 1535: au BufNewFile,BufRead */etc/slp.conf^I^Isetf slpconf[J

Zeile 1536: [J

Zeile 1537: " Service Location registration[J

Zeile 1538: au BufNewFile,BufRead */etc/slp.reg^I^Isetf slpreg[J

Zeile 1539: [J

Zeile 1540: " Service Location SPI[J

Zeile 1541: au BufNewFile,BufRead */etc/slp.spi^I^Isetf slpspi[J

Zeile 1542: [J

Zeile 1543: " Setserial config[J

Zeile 1544: au BufNewFile,BufRead */etc/serial.conf^I^Isetf setserial[J

Zeile 1545: [J

Zeile 1546: " SGML[J

Zeile 1547: au BufNewFile,BufRead *.sgm,*.sgml if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'linuxdoc' |   setf sgmllnx | elseif getline(1) =~ '<!DOCTYPE.*DocBook' || getline(2) =~ '<!DOCTYPE.*DocBook' |   let b:docbk_type = "sgml" |   let b:docbk_ver = 4 |   setf docbk | else |   setf sgml | endif[J

Zeile 1557: [J

Zeile 1558: " SGMLDECL[J

Zeile 1559: au BufNewFile,BufRead *.decl,*.dcl,*.dec if getline(1).getline(2).getline(3) =~? '^<!SGML' |    setf sgmldecl | endif[J

Zeile 1563: [J

Zeile 1564: " SGML catalog file[J

Zeile 1565: au BufNewFile,BufRead catalog^I^I^Isetf catalog[J

Zeile 1566: [J

Zeile 1567: " Shell scripts (sh, ksh, bash, bash2, csh); Allow .profile_foo etc.[J

Zeile 1568: " Gentoo ebuilds, Arch Linux PKGBUILDs and Alpine Linux APKBUILDs are actually[J

Zeile 1569: " bash scripts.[J

Zeile 1570: " NOTE: Patterns ending in a star are further down, these have lower priority.[J

Zeile 1571: au BufNewFile,BufRead .bashrc,bashrc,bash.bashrc,.bash[_-]profile,.bash[_-]logout,.bash[_-]aliases,bash-fc[-.],*.ebuild,PKGBUILD*,*.install,*.bash,*.eclass,PKGBUILD,APKBUILD call dist#ft#SetFileTypeSH("bash")[J

Zeile 1572: au BufNewFile,BufRead .kshrc,*.ksh call dist#ft#SetFileTypeSH("ksh")[J

Zeile 1573: au BufNewFile,BufRead */etc/profile,.profile,*.sh,*.env call dist#ft#SetFileTypeSH(getline(1))[J

Zeile 1574: [J

Zeile 1575: " Shell script (Arch Linux) or PHP file (Drupal)[J

Zeile 1576: au BufNewFile,BufRead *.install if getline(1) =~ '<?php' |   setf php | else |   call dist#ft#SetFileTypeSH("bash") | endif[J

Zeile 1582: [J

Zeile 1583: " tcsh scripts (patterns ending in a star further below)[J

Zeile 1584: au BufNewFile,BufRead .tcshrc,*.tcsh,tcsh.tcshrc,tcsh.login^Icall dist#ft#SetFileTypeShell("tcsh")[J

Zeile 1585: [J

Zeile 1586: " csh scripts, but might also be tcsh scripts (on some systems csh is tcsh)[J

Zeile 1587: " (patterns ending in a start further below)[J

Zeile 1588: au BufNewFile,BufRead .login,.cshrc,csh.cshrc,csh.login,csh.logout,*.csh,.alias  call dist#ft#CSH()[J

Zeile 1589: [J

Zeile 1590: " Z-Shell script (patterns ending in a star further below)[J

Zeile 1591: au BufNewFile,BufRead .zprofile,*/etc/zprofile,.zfbfmarks  setf zsh[J

Zeile 1592: au BufNewFile,BufRead .zshrc,.zshenv,.zlogin,.zlogout,.zcompdump setf zsh[J

Zeile 1593: au BufNewFile,BufRead *.zsh^I^I^Isetf zsh[J

Zeile 1594: [J

Zeile 1595: " Scheme[J

Zeile 1596: au BufNewFile,BufRead *.scm,*.ss,*.rkt^I^Isetf scheme[J

Zeile 1597: [J

Zeile 1598: " Screen RC[J

Zeile 1599: au BufNewFile,BufRead .screenrc,screenrc^Isetf screen[J

Zeile 1600: [J

Zeile 1601: " Sexplib[J

Zeile 1602: au BufNewFile,BufRead *.sexp setf sexplib[J

Zeile 1603: [J

Zeile 1604: " Simula[J

Zeile 1605: au BufNewFile,BufRead *.sim^I^I^Isetf simula[J

Zeile 1606: [J

Zeile 1607: " SINDA[J

Zeile 1608: au BufNewFile,BufRead *.sin,*.s85^I^Isetf sinda[J

Zeile 1609: [J

Zeile 1610: " SiSU[J

Zeile 1611: au BufNewFile,BufRead *.sst,*.ssm,*.ssi,*.-sst,*._sst setf sisu[J

Zeile 1612: au BufNewFile,BufRead *.sst.meta,*.-sst.meta,*._sst.meta setf sisu[J

Zeile 1613: [J

Zeile 1614: " SKILL[J

Zeile 1615: au BufNewFile,BufRead *.il,*.ils,*.cdf^I^Isetf skill[J

Zeile 1616: [J

Zeile 1617: " SLRN[J

Zeile 1618: au BufNewFile,BufRead .slrnrc^I^I^Isetf slrnrc[J

Zeile 1619: au BufNewFile,BufRead *.score^I^I^Isetf slrnsc[J

Zeile 1620: [J

Zeile 1621: " Smalltalk (and TeX)[J

Zeile 1622: au BufNewFile,BufRead *.st^I^I^Isetf st[J

Zeile 1623: au BufNewFile,BufRead *.cls if getline(1) =~ '^%' |  setf tex | elseif getline(1)[0] == '#' && getline(1) =~ 'rexx' |  setf rexx | else |  setf st | endif[J

Zeile 1631: [J

Zeile 1632: " Smarty templates[J

Zeile 1633: au BufNewFile,BufRead *.tpl^I^I^Isetf smarty[J

Zeile 1634: [J

Zeile 1635: " SMIL or XML[J

Zeile 1636: au BufNewFile,BufRead *.smil if getline(1) =~ '<?\s*xml.*?>' |   setf xml | else |   setf smil | endif[J

Zeile 1642: [J

Zeile 1643: " SMIL or SNMP MIB file[J

Zeile 1644: au BufNewFile,BufRead *.smi if getline(1) =~ '\<smil\>' |   setf smil | else |   setf mib | endif[J

Zeile 1650: [J

Zeile 1651: " SMITH[J

Zeile 1652: au BufNewFile,BufRead *.smt,*.smith^I^Isetf smith[J

Zeile 1653: [J

Zeile 1654: " Snobol4 and spitbol[J

Zeile 1655: au BufNewFile,BufRead *.sno,*.spt^I^Isetf snobol4[J

Zeile 1656: [J

Zeile 1657: " SNMP MIB files[J

Zeile 1658: au BufNewFile,BufRead *.mib,*.my^I^Isetf mib[J

Zeile 1659: [J

Zeile 1660: " Snort Configuration[J

Zeile 1661: au BufNewFile,BufRead *.hog,snort.conf,vision.conf^Isetf hog[J

Zeile 1662: au BufNewFile,BufRead *.rules^I^I^Icall dist#ft#FTRules()[J

Zeile 1663: [J

Zeile 1664: " SPARQL queries[J

Zeile 1665: au BufNewFile,BufRead *.rq,*.sparql^I^Isetf sparql[J

Zeile 1666: [J

Zeile 1667: " Spec (Linux RPM)[J

Zeile 1668: au BufNewFile,BufRead *.spec^I^I^Isetf spec[J

Zeile 1669: [J

Zeile 1670: " Speedup (AspenTech plant simulator)[J

Zeile 1671: au BufNewFile,BufRead *.speedup,*.spdata,*.spd^Isetf spup[J

Zeile 1672: [J

Zeile 1673: " Slice[J

Zeile 1674: au BufNewFile,BufRead *.ice^I^I^Isetf slice[J

Zeile 1675: [J

Zeile 1676: " Spice[J

Zeile 1677: au BufNewFile,BufRead *.sp,*.spice^I^Isetf spice[J

Zeile 1678: [J

Zeile 1679: " Spyce[J

Zeile 1680: au BufNewFile,BufRead *.spy,*.spi^I^Isetf spyce[J

Zeile 1681: [J

Zeile 1682: " Squid[J

Zeile 1683: au BufNewFile,BufRead squid.conf^I^Isetf squid[J

Zeile 1684: [J

Zeile 1685: " SQL for Oracle Designer[J

Zeile 1686: au BufNewFile,BufRead *.tyb,*.typ,*.tyc,*.pkb,*.pks^Isetf sql[J

Zeile 1687: [J

Zeile 1688: " SQL[J

Zeile 1689: au BufNewFile,BufRead *.sql^I^I^Icall dist#ft#SQL()[J

Zeile 1690: [J

Zeile 1691: " SQLJ[J

Zeile 1692: au BufNewFile,BufRead *.sqlj^I^I^Isetf sqlj[J

Zeile 1693: [J

Zeile 1694: " SQR[J

Zeile 1695: au BufNewFile,BufRead *.sqr,*.sqi^I^Isetf sqr[J

Zeile 1696: [J

Zeile 1697: " OpenSSH configuration[J

Zeile 1698: au BufNewFile,BufRead ssh_config,*/.ssh/config^I^Isetf sshconfig[J

Zeile 1699: au BufNewFile,BufRead */etc/ssh/ssh_config.d/*.conf^Isetf sshconfig[J

Zeile 1700: [J

Zeile 1701: " OpenSSH server configuration[J

Zeile 1702: au BufNewFile,BufRead sshd_config^I^I^Isetf sshdconfig[J

Zeile 1703: au BufNewFile,BufRead */etc/ssh/sshd_config.d/*.conf^Isetf sshdconfig[J

Zeile 1704: [J

Zeile 1705: " Stata[J

Zeile 1706: au BufNewFile,BufRead *.ado,*.do,*.imata,*.mata^Isetf stata[J

Zeile 1707: " Also *.class, but not when it's a Java bytecode file[J

Zeile 1708: au BufNewFile,BufRead *.class if getline(1) !~ "^\xca\xfe\xba\xbe" | setf stata | endif[J

Zeile 1710: [J

Zeile 1711: " SMCL[J

Zeile 1712: au BufNewFile,BufRead *.hlp,*.ihlp,*.smcl^Isetf smcl[J

Zeile 1713: [J

Zeile 1714: " Stored Procedures[J

Zeile 1715: au BufNewFile,BufRead *.stp^I^I^Isetf stp[J

Zeile 1716: [J

Zeile 1717: " Standard ML[J

Zeile 1718: au BufNewFile,BufRead *.sml^I^I^Isetf sml[J

Zeile 1719: [J

Zeile 1720: " Sratus VOS command macro[J

Zeile 1721: au BufNewFile,BufRead *.cm^I^I^Isetf voscm[J

Zeile 1722: [J

Zeile 1723: " Swift[J

Zeile 1724: au BufNewFile,BufRead *.swift^I^I^Isetf swift[J

Zeile 1725: au BufNewFile,BufRead *.swift.gyb^I^Isetf swiftgyb[J

Zeile 1726: [J

Zeile 1727: " Swift Intermediate Language[J

Zeile 1728: au BufNewFile,BufRead *.sil^I^I^Isetf sil[J

Zeile 1729: [J

Zeile 1730: " Sysctl[J

Zeile 1731: au BufNewFile,BufRead */etc/sysctl.conf,*/etc/sysctl.d/*.conf^Isetf sysctl[J

Zeile 1732: [J

Zeile 1733: " Systemd unit files[J

Zeile 1734: au BufNewFile,BufRead */systemd/*.{automount,dnssd,link,mount,netdev,network,nspawn,path,service,slice,socket,swap,target,timer}^Isetf systemd[J

Zeile 1735: " Systemd overrides[J

Zeile 1736: au BufNewFile,BufRead */etc/systemd/*.conf.d/*.conf^Isetf systemd[J

Zeile 1737: au BufNewFile,BufRead */etc/systemd/system/*.d/*.conf^Isetf systemd[J

Zeile 1738: au BufNewFile,BufRead */.config/systemd/user/*.d/*.conf^Isetf systemd[J

Zeile 1739: " Systemd temp files[J

Zeile 1740: au BufNewFile,BufRead */etc/systemd/system/*.d/.#*^Isetf systemd[J

Zeile 1741: au BufNewFile,BufRead */etc/systemd/system/.#*^I^Isetf systemd[J

Zeile 1742: au BufNewFile,BufRead */.config/systemd/user/*.d/.#*^Isetf systemd[J

Zeile 1743: au BufNewFile,BufRead */.config/systemd/user/.#*^Isetf systemd[J

Zeile 1744: [J

Zeile 1745: " Synopsys Design Constraints[J

Zeile 1746: au BufNewFile,BufRead *.sdc^I^I^Isetf sdc[J

Zeile 1747: [J

Zeile 1748: " Sudoers[J

Zeile 1749: au BufNewFile,BufRead */etc/sudoers,sudoers.tmp^Isetf sudoers[J

Zeile 1750: [J

Zeile 1751: " SVG (Scalable Vector Graphics)[J

Zeile 1752: au BufNewFile,BufRead *.svg^I^I^Isetf svg[J

Zeile 1753: [J

Zeile 1754: " Tads (or Nroff or Perl test file)[J

Zeile 1755: au BufNewFile,BufRead *.t if !dist#ft#FTnroff() && !dist#ft#FTperl() | setf tads | endif[J

Zeile 1757: [J

Zeile 1758: " Tags[J

Zeile 1759: au BufNewFile,BufRead tags^I^I^Isetf tags[J

Zeile 1760: [J

Zeile 1761: " TAK[J

Zeile 1762: au BufNewFile,BufRead *.tak^I^I^Isetf tak[J

Zeile 1763: [J

Zeile 1764: " Task[J

Zeile 1765: au BufRead,BufNewFile {pending,completed,undo}.data  setf taskdata[J

Zeile 1766: au BufRead,BufNewFile *.task^I^I^Isetf taskedit[J

Zeile 1767: [J

Zeile 1768: " Tcl (JACL too)[J

Zeile 1769: au BufNewFile,BufRead *.tcl,*.tk,*.itcl,*.itk,*.jacl^Isetf tcl[J

Zeile 1770: [J

Zeile 1771: " TealInfo[J

Zeile 1772: au BufNewFile,BufRead *.tli^I^I^Isetf tli[J

Zeile 1773: [J

Zeile 1774: " Telix Salt[J

Zeile 1775: au BufNewFile,BufRead *.slt^I^I^Isetf tsalt[J

Zeile 1776: [J

Zeile 1777: " Tera Term Language or Turtle[J

Zeile 1778: au BufRead,BufNewFile *.ttl if getline(1) =~ '^@\?\(prefix\|base\)' |   setf turtle | else |   setf teraterm | endif[J

Zeile 1784: [J

Zeile 1785: " Terminfo[J

Zeile 1786: au BufNewFile,BufRead *.ti^I^I^Isetf terminfo[J

Zeile 1787: [J

Zeile 1788: " TeX[J

Zeile 1789: au BufNewFile,BufRead *.latex,*.sty,*.dtx,*.ltx,*.bbl^Isetf tex[J

Zeile 1790: au BufNewFile,BufRead *.tex^I^I^Icall dist#ft#FTtex()[J

Zeile 1791: [J

Zeile 1792: " ConTeXt[J

Zeile 1793: au BufNewFile,BufRead *.mkii,*.mkiv,*.mkvi,*.mkxl,*.mklx   setf context[J

Zeile 1794: [J

Zeile 1795: " Texinfo[J

Zeile 1796: au BufNewFile,BufRead *.texinfo,*.texi,*.txi^Isetf texinfo[J

Zeile 1797: [J

Zeile 1798: " TeX configuration[J

Zeile 1799: au BufNewFile,BufRead texmf.cnf^I^I^Isetf texmf[J

Zeile 1800: [J

Zeile 1801: " Tidy config[J

Zeile 1802: au BufNewFile,BufRead .tidyrc,tidyrc,tidy.conf^Isetf tidy[J

Zeile 1803: [J

Zeile 1804: " TF mud client[J

Zeile 1805: au BufNewFile,BufRead *.tf,.tfrc,tfrc^I^Isetf tf[J

Zeile 1806: [J

Zeile 1807: " tmux configuration[J

Zeile 1808: au BufNewFile,BufRead {.,}tmux*.conf^I^Isetf tmux[J

Zeile 1809: [J

Zeile 1810: " TOML[J

Zeile 1811: au BufNewFile,BufRead *.toml^I^I^Isetf toml[J

Zeile 1812: [J

Zeile 1813: " TPP - Text Presentation Program[J

Zeile 1814: au BufNewFile,BufReadPost *.tpp^I^I^Isetf tpp[J

Zeile 1815: [J

Zeile 1816: " Treetop[J

Zeile 1817: au BufRead,BufNewFile *.treetop^I^I^Isetf treetop[J

Zeile 1818: [J

Zeile 1819: " Trustees[J

Zeile 1820: au BufNewFile,BufRead trustees.conf^I^Isetf trustees[J

Zeile 1821: [J

Zeile 1822: " TSS - Geometry[J

Zeile 1823: au BufNewFile,BufReadPost *.tssgm^I^Isetf tssgm[J

Zeile 1824: [J

Zeile 1825: " TSS - Optics[J

Zeile 1826: au BufNewFile,BufReadPost *.tssop^I^Isetf tssop[J

Zeile 1827: [J

Zeile 1828: " TSS - Command Line (temporary)[J

Zeile 1829: au BufNewFile,BufReadPost *.tsscl^I^Isetf tsscl[J

Zeile 1830: [J

Zeile 1831: " TWIG files[J

Zeile 1832: au BufNewFile,BufReadPost *.twig^I^Isetf twig[J

Zeile 1833: [J

Zeile 1834: " Typescript or Qt translation file (which is XML)[J

Zeile 1835: au BufNewFile,BufReadPost *.ts if getline(1) =~ '<?xml' |   setf xml | else |   setf typescript | endif[J

Zeile 1841: [J

Zeile 1842: " TypeScript with React[J

Zeile 1843: au BufNewFile,BufRead *.tsx^I^I^Isetf typescriptreact[J

Zeile 1844: [J

Zeile 1845: " Motif UIT/UIL files[J

Zeile 1846: au BufNewFile,BufRead *.uit,*.uil^I^Isetf uil[J

Zeile 1847: [J

Zeile 1848: " Udev conf[J

Zeile 1849: au BufNewFile,BufRead */etc/udev/udev.conf^Isetf udevconf[J

Zeile 1850: [J

Zeile 1851: " Udev permissions[J

Zeile 1852: au BufNewFile,BufRead */etc/udev/permissions.d/*.permissions setf udevperm[J

Zeile 1853: "[J

Zeile 1854: " Udev symlinks config[J

Zeile 1855: au BufNewFile,BufRead */etc/udev/cdsymlinks.conf^Isetf sh[J

Zeile 1856: [J

Zeile 1857: " UnrealScript[J

Zeile 1858: au BufNewFile,BufRead *.uc^I^I^Isetf uc[J

Zeile 1859: [J

Zeile 1860: " Updatedb[J

Zeile 1861: au BufNewFile,BufRead */etc/updatedb.conf^Isetf updatedb[J

Zeile 1862: [J

Zeile 1863: " Upstart (init(8)) config files[J

Zeile 1864: au BufNewFile,BufRead */usr/share/upstart/*.conf^I       setf upstart[J

Zeile 1865: au BufNewFile,BufRead */usr/share/upstart/*.override^I       setf upstart[J

Zeile 1866: au BufNewFile,BufRead */etc/init/*.conf,*/etc/init/*.override  setf upstart[J

Zeile 1867: au BufNewFile,BufRead */.init/*.conf,*/.init/*.override^I       setf upstart[J

Zeile 1868: au BufNewFile,BufRead */.config/upstart/*.conf^I^I       setf upstart[J

Zeile 1869: au BufNewFile,BufRead */.config/upstart/*.override^I       setf upstart[J

Zeile 1870: [J

Zeile 1871: " Vera[J

Zeile 1872: au BufNewFile,BufRead *.vr,*.vri,*.vrh^I^Isetf vera[J

Zeile 1873: [J

Zeile 1874: " Verilog HDL[J

Zeile 1875: au BufNewFile,BufRead *.v^I^I^Isetf verilog[J

Zeile 1876: [J

Zeile 1877: " Verilog-AMS HDL[J

Zeile 1878: au BufNewFile,BufRead *.va,*.vams^I^Isetf verilogams[J

Zeile 1879: [J

Zeile 1880: " SystemVerilog[J

Zeile 1881: au BufNewFile,BufRead *.sv,*.svh^I^Isetf systemverilog[J

Zeile 1882: [J

Zeile 1883: " VHDL[J

Zeile 1884: au BufNewFile,BufRead *.hdl,*.vhd,*.vhdl,*.vbe,*.vst,*.vho  setf vhdl[J

Zeile 1885: [J

Zeile 1886: " Vim script[J

Zeile 1887: au BufNewFile,BufRead *.vim,*.vba,.exrc,_exrc^Isetf vim[J

Zeile 1888: [J

Zeile 1889: " Viminfo file[J

Zeile 1890: au BufNewFile,BufRead .viminfo,_viminfo^I^Isetf viminfo[J

Zeile 1891: [J

Zeile 1892: " Virata Config Script File or Drupal module[J

Zeile 1893: au BufRead,BufNewFile *.hw,*.module,*.pkg if getline(1) =~ '<?php' |   setf php | else |   setf virata | endif[J

Zeile 1899: [J

Zeile 1900: " Visual Basic (also uses *.bas) or FORM[J

Zeile 1901: au BufNewFile,BufRead *.frm^I^I^Icall dist#ft#FTVB("form")[J

Zeile 1902: [J

Zeile 1903: " SaxBasic is close to Visual Basic[J

Zeile 1904: au BufNewFile,BufRead *.sba^I^I^Isetf vb[J

Zeile 1905: [J

Zeile 1906: " Vgrindefs file[J

Zeile 1907: au BufNewFile,BufRead vgrindefs^I^I^Isetf vgrindefs[J

Zeile 1908: [J

Zeile 1909: " VRML V1.0c[J

Zeile 1910: au BufNewFile,BufRead *.wrl^I^I^Isetf vrml[J

Zeile 1911: [J

Zeile 1912: " Vroom (vim testing and executable documentation)[J

Zeile 1913: au BufNewFile,BufRead *.vroom^I^I^Isetf vroom[J

Zeile 1914: [J

Zeile 1915: " Vue.js Single File Component[J

Zeile 1916: au BufNewFile,BufRead *.vue^I^I^Isetf vue[J

Zeile 1917: [J

Zeile 1918: " WebAssembly[J

Zeile 1919: au BufNewFile,BufRead *.wast,*.wat^I^Isetf wast[J

Zeile 1920: [J

Zeile 1921: " Webmacro[J

Zeile 1922: au BufNewFile,BufRead *.wm^I^I^Isetf webmacro[J

Zeile 1923: [J

Zeile 1924: " Wget config[J

Zeile 1925: au BufNewFile,BufRead .wgetrc,wgetrc^I^Isetf wget[J

Zeile 1926: [J

Zeile 1927: " Website MetaLanguage[J

Zeile 1928: au BufNewFile,BufRead *.wml^I^I^Isetf wml[J

Zeile 1929: [J

Zeile 1930: " Winbatch[J

Zeile 1931: au BufNewFile,BufRead *.wbt^I^I^Isetf winbatch[J

Zeile 1932: [J

Zeile 1933: " WSML[J

Zeile 1934: au BufNewFile,BufRead *.wsml^I^I^Isetf wsml[J

Zeile 1935: [J

Zeile 1936: " WPL[J

Zeile 1937: au BufNewFile,BufRead *.wpl^I^I^Isetf xml[J

Zeile 1938: [J

Zeile 1939: " WvDial[J

Zeile 1940: au BufNewFile,BufRead wvdial.conf,.wvdialrc^Isetf wvdial[J

Zeile 1941: [J

Zeile 1942: " CVS RC file[J

Zeile 1943: au BufNewFile,BufRead .cvsrc^I^I^Isetf cvsrc[J

Zeile 1944: [J

Zeile 1945: " CVS commit file[J

Zeile 1946: au BufNewFile,BufRead cvs\d\+^I^I^Isetf cvs[J

Zeile 1947: [J

Zeile 1948: " WEB (*.web is also used for Winbatch: Guess, based on expecting "%" comment[J

Zeile 1949: " lines in a WEB file).[J

Zeile 1950: au BufNewFile,BufRead *.web if getline(1)[0].getline(2)[0].getline(3)[0].getline(4)[0].getline(5)[0] =~ "%" |   setf web | else |   setf winbatch | endif[J

Zeile 1956: [J

Zeile 1957: " Windows Scripting Host and Windows Script Component[J

Zeile 1958: au BufNewFile,BufRead *.ws[fc]^I^I^Isetf wsh[J

Zeile 1959: [J

Zeile 1960: " XHTML[J

Zeile 1961: au BufNewFile,BufRead *.xhtml,*.xht^I^Isetf xhtml[J

Zeile 1962: [J

Zeile 1963: " X Pixmap (dynamically sets colors, use BufEnter to make it work better)[J

Zeile 1964: au BufEnter *.xpm if getline(1) =~ "XPM2" |   setf xpm2 | else |   setf xpm | endif[J

Zeile 1970: au BufEnter *.xpm2^I^I^I^Isetf xpm2[J

Zeile 1971: [J

Zeile 1972: " XFree86 config[J

Zeile 1973: au BufNewFile,BufRead XF86Config if getline(1) =~ '\<XConfigurator\>' |   let b:xf86conf_xfree86_version = 3 | endif | setf xf86conf[J

Zeile 1978: au BufNewFile,BufRead */xorg.conf.d/*.conf let b:xf86conf_xfree86_version = 4 | setf xf86conf[J

Zeile 1981: [J

Zeile 1982: " Xorg config[J

Zeile 1983: au BufNewFile,BufRead xorg.conf,xorg.conf-4^Ilet b:xf86conf_xfree86_version = 4 | setf xf86conf[J

Zeile 1984: [J

Zeile 1985: " Xinetd conf[J

Zeile 1986: au BufNewFile,BufRead */etc/xinetd.conf^I^Isetf xinetd[J

Zeile 1987: [J

Zeile 1988: " XS Perl extension interface language[J

Zeile 1989: au BufNewFile,BufRead *.xs^I^I^Isetf xs[J

Zeile 1990: [J

Zeile 1991: " X resources file[J

Zeile 1992: au BufNewFile,BufRead .Xdefaults,.Xpdefaults,.Xresources,xdm-config,*.ad setf xdefaults[J

Zeile 1993: [J

Zeile 1994: " Xmath[J

Zeile 1995: au BufNewFile,BufRead *.msc,*.msf^I^Isetf xmath[J

Zeile 1996: au BufNewFile,BufRead *.ms if !dist#ft#FTnroff() | setf xmath | endif[J

Zeile 1998: [J

Zeile 1999: " XML  specific variants: docbk and xbl[J

Zeile 2000: au BufNewFile,BufRead *.xml^I^I^Icall dist#ft#FTxml()[J

Zeile 2001: [J

Zeile 2002: " XMI (holding UML models) is also XML[J

Zeile 2003: au BufNewFile,BufRead *.xmi^I^I^Isetf xml[J

Zeile 2004: [J

Zeile 2005: " CSPROJ files are Visual Studio.NET's XML-based project config files[J

Zeile 2006: au BufNewFile,BufRead *.csproj,*.csproj.user^Isetf xml[J

Zeile 2007: [J

Zeile 2008: " Qt Linguist translation source and Qt User Interface Files are XML[J

Zeile 2009: " However, for .ts Typescript is more common.[J

Zeile 2010: au BufNewFile,BufRead *.ui^I^I^Isetf xml[J

Zeile 2011: [J

Zeile 2012: " TPM's are RDF-based descriptions of TeX packages (Nikolai Weibull)[J

Zeile 2013: au BufNewFile,BufRead *.tpm^I^I^Isetf xml[J

Zeile 2014: [J

Zeile 2015: " Xdg menus[J

Zeile 2016: au BufNewFile,BufRead */etc/xdg/menus/*.menu^Isetf xml[J

Zeile 2017: [J

Zeile 2018: " ATI graphics driver configuration[J

Zeile 2019: au BufNewFile,BufRead fglrxrc^I^I^Isetf xml[J

Zeile 2020: [J

Zeile 2021: " Web Services Description Language (WSDL)[J

Zeile 2022: au BufNewFile,BufRead *.wsdl^I^I^Isetf xml[J

Zeile 2023: [J

Zeile 2024: " XLIFF (XML Localisation Interchange File Format) is also XML[J

Zeile 2025: au BufNewFile,BufRead *.xlf^I^I^Isetf xml[J

Zeile 2026: au BufNewFile,BufRead *.xliff^I^I^Isetf xml[J

Zeile 2027: [J

Zeile 2028: " XML User Interface Language[J

Zeile 2029: au BufNewFile,BufRead *.xul^I^I^Isetf xml[J

Zeile 2030: [J

Zeile 2031: " X11 xmodmap (also see below)[J

Zeile 2032: au BufNewFile,BufRead *Xmodmap^I^I^Isetf xmodmap[J

Zeile 2033: [J

Zeile 2034: " Xquery[J

Zeile 2035: au BufNewFile,BufRead *.xq,*.xql,*.xqm,*.xquery,*.xqy^Isetf xquery[J

Zeile 2036: [J

Zeile 2037: " XSD[J

Zeile 2038: au BufNewFile,BufRead *.xsd^I^I^Isetf xsd[J

Zeile 2039: [J

Zeile 2040: " Xslt[J

Zeile 2041: au BufNewFile,BufRead *.xsl,*.xslt^I^Isetf xslt[J

Zeile 2042: [J

Zeile 2043: " Yacc[J

Zeile 2044: au BufNewFile,BufRead *.yy,*.yxx,*.y++^I^Isetf yacc[J

Zeile 2045: [J

Zeile 2046: " Yacc or racc[J

Zeile 2047: au BufNewFile,BufRead *.y^I^I^Icall dist#ft#FTy()[J

Zeile 2048: [J

Zeile 2049: " Yaml[J

Zeile 2050: au BufNewFile,BufRead *.yaml,*.yml^I^Isetf yaml[J

Zeile 2051: [J

Zeile 2052: " Raml[J

Zeile 2053: au BufNewFile,BufRead *.raml^I^I^Isetf raml[J

Zeile 2054: [J

Zeile 2055: " yum conf (close enough to dosini)[J

Zeile 2056: au BufNewFile,BufRead */etc/yum.conf^I^Isetf dosini[J

Zeile 2057: [J

Zeile 2058: " Zimbu[J

Zeile 2059: au BufNewFile,BufRead *.zu^I^I^Isetf zimbu[J

Zeile 2060: " Zimbu Templates[J

Zeile 2061: au BufNewFile,BufRead *.zut^I^I^Isetf zimbutempl[J

Zeile 2062: [J

Zeile 2063: " Zope[J

Zeile 2064: "   dtml (zope dynamic template markup language), pt (zope page template),[J

Zeile 2065: "   cpt (zope form controller page template)[J

Zeile 2066: au BufNewFile,BufRead *.dtml,*.pt,*.cpt^I^Icall dist#ft#FThtml()[J

Zeile 2067: "   zsql (zope sql method)[J

Zeile 2068: au BufNewFile,BufRead *.zsql^I^I^Icall dist#ft#SQL()[J

Zeile 2069: [J

Zeile 2070: " Z80 assembler asz80[J

Zeile 2071: au BufNewFile,BufRead *.z8a^I^I^Isetf z8a[J

Zeile 2072: [J

Zeile 2073: augroup END[J

Zeile 2074: [J

Zeile 2075: [J

Zeile 2076: " Source the user-specified filetype file, for backwards compatibility with[J

Zeile 2077: " Vim 5.x.[J

Zeile 2078: if exists("myfiletypefile") && filereadable(expand(myfiletypefile))[J

Zeile 2079:   execute "source " . myfiletypefile[J

Zeile 2080: endif[J

Zeile 2081: [J

Zeile 2082: [J

Zeile 2083: " Check for "*" after loading myfiletypefile, so that scripts.vim is only used[J

Zeile 2084: " when there are no matching file name extensions.[J

Zeile 2085: " Don't do this for compressed files.[J

Zeile 2086: augroup filetypedetect[J

Zeile 2087: au BufNewFile,BufRead * if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif[J

Zeile 2090: au StdinReadPost * if !did_filetype() | runtime! scripts.vim | endif[J

Zeile 2091: [J

Zeile 2092: [J

Zeile 2093: " Extra checks for when no filetype has been detected now.  Mostly used for[J

Zeile 2094: " patterns that end in "*".  E.g., "zsh*" matches "zsh.vim", but that's a Vim[J

Zeile 2095: " script file.[J

Zeile 2096: " Most of these should call s:StarSetf() to avoid names ending in .gz and the[J

Zeile 2097: " like are used.[J

Zeile 2098: [J

Zeile 2099: " More Apache style config files[J

Zeile 2100: au BufNewFile,BufRead */etc/proftpd/*.conf*,*/etc/proftpd/conf.*/*^Icall s:StarSetf('apachestyle')[J

Zeile 2101: au BufNewFile,BufRead proftpd.conf*^I^I^I^I^Icall s:StarSetf('apachestyle')[J

Zeile 2102: [J

Zeile 2103: " More Apache config files[J

Zeile 2104: au BufNewFile,BufRead access.conf*,apache.conf*,apache2.conf*,httpd.conf*,srm.conf*^Icall s:StarSetf('apache')[J

Zeile 2105: au BufNewFile,BufRead */etc/apache2/*.conf*,*/etc/apache2/conf.*/*,*/etc/apache2/mods-*/*,*/etc/apache2/sites-*/*,*/etc/httpd/conf.d/*.conf*^I^Icall s:StarSetf('apache')[J

Zeile 2106: [J

Zeile 2107: " Asterisk config file[J

Zeile 2108: au BufNewFile,BufRead *asterisk/*.conf*^I^Icall s:StarSetf('asterisk')[J

Zeile 2109: au BufNewFile,BufRead *asterisk*/*voicemail.conf* call s:StarSetf('asteriskvm')[J

Zeile 2110: [J

Zeile 2111: " Bazaar version control[J

Zeile 2112: au BufNewFile,BufRead bzr_log.*^I^I^Isetf bzr[J

Zeile 2113: [J

Zeile 2114: " Bazel build file[J

Zeile 2115: if !has("fname_case")[J

Zeile 2116:   au BufNewFile,BufRead *.BUILD,BUILD^I^Isetf bzl[J

Zeile 2117: endif[J

Zeile 2118: [J

Zeile 2119: " BIND zone[J

Zeile 2120: au BufNewFile,BufRead */named/db.*,*/bind/db.*^Icall s:StarSetf('bindzone')[J

Zeile 2121: [J

Zeile 2122: au BufNewFile,BufRead cabal.project.*^I^Icall s:StarSetf('cabalproject')[J

Zeile 2123: [J

Zeile 2124: " Calendar[J

Zeile 2125: au BufNewFile,BufRead */.calendar/*,*/share/calendar/*/calendar.*,*/share/calendar/calendar.*^I^I^I^I^Icall s:StarSetf('calendar')[J

Zeile 2128: [J

Zeile 2129: " Changelog[J

Zeile 2130: au BufNewFile,BufRead [cC]hange[lL]og* if getline(1) =~ '; urgency='|  call s:StarSetf('debchangelog')|else|  call s:StarSetf('changelog')|endif[J

Zeile 2136: [J

Zeile 2137: " Crontab[J

Zeile 2138: au BufNewFile,BufRead crontab,crontab.*,*/etc/cron.d/*^I^Icall s:StarSetf('crontab')[J

Zeile 2139: [J

Zeile 2140: " dnsmasq(8) configuration[J

Zeile 2141: au BufNewFile,BufRead */etc/dnsmasq.d/*^I^Icall s:StarSetf('dnsmasq')[J

Zeile 2142: [J

Zeile 2143: " Dracula[J

Zeile 2144: au BufNewFile,BufRead drac.*^I^I^Icall s:StarSetf('dracula')[J

Zeile 2145: [J

Zeile 2146: " Fvwm[J

Zeile 2147: au BufNewFile,BufRead */.fvwm/*^I^I^Icall s:StarSetf('fvwm')[J

Zeile 2148: au BufNewFile,BufRead *fvwmrc*,*fvwm95*.hook let b:fvwm_version = 1 | call s:StarSetf('fvwm')[J

Zeile 2150: au BufNewFile,BufRead *fvwm2rc* if expand("<afile>:e") == "m4"|  call s:StarSetf('fvwm2m4')|else|  let b:fvwm_version = 2 | call s:StarSetf('fvwm')|endif[J

Zeile 2156: [J

Zeile 2157: " Gedcom[J

Zeile 2158: au BufNewFile,BufRead */tmp/lltmp*^I^Icall s:StarSetf('gedcom')[J

Zeile 2159: [J

Zeile 2160: " Git[J

Zeile 2161: au BufNewFile,BufRead */.gitconfig.d/*,/etc/gitconfig.d/*^Icall s:StarSetf('gitconfig')[J

Zeile 2162: [J

Zeile 2163: " Gitolite[J

Zeile 2164: au BufNewFile,BufRead */gitolite-admin/conf/*^Icall s:StarSetf('gitolite')[J

Zeile 2165: [J

Zeile 2166: " GTK RC[J

Zeile 2167: au BufNewFile,BufRead .gtkrc*,gtkrc*^I^Icall s:StarSetf('gtkrc')[J

Zeile 2168: [J

Zeile 2169: " Jam[J

Zeile 2170: au BufNewFile,BufRead Prl*.*,JAM*.*^I^Icall s:StarSetf('jam')[J

Zeile 2171: [J

Zeile 2172: " Jargon[J

Zeile 2173: au! BufNewFile,BufRead *jarg* if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'THIS IS THE JARGON FILE'|  call s:StarSetf('jargon')|endif[J

Zeile 2177: [J

Zeile 2178: " Java Properties resource file (note: doesn't catch font.properties.pl)[J

Zeile 2179: au BufNewFile,BufRead *.properties_??_??_*^Icall s:StarSetf('jproperties')[J

Zeile 2180: [J

Zeile 2181: " Kconfig[J

Zeile 2182: au BufNewFile,BufRead Kconfig.*^I^I^Icall s:StarSetf('kconfig')[J

Zeile 2183: [J

Zeile 2184: " Lilo: Linux loader[J

Zeile 2185: au BufNewFile,BufRead lilo.conf*^I^Icall s:StarSetf('lilo')[J

Zeile 2186: [J

Zeile 2187: " Logcheck[J

Zeile 2188: au BufNewFile,BufRead */etc/logcheck/*.d*/*^Icall s:StarSetf('logcheck')[J

Zeile 2189: [J

Zeile 2190: " Makefile[J

Zeile 2191: au BufNewFile,BufRead [mM]akefile*^I^Icall s:StarSetf('make')[J

Zeile 2192: [J

Zeile 2193: " Ruby Makefile[J

Zeile 2194: au BufNewFile,BufRead [rR]akefile*^I^Icall s:StarSetf('ruby')[J

Zeile 2195: [J

Zeile 2196: " Mail (also matches muttrc.vim, so this is below the other checks)[J

Zeile 2197: au BufNewFile,BufRead {neo,}mutt[[:alnum:]._-]\\\{6\}^Isetf mail[J

Zeile 2198: [J

Zeile 2199: au BufNewFile,BufRead reportbug-*^I^Icall s:StarSetf('mail')[J

Zeile 2200: [J

Zeile 2201: " Modconf[J

Zeile 2202: au BufNewFile,BufRead */etc/modutils/* if executable(expand("<afile>")) != 1|  call s:StarSetf('modconf')|endif[J

Zeile 2206: au BufNewFile,BufRead */etc/modprobe.*^I^Icall s:StarSetf('modconf')[J

Zeile 2207: [J

Zeile 2208: " Mutt setup file[J

Zeile 2209: au BufNewFile,BufRead .mutt{ng,}rc*,*/.mutt{ng,}/mutt{ng,}rc*^Icall s:StarSetf('muttrc')[J

Zeile 2210: au BufNewFile,BufRead mutt{ng,}rc*,Mutt{ng,}rc*^I^Icall s:StarSetf('muttrc')[J

Zeile 2211: [J

Zeile 2212: " Neomutt setup file[J

Zeile 2213: au BufNewFile,BufRead .neomuttrc*,*/.neomutt/neomuttrc*^Icall s:StarSetf('neomuttrc')[J

Zeile 2214: au BufNewFile,BufRead neomuttrc*,Neomuttrc*^I^Icall s:StarSetf('neomuttrc')[J

Zeile 2215: [J

Zeile 2216: " Nroff macros[J

Zeile 2217: au BufNewFile,BufRead tmac.*^I^I^Icall s:StarSetf('nroff')[J

Zeile 2218: [J

Zeile 2219: " OpenBSD hostname.if[J

Zeile 2220: au BufNewFile,BufRead /etc/hostname.*^I^Icall s:StarSetf('config')[J

Zeile 2221: [J

Zeile 2222: " Pam conf[J

Zeile 2223: au BufNewFile,BufRead */etc/pam.d/*^I^Icall s:StarSetf('pamconf')[J

Zeile 2224: [J

Zeile 2225: " Printcap and Termcap[J

Zeile 2226: au BufNewFile,BufRead *printcap* if !did_filetype()|  let b:ptcap_type = "print" | call s:StarSetf('ptcap')|endif[J

Zeile 2230: au BufNewFile,BufRead *termcap* if !did_filetype()|  let b:ptcap_type = "term" | call s:StarSetf('ptcap')|endif[J

Zeile 2234: [J

Zeile 2235: " ReDIF[J

Zeile 2236: " Only used when the .rdf file was not detected to be XML.[J

Zeile 2237: au BufRead,BufNewFile *.rdf^I^I^Icall dist#ft#Redif()[J

Zeile 2238: [J

Zeile 2239: " Remind[J

Zeile 2240: au BufNewFile,BufRead .reminders*^I^Icall s:StarSetf('remind')[J

Zeile 2241: [J

Zeile 2242: " SGML catalog file[J

Zeile 2243: au BufNewFile,BufRead sgml.catalog*^I^Icall s:StarSetf('catalog')[J

Zeile 2244: [J

Zeile 2245: " avoid doc files being recognized a shell files[J

Zeile 2246: au BufNewFile,BufRead */doc/{,.}bash[_-]completion{,.d,.sh}{,/*} setf text[J

Zeile 2247: [J

Zeile 2248: " Shell scripts ending in a star[J

Zeile 2249: au BufNewFile,BufRead .bashrc*,.bash[_-]profile*,.bash[_-]logout*,.bash[_-]aliases*,bash-fc[-.]*,PKGBUILD*,APKBUILD*,*/{,.}bash[_-]completion{,.d,.sh}{,/*} call dist#ft#SetFileTypeSH("bash")[J

Zeile 2250: au BufNewFile,BufRead .kshrc* call dist#ft#SetFileTypeSH("ksh")[J

Zeile 2251: au BufNewFile,BufRead .profile* call dist#ft#SetFileTypeSH(getline(1))[J

Zeile 2252: [J

Zeile 2253: " tcsh scripts ending in a star[J

Zeile 2254: au BufNewFile,BufRead .tcshrc*^Icall dist#ft#SetFileTypeShell("tcsh")[J

Zeile 2255: [J

Zeile 2256: " csh scripts ending in a star[J

Zeile 2257: au BufNewFile,BufRead .login*,.cshrc*  call dist#ft#CSH()[J

Zeile 2258: [J

Zeile 2259: " VHDL[J

Zeile 2260: au BufNewFile,BufRead *.vhdl_[0-9]*^I^Icall s:StarSetf('vhdl')[J

Zeile 2261: [J

Zeile 2262: " Vim script[J

Zeile 2263: au BufNewFile,BufRead *vimrc*^I^I^Icall s:StarSetf('vim')[J

Zeile 2264: [J

Zeile 2265: " Subversion commit file[J

Zeile 2266: au BufNewFile,BufRead svn-commit*.tmp^I^Isetf svn[J

Zeile 2267: [J

Zeile 2268: " X resources file[J

Zeile 2269: au BufNewFile,BufRead Xresources*,*/app-defaults/*,*/Xresources/* call s:StarSetf('xdefaults')[J

Zeile 2270: [J

Zeile 2271: " XFree86 config[J

Zeile 2272: au BufNewFile,BufRead XF86Config-4* let b:xf86conf_xfree86_version = 4 | call s:StarSetf('xf86conf')[J

Zeile 2274: au BufNewFile,BufRead XF86Config* if getline(1) =~ '\<XConfigurator\>'|  let b:xf86conf_xfree86_version = 3|endif|call s:StarSetf('xf86conf')[J

Zeile 2279: [J

Zeile 2280: " X11 xmodmap[J

Zeile 2281: au BufNewFile,BufRead *xmodmap*^I^I^Icall s:StarSetf('xmodmap')[J

Zeile 2282: [J

Zeile 2283: " Xinetd conf[J

Zeile 2284: au BufNewFile,BufRead */etc/xinetd.d/*^I^Icall s:StarSetf('xinetd')[J

Zeile 2285: [J

Zeile 2286: " yum conf (close enough to dosini)[J

Zeile 2287: au BufNewFile,BufRead */etc/yum.repos.d/*^Icall s:StarSetf('dosini')[J

Zeile 2288: [J

Zeile 2289: " Z-Shell script ending in a star[J

Zeile 2290: au BufNewFile,BufRead .zsh*,.zlog*,.zcompdump*  call s:StarSetf('zsh')[J

Zeile 2291: au BufNewFile,BufRead zsh*,zlog*^I^Icall s:StarSetf('zsh')[J

Zeile 2292: [J

Zeile 2293: [J

Zeile 2294: " Plain text files, needs to be far down to not override others.  This avoids[J

Zeile 2295: " the "conf" type being used if there is a line starting with '#'.[J

Zeile 2296: au BufNewFile,BufRead *.text,README^I^Isetf text[J

Zeile 2297: [J

Zeile 2298: " Help files match *.txt but should have a last line that is a modeline.[J

Zeile 2299: au BufNewFile,BufRead *.txt  if getline('$') !~ 'vim:.*ft=help'|   setf text| endif[J

Zeile 2303: [J

Zeile 2304: [J

Zeile 2305: " Use the filetype detect plugins.  They may overrule any of the previously[J

Zeile 2306: " detected filetypes.[J

Zeile 2307: runtime! ftdetect/*.vim[J

Suche nach "ftdetect/*.vim" in "/c/Users/108012516/.vim,/c/Users/108012516/.vim/bundle/Vundle.vim,/c/Users/108012516/.vim/bundle/vim-fugitive,/c/Users/108012516/.vim/bundle/vim-gitgutter,/c/Users/108012516/.vim/bundle/vim-cpp-enhanced-highlight,/c/Users/108012516/.vim/bundle/vim-bufkill,/c/Users/108012516/.vim/bundle/ack.vim,/c/Users/108012516/.vim/bundle/fzf.vim,/c/Users/108012516/.vim/bundle/fzf,/c/Users/108012516/.vim/bundle/vim-rooter,/c/Users/108012516/.vim/bundle/vim-polyglot,/c/Users/108012516/.vim/bundle/vim-commentary,/c/Users/108012516/.vim/bundle/vim-airline,/c/Users/108012516/.vim/bundle/vim-airline-themes,/c/Users/108012516/.vim/bundle/vim-rainbow,/c/Users/108012516/.vim/bundle/vim-devicons,/c/Users/108012516/.vim/bundle/vim-webdevicons,/c/Users/108012516/.vim/bundle/awesome-vim-colorschemes,/c/Users/108012516/.vim/bundle/vim-misc,/c/Users/108012516/.vim/bundle/vim-colorscheme-switcher,/usr/share/vim/vimfiles,/usr/share/vim/vim82,/usr/share/vim/vimfiles/after,/c/Users/108012516/.vim/after,/c/User[J
Suche nach "/c/Users/108012516/.vim/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/Vundle.vim/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-fugitive/ftdetect/*.vim"[J
chdir(/c/Users/108012516/.vim/bundle/vim-fugitive/ftdetect)[J
fchdir() to previous dir[J
Zeile 2307: lese "/c/Users/108012516/.vim/bundle/vim-fugitive/ftdetect/fugitive.vim"[J
Zeile 1: autocmd BufReadPost *.fugitiveblame setfiletype fugitiveblame[J

Lesen von /c/Users/108012516/.vim/bundle/vim-fugitive/ftdetect/fugitive.vim beendet[J
weiter in /usr/share/vim/vim82/filetype.vim[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-gitgutter/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-cpp-enhanced-highlight/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-bufkill/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/ack.vim/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/fzf.vim/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/fzf/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-rooter/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-polyglot/ftdetect/*.vim"[J
chdir(/c/Users/108012516/.vim/bundle/vim-polyglot/ftdetect)[J
fchdir() to previous dir[J
Zeile 2307: lese "/c/Users/108012516/.vim/bundle/vim-polyglot/ftdetect/polyglot.vim"[J
Zeile 1: call polyglot#init#init()[J

rufe polyglot#init#init auf[J()

Zeile 1:   " A no-op as sourcing this file is enough[J

polyglot#init#init lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/ftdetect/polyglot.vim[J

Lesen von /c/Users/108012516/.vim/bundle/vim-polyglot/ftdetect/polyglot.vim beendet[J
weiter in /usr/share/vim/vim82/filetype.vim[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-commentary/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-airline/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-airline-themes/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-rainbow/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-devicons/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-webdevicons/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/awesome-vim-colorschemes/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-misc/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-colorscheme-switcher/ftdetect/*.vim"[J
Suche nach "/usr/share/vim/vimfiles/ftdetect/*.vim"[J
Suche nach "/usr/share/vim/vim82/ftdetect/*.vim"[J
Suche nach "/usr/share/vim/vimfiles/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/Vundle.vim/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/Vundle.vim/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-fugitive/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-gitgutter/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-cpp-enhanced-highlight/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-bufkill/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/ack.vim/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/fzf.vim/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/fzf/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-rooter/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-polyglot/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-commentary/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-airline/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-airline-themes/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-rainbow/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-devicons/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-webdevicons/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/awesome-vim-colorschemes/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-misc/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-colorscheme-switcher/after/ftdetect/*.vim"[J
Zeile 2308: [J

Zeile 2309: " NOTE: The above command could have ended the filetypedetect autocmd group[J

Zeile 2310: " and started another one. Let's make sure it has ended to get to a consistent[J

Zeile 2311: " state.[J

Zeile 2312: augroup END[J

Zeile 2313: [J

Zeile 2314: " Generic configuration file. Use FALLBACK, it's just guessing![J

Zeile 2315: au filetypedetect BufNewFile,BufRead,StdinReadPost * if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat    && (getline(1) =~ '^#' || getline(2) =~ '^#' || getline(3) =~ '^#'^I|| getline(4) =~ '^#' || getline(5) =~ '^#') |   setf FALLBACK conf | endif[J

Zeile 2321: [J

Zeile 2322: [J

Zeile 2323: " If the GUI is already running, may still need to install the Syntax menu.[J

Zeile 2324: " Don't do it when the 'M' flag is included in 'guioptions'.[J

Zeile 2325: if has("menu") && has("gui_running") && !exists("did_install_syntax_menu") && &guioptions !~# "M"[J

Zeile 2327:   source <sfile>:p:h/menu.vim[J

Zeile 2328: endif[J

Zeile 2329: [J

Zeile 2330: " Function called for testing all functions defined here.  These are[J

Zeile 2331: " script-local, thus need to be executed here.[J

Zeile 2332: " Returns a string with error messages (hopefully empty).[J

Zeile 2333: func! TestFiletypeFuncs(testlist)[J

Zeile 2344: [J

Zeile 2345: " Restore 'cpoptions'[J

Zeile 2346: let &cpo = s:cpo_save[J

Zeile 2347: unlet s:cpo_save[J

Lesen von /usr/share/vim/vim82/filetype.vim beendet[J
weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim[J
Suche nach "/usr/share/vim/vimfiles/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/Vundle.vim/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/Vundle.vim/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-fugitive/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-gitgutter/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-cpp-enhanced-highlight/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-bufkill/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/ack.vim/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/fzf.vim/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/fzf/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-rooter/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-polyglot/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-commentary/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-airline/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-airline-themes/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-rainbow/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-devicons/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-webdevicons/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/awesome-vim-colorschemes/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-misc/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-colorscheme-switcher/after/filetype.vim"[J
Zeile 149:   runtime! ftdetect/*.vim[J

Suche nach "ftdetect/*.vim" in "/c/Users/108012516/.vim,/c/Users/108012516/.vim/bundle/Vundle.vim,/c/Users/108012516/.vim/bundle/vim-fugitive,/c/Users/108012516/.vim/bundle/vim-gitgutter,/c/Users/108012516/.vim/bundle/vim-cpp-enhanced-highlight,/c/Users/108012516/.vim/bundle/vim-bufkill,/c/Users/108012516/.vim/bundle/ack.vim,/c/Users/108012516/.vim/bundle/fzf.vim,/c/Users/108012516/.vim/bundle/fzf,/c/Users/108012516/.vim/bundle/vim-rooter,/c/Users/108012516/.vim/bundle/vim-polyglot,/c/Users/108012516/.vim/bundle/vim-commentary,/c/Users/108012516/.vim/bundle/vim-airline,/c/Users/108012516/.vim/bundle/vim-airline-themes,/c/Users/108012516/.vim/bundle/vim-rainbow,/c/Users/108012516/.vim/bundle/vim-devicons,/c/Users/108012516/.vim/bundle/vim-webdevicons,/c/Users/108012516/.vim/bundle/awesome-vim-colorschemes,/c/Users/108012516/.vim/bundle/vim-misc,/c/Users/108012516/.vim/bundle/vim-colorscheme-switcher,/usr/share/vim/vimfiles,/usr/share/vim/vim82,/usr/share/vim/vimfiles/after,/c/Users/108012516/.vim/after,/c/User[J
Suche nach "/c/Users/108012516/.vim/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/Vundle.vim/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-fugitive/ftdetect/*.vim"[J
chdir(/c/Users/108012516/.vim/bundle/vim-fugitive/ftdetect)[J
fchdir() to previous dir[J
Zeile 149: lese "/c/Users/108012516/.vim/bundle/vim-fugitive/ftdetect/fugitive.vim"[J
Zeile 1: autocmd BufReadPost *.fugitiveblame setfiletype fugitiveblame[J

Lesen von /c/Users/108012516/.vim/bundle/vim-fugitive/ftdetect/fugitive.vim beendet[J
weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-gitgutter/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-cpp-enhanced-highlight/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-bufkill/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/ack.vim/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/fzf.vim/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/fzf/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-rooter/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-polyglot/ftdetect/*.vim"[J
chdir(/c/Users/108012516/.vim/bundle/vim-polyglot/ftdetect)[J
fchdir() to previous dir[J
Zeile 149: lese "/c/Users/108012516/.vim/bundle/vim-polyglot/ftdetect/polyglot.vim"[J
Zeile 1: call polyglot#init#init()[J

rufe polyglot#init#init auf[J()

Zeile 1:   " A no-op as sourcing this file is enough[J

polyglot#init#init lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/ftdetect/polyglot.vim[J

Lesen von /c/Users/108012516/.vim/bundle/vim-polyglot/ftdetect/polyglot.vim beendet[J
weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-commentary/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-airline/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-airline-themes/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-rainbow/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-devicons/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-webdevicons/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/awesome-vim-colorschemes/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-misc/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-colorscheme-switcher/ftdetect/*.vim"[J
Suche nach "/usr/share/vim/vimfiles/ftdetect/*.vim"[J
Suche nach "/usr/share/vim/vim82/ftdetect/*.vim"[J
Suche nach "/usr/share/vim/vimfiles/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/Vundle.vim/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/Vundle.vim/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-fugitive/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-gitgutter/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-cpp-enhanced-highlight/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-bufkill/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/ack.vim/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/fzf.vim/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/fzf/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-rooter/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-polyglot/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-commentary/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-airline/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-airline-themes/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-rainbow/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-devicons/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-webdevicons/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/awesome-vim-colorschemes/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-misc/after/ftdetect/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-colorscheme-switcher/after/ftdetect/*.vim"[J
Zeile 150: augroup END[J

Zeile 151: [J

Zeile 152: [J

Zeile 153: augroup filetypedetect[J

Zeile 154: [J

Zeile 155: " Switch to compatible mode for the time being[J

Zeile 156: let s:cpo_save = &cpo[J

Zeile 157: set cpo&vim[J

Zeile 158: [J

Zeile 159: if !has_key(g:polyglot_is_disabled, 'ftdetect')[J

Zeile 160: [J

Zeile 161: " It can happen vim filetype.vim loads first, then we need a reset[J

Zeile 162: if exists("did_load_filetypes")[J

Zeile 163:   au! filetypedetect[J

Zeile 164: endif[J

Zeile 165: [J

Zeile 166: " Prevent filetype.vim of vim from loading again[J

Zeile 167: let did_load_filetypes = 1[J

Zeile 168: [J

Zeile 169: [J

Zeile 170: " DO NOT EDIT CODE BELOW, IT IS GENERATED WITH MAKEFILE[J

Zeile 171: [J

Zeile 172: if !has_key(g:polyglot_is_disabled, 'org')[J

Zeile 173:   au BufNewFile,BufRead *.org setf org[J

Zeile 174: endif[J

Zeile 175: [J

Zeile 176: if !has_key(g:polyglot_is_disabled, 'mermaid')[J

Zeile 177:   au BufNewFile,BufRead *.mermaid,*.mm,*.mmd setf mermaid[J

Zeile 178: endif[J

Zeile 179: [J

Zeile 180: if !has_key(g:polyglot_is_disabled, 'openscad')[J

Zeile 181:   au BufNewFile,BufRead *.scad setf openscad[J

Zeile 182: endif[J

Zeile 183: [J

Zeile 184: if !has_key(g:polyglot_is_disabled, 'nftables')[J

Zeile 185:   au BufNewFile,BufRead *.nft,*/nftables.conf setf nftables[J

Zeile 186: endif[J

Zeile 187: [J

Zeile 188: if !has_key(g:polyglot_is_disabled, 'just')[J

Zeile 189:   au BufNewFile,BufRead *.just,justfile setf just[J

Zeile 190: endif[J

Zeile 191: [J

Zeile 192: if !has_key(g:polyglot_is_disabled, 'sway')[J

Zeile 193:   au BufNewFile,BufRead *.sway.config,*.swayconfig,*sway/config,swayconfig setf swayconfig[J

Zeile 194: endif[J

Zeile 195: [J

Zeile 196: if !has_key(g:polyglot_is_disabled, 'hjson')[J

Zeile 197:   au BufNewFile,BufRead *.hjson setf hjson[J

Zeile 198: endif[J

Zeile 199: [J

Zeile 200: if !has_key(g:polyglot_is_disabled, 'gleam')[J

Zeile 201:   au BufNewFile,BufRead *.gleam setf gleam[J

Zeile 202: endif[J

Zeile 203: [J

Zeile 204: if !has_key(g:polyglot_is_disabled, 'jsonc')[J

Zeile 205:   au BufNewFile,BufRead *.cjson,*.jsonc,{.,}babelrc,{.,}eslintrc.json,{.,}jshintrc,{.,}jslintrc,{.,}mocharc.json,coc-settings.json,coffeelint.json,jsconfig.json,tsconfig.json setf jsonc[J

Zeile 206: endif[J

Zeile 207: [J

Zeile 208: if !has_key(g:polyglot_is_disabled, 'mint')[J

Zeile 209:   au BufNewFile,BufRead *.mint setf mint[J

Zeile 210: endif[J

Zeile 211: [J

Zeile 212: if !has_key(g:polyglot_is_disabled, 'context')[J

Zeile 213:   au BufNewFile,BufRead *.mkii,*.mkiv,*.mkvi setf context[J

Zeile 214: endif[J

Zeile 215: [J

Zeile 216: if !has_key(g:polyglot_is_disabled, 'xpm2')[J

Zeile 217:   au BufNewFile,BufRead *.xpm2 setf xpm2[J

Zeile 218: endif[J

Zeile 219: [J

Zeile 220: if !has_key(g:polyglot_is_disabled, 'xpm')[J

Zeile 221:   au! BufNewFile,BufRead,BufWritePost *.pm call polyglot#detect#Pm()[J

Zeile 222:   au BufNewFile,BufRead *.xpm setf xpm[J

Zeile 223: endif[J

Zeile 224: [J

Zeile 225: if !has_key(g:polyglot_is_disabled, 'xf86conf')[J

Zeile 226:   au BufNewFile,BufRead */xorg.conf.d/*.conf,xorg.conf,xorg.conf-4 setf xf86conf[J

Zeile 227:   au BufNewFile,BufRead XF86Config-4* call s:StarSetf('xf86conf')[J

Zeile 228:   au BufNewFile,BufRead XF86Config* call s:StarSetf('xf86conf')[J

Zeile 229: endif[J

Zeile 230: [J

Zeile 231: if !has_key(g:polyglot_is_disabled, 'text')[J

Zeile 232:   au BufNewFile,BufRead *.text,README setf text[J

Zeile 233: endif[J

Zeile 234: [J

Zeile 235: if !has_key(g:polyglot_is_disabled, 'svn')[J

Zeile 236:   au BufNewFile,BufRead svn-commit*.tmp setf svn[J

Zeile 237: endif[J

Zeile 238: [J

Zeile 239: if !has_key(g:polyglot_is_disabled, 'logcheck')[J

Zeile 240:   au BufNewFile,BufRead */etc/logcheck/*.d*/* call s:StarSetf('logcheck')[J

Zeile 241: endif[J

Zeile 242: [J

Zeile 243: if !has_key(g:polyglot_is_disabled, 'fvwm')[J

Zeile 244:   au BufNewFile,BufRead */.fvwm/* call s:StarSetf('fvwm')[J

Zeile 245: endif[J

Zeile 246: [J

Zeile 247: if !has_key(g:polyglot_is_disabled, 'crontab')[J

Zeile 248:   au BufNewFile,BufRead crontab setf crontab[J

Zeile 249:   au BufNewFile,BufRead crontab.* call s:StarSetf('crontab')[J

Zeile 250:   au BufNewFile,BufRead */etc/cron.d/* call s:StarSetf('crontab')[J

Zeile 251: endif[J

Zeile 252: [J

Zeile 253: if !has_key(g:polyglot_is_disabled, 'bzr')[J

Zeile 254:   au BufNewFile,BufRead bzr_log.* call s:StarSetf('bzr')[J

Zeile 255: endif[J

Zeile 256: [J

Zeile 257: if !has_key(g:polyglot_is_disabled, 'asteriskvm')[J

Zeile 258:   au BufNewFile,BufRead *asterisk*/*voicemail.conf* call s:StarSetf('asteriskvm')[J

Zeile 259: endif[J

Zeile 260: [J

Zeile 261: if !has_key(g:polyglot_is_disabled, 'asterisk')[J

Zeile 262:   au BufNewFile,BufRead *asterisk/*.conf* call s:StarSetf('asterisk')[J

Zeile 263: endif[J

Zeile 264: [J

Zeile 265: if !has_key(g:polyglot_is_disabled, 'apachestyle')[J

Zeile 266:   au BufNewFile,BufRead proftpd.conf* call s:StarSetf('apachestyle')[J

Zeile 267:   au BufNewFile,BufRead */etc/proftpd/conf.*/* call s:StarSetf('apachestyle')[J

Zeile 268:   au BufNewFile,BufRead */etc/proftpd/*.conf* call s:StarSetf('apachestyle')[J

Zeile 269: endif[J

Zeile 270: [J

Zeile 271: if !has_key(g:polyglot_is_disabled, 'z8a')[J

Zeile 272:   au BufNewFile,BufRead *.z8a setf z8a[J

Zeile 273: endif[J

Zeile 274: [J

Zeile 275: if !has_key(g:polyglot_is_disabled, 'zimbu')[J

Zeile 276:   au BufNewFile,BufRead *.zu setf zimbu[J

Zeile 277: endif[J

Zeile 278: [J

Zeile 279: if !has_key(g:polyglot_is_disabled, 'yacc')[J

Zeile 280:   au BufNewFile,BufRead *.y++,*.yxx,*.yy setf yacc[J

Zeile 281: endif[J

Zeile 282: [J

Zeile 283: if !has_key(g:polyglot_is_disabled, 'xslt')[J

Zeile 284:   au BufNewFile,BufRead *.xsl,*.xslt setf xslt[J

Zeile 285: endif[J

Zeile 286: [J

Zeile 287: if !has_key(g:polyglot_is_disabled, 'xsd')[J

Zeile 288:   au BufNewFile,BufRead *.xsd setf xsd[J

Zeile 289: endif[J

Zeile 290: [J

Zeile 291: if !has_key(g:polyglot_is_disabled, 'xquery')[J

Zeile 292:   au BufNewFile,BufRead *.xq,*.xql,*.xqm,*.xquery,*.xqy setf xquery[J

Zeile 293: endif[J

Zeile 294: [J

Zeile 295: if !has_key(g:polyglot_is_disabled, 'xmodmap')[J

Zeile 296:   au BufNewFile,BufRead *Xmodmap setf xmodmap[J

Zeile 297:   au BufNewFile,BufRead *xmodmap* call s:StarSetf('xmodmap')[J

Zeile 298: endif[J

Zeile 299: [J

Zeile 300: if !has_key(g:polyglot_is_disabled, 'xmath')[J

Zeile 301:   au BufNewFile,BufRead *.msc,*.msf setf xmath[J

Zeile 302: endif[J

Zeile 303: [J

Zeile 304: if !has_key(g:polyglot_is_disabled, 'xdefaults')[J

Zeile 305:   au BufNewFile,BufRead *.ad,{.,}Xdefaults,{.,}Xpdefaults,{.,}Xresources,xdm-config setf xdefaults[J

Zeile 306:   au BufNewFile,BufRead Xresources* call s:StarSetf('xdefaults')[J

Zeile 307:   au BufNewFile,BufRead */app-defaults/* call s:StarSetf('xdefaults')[J

Zeile 308:   au BufNewFile,BufRead */Xresources/* call s:StarSetf('xdefaults')[J

Zeile 309: endif[J

Zeile 310: [J

Zeile 311: if !has_key(g:polyglot_is_disabled, 'xinetd')[J

Zeile 312:   au BufNewFile,BufRead */etc/xinetd.conf setf xinetd[J

Zeile 313:   au BufNewFile,BufRead */etc/xinetd.d/* call s:StarSetf('xinetd')[J

Zeile 314: endif[J

Zeile 315: [J

Zeile 316: if !has_key(g:polyglot_is_disabled, 'xhtml')[J

Zeile 317:   au BufNewFile,BufRead *.xht,*.xhtml setf xhtml[J

Zeile 318: endif[J

Zeile 319: [J

Zeile 320: if !has_key(g:polyglot_is_disabled, 'wsh')[J

Zeile 321:   au BufNewFile,BufRead *.ws[fc] setf wsh[J

Zeile 322: endif[J

Zeile 323: [J

Zeile 324: if !has_key(g:polyglot_is_disabled, 'cvs')[J

Zeile 325:   au BufNewFile,BufRead cvs\d\+ setf cvs[J

Zeile 326: endif[J

Zeile 327: [J

Zeile 328: if !has_key(g:polyglot_is_disabled, 'cvsrc')[J

Zeile 329:   au BufNewFile,BufRead {.,}cvsrc setf cvsrc[J

Zeile 330: endif[J

Zeile 331: [J

Zeile 332: if !has_key(g:polyglot_is_disabled, 'wvdial')[J

Zeile 333:   au BufNewFile,BufRead {.,}wvdialrc,wvdial.conf setf wvdial[J

Zeile 334: endif[J

Zeile 335: [J

Zeile 336: if !has_key(g:polyglot_is_disabled, 'wsml')[J

Zeile 337:   au BufNewFile,BufRead *.wsml setf wsml[J

Zeile 338: endif[J

Zeile 339: [J

Zeile 340: if !has_key(g:polyglot_is_disabled, 'winbatch')[J

Zeile 341:   au BufNewFile,BufRead *.wbt setf winbatch[J

Zeile 342: endif[J

Zeile 343: [J

Zeile 344: if !has_key(g:polyglot_is_disabled, 'wml')[J

Zeile 345:   au BufNewFile,BufRead *.wml setf wml[J

Zeile 346: endif[J

Zeile 347: [J

Zeile 348: if !has_key(g:polyglot_is_disabled, 'wget')[J

Zeile 349:   au BufNewFile,BufRead {.,}wgetrc,wgetrc setf wget[J

Zeile 350: endif[J

Zeile 351: [J

Zeile 352: if !has_key(g:polyglot_is_disabled, 'webmacro')[J

Zeile 353:   au BufNewFile,BufRead *.wm setf webmacro[J

Zeile 354: endif[J

Zeile 355: [J

Zeile 356: if !has_key(g:polyglot_is_disabled, 'wast')[J

Zeile 357:   au BufNewFile,BufRead *.wast,*.wat setf wast[J

Zeile 358: endif[J

Zeile 359: [J

Zeile 360: if !has_key(g:polyglot_is_disabled, 'vroom')[J

Zeile 361:   au BufNewFile,BufRead *.vroom setf vroom[J

Zeile 362: endif[J

Zeile 363: [J

Zeile 364: if !has_key(g:polyglot_is_disabled, 'vrml')[J

Zeile 365:   au BufNewFile,BufRead *.wrl setf vrml[J

Zeile 366: endif[J

Zeile 367: [J

Zeile 368: if !has_key(g:polyglot_is_disabled, 'vgrindefs')[J

Zeile 369:   au BufNewFile,BufRead vgrindefs setf vgrindefs[J

Zeile 370: endif[J

Zeile 371: [J

Zeile 372: if !has_key(g:polyglot_is_disabled, 'viminfo')[J

Zeile 373:   au BufNewFile,BufRead {.,}viminfo,_viminfo setf viminfo[J

Zeile 374: endif[J

Zeile 375: [J

Zeile 376: if !has_key(g:polyglot_is_disabled, 'vim')[J

Zeile 377:   au BufNewFile,BufRead *.vba,*.vim,{.,}exrc,_exrc setf vim[J

Zeile 378:   au BufNewFile,BufRead *vimrc* call s:StarSetf('vim')[J

Zeile 379: endif[J

Zeile 380: [J

Zeile 381: if !has_key(g:polyglot_is_disabled, 'vhdl')[J

Zeile 382:   au BufNewFile,BufRead *.hdl,*.vbe,*.vhd,*.vhdl,*.vho,*.vst setf vhdl[J

Zeile 383:   au BufNewFile,BufRead *.vhdl_[0-9]* call s:StarSetf('vhdl')[J

Zeile 384: endif[J

Zeile 385: [J

Zeile 386: if !has_key(g:polyglot_is_disabled, 'systemverilog')[J

Zeile 387:   au BufNewFile,BufRead *.sv,*.svh setf systemverilog[J

Zeile 388: endif[J

Zeile 389: [J

Zeile 390: if !has_key(g:polyglot_is_disabled, 'verilogams')[J

Zeile 391:   au BufNewFile,BufRead *.va,*.vams setf verilogams[J

Zeile 392: endif[J

Zeile 393: [J

Zeile 394: if !has_key(g:polyglot_is_disabled, 'verilog')[J

Zeile 395:   au BufNewFile,BufRead *.v setf verilog[J

Zeile 396: endif[J

Zeile 397: [J

Zeile 398: if !has_key(g:polyglot_is_disabled, 'vera')[J

Zeile 399:   au BufNewFile,BufRead *.vr,*.vrh,*.vri setf vera[J

Zeile 400: endif[J

Zeile 401: [J

Zeile 402: if !has_key(g:polyglot_is_disabled, 'upstart')[J

Zeile 403:   au BufNewFile,BufRead */.config/upstart/*.conf,*/.config/upstart/*.override,*/.init/*.conf,*/.init/*.override,*/etc/init/*.conf,*/etc/init/*.override,*/usr/share/upstart/*.conf,*/usr/share/upstart/*.override setf upstart[J

Zeile 404: endif[J

Zeile 405: [J

Zeile 406: if !has_key(g:polyglot_is_disabled, 'updatedb')[J

Zeile 407:   au BufNewFile,BufRead */etc/updatedb.conf setf updatedb[J

Zeile 408: endif[J

Zeile 409: [J

Zeile 410: if !has_key(g:polyglot_is_disabled, 'uc')[J

Zeile 411:   au BufNewFile,BufRead *.uc setf uc[J

Zeile 412: endif[J

Zeile 413: [J

Zeile 414: if !has_key(g:polyglot_is_disabled, 'udevperm')[J

Zeile 415:   au BufNewFile,BufRead */etc/udev/permissions.d/*.permissions setf udevperm[J

Zeile 416: endif[J

Zeile 417: [J

Zeile 418: if !has_key(g:polyglot_is_disabled, 'udevconf')[J

Zeile 419:   au BufNewFile,BufRead */etc/udev/udev.conf setf udevconf[J

Zeile 420: endif[J

Zeile 421: [J

Zeile 422: if !has_key(g:polyglot_is_disabled, 'uil')[J

Zeile 423:   au BufNewFile,BufRead *.uil,*.uit setf uil[J

Zeile 424: endif[J

Zeile 425: [J

Zeile 426: if !has_key(g:polyglot_is_disabled, 'tsscl')[J

Zeile 427:   au BufNewFile,BufRead *.tsscl setf tsscl[J

Zeile 428: endif[J

Zeile 429: [J

Zeile 430: if !has_key(g:polyglot_is_disabled, 'tssop')[J

Zeile 431:   au BufNewFile,BufRead *.tssop setf tssop[J

Zeile 432: endif[J

Zeile 433: [J

Zeile 434: if !has_key(g:polyglot_is_disabled, 'tssgm')[J

Zeile 435:   au BufNewFile,BufRead *.tssgm setf tssgm[J

Zeile 436: endif[J

Zeile 437: [J

Zeile 438: if !has_key(g:polyglot_is_disabled, 'trustees')[J

Zeile 439:   au BufNewFile,BufRead trustees.conf setf trustees[J

Zeile 440: endif[J

Zeile 441: [J

Zeile 442: if !has_key(g:polyglot_is_disabled, 'treetop')[J

Zeile 443:   au BufNewFile,BufRead *.treetop setf treetop[J

Zeile 444: endif[J

Zeile 445: [J

Zeile 446: if !has_key(g:polyglot_is_disabled, 'tpp')[J

Zeile 447:   au BufNewFile,BufRead *.tpp setf tpp[J

Zeile 448: endif[J

Zeile 449: [J

Zeile 450: if !has_key(g:polyglot_is_disabled, 'tidy')[J

Zeile 451:   au BufNewFile,BufRead {.,}tidyrc,tidy.conf,tidyrc setf tidy[J

Zeile 452: endif[J

Zeile 453: [J

Zeile 454: if !has_key(g:polyglot_is_disabled, 'texmf')[J

Zeile 455:   au BufNewFile,BufRead texmf.cnf setf texmf[J

Zeile 456: endif[J

Zeile 457: [J

Zeile 458: if !has_key(g:polyglot_is_disabled, 'texinfo')[J

Zeile 459:   au BufNewFile,BufRead *.texi,*.texinfo,*.txi setf texinfo[J

Zeile 460: endif[J

Zeile 461: [J

Zeile 462: if !has_key(g:polyglot_is_disabled, 'tex')[J

Zeile 463:   au BufNewFile,BufRead *.bbl,*.dtx,*.latex,*.ltx,*.sty setf tex[J

Zeile 464: endif[J

Zeile 465: [J

Zeile 466: if !has_key(g:polyglot_is_disabled, 'terminfo')[J

Zeile 467:   au BufNewFile,BufRead *.ti setf terminfo[J

Zeile 468: endif[J

Zeile 469: [J

Zeile 470: if !has_key(g:polyglot_is_disabled, 'teraterm')[J

Zeile 471:   au BufNewFile,BufRead *.ttl setf teraterm[J

Zeile 472: endif[J

Zeile 473: [J

Zeile 474: if !has_key(g:polyglot_is_disabled, 'tsalt')[J

Zeile 475:   au BufNewFile,BufRead *.slt setf tsalt[J

Zeile 476: endif[J

Zeile 477: [J

Zeile 478: if !has_key(g:polyglot_is_disabled, 'tli')[J

Zeile 479:   au BufNewFile,BufRead *.tli setf tli[J

Zeile 480: endif[J

Zeile 481: [J

Zeile 482: if !has_key(g:polyglot_is_disabled, 'tcl')[J

Zeile 483:   au BufNewFile,BufRead *.itcl,*.itk,*.jacl,*.tcl,*.tk setf tcl[J

Zeile 484: endif[J

Zeile 485: [J

Zeile 486: if !has_key(g:polyglot_is_disabled, 'taskedit')[J

Zeile 487:   au BufNewFile,BufRead *.task setf taskedit[J

Zeile 488: endif[J

Zeile 489: [J

Zeile 490: if !has_key(g:polyglot_is_disabled, 'taskdata')[J

Zeile 491:   au BufNewFile,BufRead {pending,completed,undo}.data setf taskdata[J

Zeile 492: endif[J

Zeile 493: [J

Zeile 494: if !has_key(g:polyglot_is_disabled, 'tak')[J

Zeile 495:   au BufNewFile,BufRead *.tak setf tak[J

Zeile 496: endif[J

Zeile 497: [J

Zeile 498: if !has_key(g:polyglot_is_disabled, 'tags')[J

Zeile 499:   au BufNewFile,BufRead tags setf tags[J

Zeile 500: endif[J

Zeile 501: [J

Zeile 502: if !has_key(g:polyglot_is_disabled, 'sudoers')[J

Zeile 503:   au BufNewFile,BufRead */etc/sudoers,sudoers.tmp setf sudoers[J

Zeile 504: endif[J

Zeile 505: [J

Zeile 506: if !has_key(g:polyglot_is_disabled, 'sdc')[J

Zeile 507:   au BufNewFile,BufRead *.sdc setf sdc[J

Zeile 508: endif[J

Zeile 509: [J

Zeile 510: if !has_key(g:polyglot_is_disabled, 'sysctl')[J

Zeile 511:   au BufNewFile,BufRead */etc/sysctl.conf,*/etc/sysctl.d/*.conf setf sysctl[J

Zeile 512: endif[J

Zeile 513: [J

Zeile 514: if !has_key(g:polyglot_is_disabled, 'sil')[J

Zeile 515:   au BufNewFile,BufRead *.sil setf sil[J

Zeile 516: endif[J

Zeile 517: [J

Zeile 518: if !has_key(g:polyglot_is_disabled, 'swiftgyb')[J

Zeile 519:   au BufNewFile,BufRead *.swift.gyb setf swiftgyb[J

Zeile 520: endif[J

Zeile 521: [J

Zeile 522: if !has_key(g:polyglot_is_disabled, 'voscm')[J

Zeile 523:   au BufNewFile,BufRead *.cm setf voscm[J

Zeile 524: endif[J

Zeile 525: [J

Zeile 526: if !has_key(g:polyglot_is_disabled, 'sml')[J

Zeile 527:   au BufNewFile,BufRead *.sml setf sml[J

Zeile 528: endif[J

Zeile 529: [J

Zeile 530: if !has_key(g:polyglot_is_disabled, 'stp')[J

Zeile 531:   au BufNewFile,BufRead *.stp setf stp[J

Zeile 532: endif[J

Zeile 533: [J

Zeile 534: if !has_key(g:polyglot_is_disabled, 'smcl')[J

Zeile 535:   au BufNewFile,BufRead *.hlp,*.ihlp,*.smcl setf smcl[J

Zeile 536: endif[J

Zeile 537: [J

Zeile 538: if !has_key(g:polyglot_is_disabled, 'stata')[J

Zeile 539:   au BufNewFile,BufRead *.ado,*.do,*.imata,*.mata setf stata[J

Zeile 540: endif[J

Zeile 541: [J

Zeile 542: if !has_key(g:polyglot_is_disabled, 'sshdconfig')[J

Zeile 543:   au BufNewFile,BufRead */etc/ssh/sshd_config.d/*.conf,sshd_config setf sshdconfig[J

Zeile 544: endif[J

Zeile 545: [J

Zeile 546: if !has_key(g:polyglot_is_disabled, 'sshconfig')[J

Zeile 547:   au BufNewFile,BufRead */.ssh/config,*/etc/ssh/ssh_config.d/*.conf,ssh_config setf sshconfig[J

Zeile 548: endif[J

Zeile 549: [J

Zeile 550: if !has_key(g:polyglot_is_disabled, 'sqr')[J

Zeile 551:   au BufNewFile,BufRead *.sqi,*.sqr setf sqr[J

Zeile 552: endif[J

Zeile 553: [J

Zeile 554: if !has_key(g:polyglot_is_disabled, 'sqlj')[J

Zeile 555:   au BufNewFile,BufRead *.sqlj setf sqlj[J

Zeile 556: endif[J

Zeile 557: [J

Zeile 558: if !has_key(g:polyglot_is_disabled, 'squid')[J

Zeile 559:   au BufNewFile,BufRead squid.conf setf squid[J

Zeile 560: endif[J

Zeile 561: [J

Zeile 562: if !has_key(g:polyglot_is_disabled, 'spice')[J

Zeile 563:   au BufNewFile,BufRead *.sp,*.spice setf spice[J

Zeile 564: endif[J

Zeile 565: [J

Zeile 566: if !has_key(g:polyglot_is_disabled, 'slice')[J

Zeile 567:   au BufNewFile,BufRead *.ice setf slice[J

Zeile 568: endif[J

Zeile 569: [J

Zeile 570: if !has_key(g:polyglot_is_disabled, 'spup')[J

Zeile 571:   au BufNewFile,BufRead *.spd,*.spdata,*.speedup setf spup[J

Zeile 572: endif[J

Zeile 573: [J

Zeile 574: if !has_key(g:polyglot_is_disabled, 'hog')[J

Zeile 575:   au BufNewFile,BufRead *.hog,snort.conf,vision.conf setf hog[J

Zeile 576: endif[J

Zeile 577: [J

Zeile 578: if !has_key(g:polyglot_is_disabled, 'mib')[J

Zeile 579:   au BufNewFile,BufRead *.mib,*.my setf mib[J

Zeile 580: endif[J

Zeile 581: [J

Zeile 582: if !has_key(g:polyglot_is_disabled, 'snobol4')[J

Zeile 583:   au BufNewFile,BufRead *.sno,*.spt setf snobol4[J

Zeile 584: endif[J

Zeile 585: [J

Zeile 586: if !has_key(g:polyglot_is_disabled, 'smith')[J

Zeile 587:   au BufNewFile,BufRead *.smith,*.smt setf smith[J

Zeile 588: endif[J

Zeile 589: [J

Zeile 590: if !has_key(g:polyglot_is_disabled, 'st')[J

Zeile 591:   au BufNewFile,BufRead *.st setf st[J

Zeile 592: endif[J

Zeile 593: [J

Zeile 594: if !has_key(g:polyglot_is_disabled, 'slrnsc')[J

Zeile 595:   au BufNewFile,BufRead *.score setf slrnsc[J

Zeile 596: endif[J

Zeile 597: [J

Zeile 598: if !has_key(g:polyglot_is_disabled, 'slrnrc')[J

Zeile 599:   au BufNewFile,BufRead {.,}slrnrc setf slrnrc[J

Zeile 600: endif[J

Zeile 601: [J

Zeile 602: if !has_key(g:polyglot_is_disabled, 'skill')[J

Zeile 603:   au BufNewFile,BufRead *.cdf,*.il,*.ils setf skill[J

Zeile 604: endif[J

Zeile 605: [J

Zeile 606: if !has_key(g:polyglot_is_disabled, 'sisu')[J

Zeile 607:   au BufNewFile,BufRead *.-sst,*.-sst.meta,*._sst,*._sst.meta,*.ssi,*.ssm,*.sst,*.sst.meta setf sisu[J

Zeile 608: endif[J

Zeile 609: [J

Zeile 610: if !has_key(g:polyglot_is_disabled, 'sinda')[J

Zeile 611:   au BufNewFile,BufRead *.s85,*.sin setf sinda[J

Zeile 612: endif[J

Zeile 613: [J

Zeile 614: if !has_key(g:polyglot_is_disabled, 'simula')[J

Zeile 615:   au BufNewFile,BufRead *.sim setf simula[J

Zeile 616: endif[J

Zeile 617: [J

Zeile 618: if !has_key(g:polyglot_is_disabled, 'screen')[J

Zeile 619:   au BufNewFile,BufRead {.,}screenrc,screenrc setf screen[J

Zeile 620: endif[J

Zeile 621: [J

Zeile 622: if !has_key(g:polyglot_is_disabled, 'scheme')[J

Zeile 623:   au BufNewFile,BufRead *.scm,*.ss setf scheme[J

Zeile 624: endif[J

Zeile 625: [J

Zeile 626: if !has_key(g:polyglot_is_disabled, 'catalog')[J

Zeile 627:   au BufNewFile,BufRead catalog setf catalog[J

Zeile 628:   au BufNewFile,BufRead sgml.catalog* call s:StarSetf('catalog')[J

Zeile 629: endif[J

Zeile 630: [J

Zeile 631: if !has_key(g:polyglot_is_disabled, 'setserial')[J

Zeile 632:   au BufNewFile,BufRead */etc/serial.conf setf setserial[J

Zeile 633: endif[J

Zeile 634: [J

Zeile 635: if !has_key(g:polyglot_is_disabled, 'slpspi')[J

Zeile 636:   au BufNewFile,BufRead */etc/slp.spi setf slpspi[J

Zeile 637: endif[J

Zeile 638: [J

Zeile 639: if !has_key(g:polyglot_is_disabled, 'spyce')[J

Zeile 640:   au BufNewFile,BufRead *.spi,*.spy setf spyce[J

Zeile 641: endif[J

Zeile 642: [J

Zeile 643: if !has_key(g:polyglot_is_disabled, 'slpreg')[J

Zeile 644:   au BufNewFile,BufRead */etc/slp.reg setf slpreg[J

Zeile 645: endif[J

Zeile 646: [J

Zeile 647: if !has_key(g:polyglot_is_disabled, 'slpconf')[J

Zeile 648:   au BufNewFile,BufRead */etc/slp.conf setf slpconf[J

Zeile 649: endif[J

Zeile 650: [J

Zeile 651: if !has_key(g:polyglot_is_disabled, 'services')[J

Zeile 652:   au BufNewFile,BufRead */etc/services setf services[J

Zeile 653: endif[J

Zeile 654: [J

Zeile 655: if !has_key(g:polyglot_is_disabled, 'sm')[J

Zeile 656:   au BufNewFile,BufRead sendmail.cf setf sm[J

Zeile 657: endif[J

Zeile 658: [J

Zeile 659: if !has_key(g:polyglot_is_disabled, 'sieve')[J

Zeile 660:   au BufNewFile,BufRead *.sieve,*.siv setf sieve[J

Zeile 661: endif[J

Zeile 662: [J

Zeile 663: if !has_key(g:polyglot_is_disabled, 'sdl')[J

Zeile 664:   au BufNewFile,BufRead *.pr,*.sdl setf sdl[J

Zeile 665: endif[J

Zeile 666: [J

Zeile 667: if !has_key(g:polyglot_is_disabled, 'sd')[J

Zeile 668:   au BufNewFile,BufRead *.sd setf sd[J

Zeile 669: endif[J

Zeile 670: [J

Zeile 671: if !has_key(g:polyglot_is_disabled, 'scilab')[J

Zeile 672:   au BufNewFile,BufRead *.sce,*.sci setf scilab[J

Zeile 673: endif[J

Zeile 674: [J

Zeile 675: if !has_key(g:polyglot_is_disabled, 'sbt')[J

Zeile 676:   au BufNewFile,BufRead *.sbt setf sbt[J

Zeile 677: endif[J

Zeile 678: [J

Zeile 679: if !has_key(g:polyglot_is_disabled, 'sather')[J

Zeile 680:   au BufNewFile,BufRead *.sa setf sather[J

Zeile 681: endif[J

Zeile 682: [J

Zeile 683: if !has_key(g:polyglot_is_disabled, 'sass')[J

Zeile 684:   au BufNewFile,BufRead *.sass setf sass[J

Zeile 685: endif[J

Zeile 686: [J

Zeile 687: if !has_key(g:polyglot_is_disabled, 'sas')[J

Zeile 688:   au BufNewFile,BufRead *.sas setf sas[J

Zeile 689: endif[J

Zeile 690: [J

Zeile 691: if !has_key(g:polyglot_is_disabled, 'samba')[J

Zeile 692:   au BufNewFile,BufRead smb.conf setf samba[J

Zeile 693: endif[J

Zeile 694: [J

Zeile 695: if !has_key(g:polyglot_is_disabled, 'slang')[J

Zeile 696:   au BufNewFile,BufRead *.sl setf slang[J

Zeile 697: endif[J

Zeile 698: [J

Zeile 699: if !has_key(g:polyglot_is_disabled, 'rtf')[J

Zeile 700:   au BufNewFile,BufRead *.rtf setf rtf[J

Zeile 701: endif[J

Zeile 702: [J

Zeile 703: if !has_key(g:polyglot_is_disabled, 'rpcgen')[J

Zeile 704:   au BufNewFile,BufRead *.x setf rpcgen[J

Zeile 705: endif[J

Zeile 706: [J

Zeile 707: if !has_key(g:polyglot_is_disabled, 'robots')[J

Zeile 708:   au BufNewFile,BufRead robots.txt setf robots[J

Zeile 709: endif[J

Zeile 710: [J

Zeile 711: if !has_key(g:polyglot_is_disabled, 'rpl')[J

Zeile 712:   au BufNewFile,BufRead *.rpl setf rpl[J

Zeile 713: endif[J

Zeile 714: [J

Zeile 715: if !has_key(g:polyglot_is_disabled, 'rng')[J

Zeile 716:   au BufNewFile,BufRead *.rng setf rng[J

Zeile 717: endif[J

Zeile 718: [J

Zeile 719: if !has_key(g:polyglot_is_disabled, 'rnc')[J

Zeile 720:   au BufNewFile,BufRead *.rnc setf rnc[J

Zeile 721: endif[J

Zeile 722: [J

Zeile 723: if !has_key(g:polyglot_is_disabled, 'resolv')[J

Zeile 724:   au BufNewFile,BufRead resolv.conf setf resolv[J

Zeile 725: endif[J

Zeile 726: [J

Zeile 727: if !has_key(g:polyglot_is_disabled, 'remind')[J

Zeile 728:   au BufNewFile,BufRead *.rem,*.remind,{.,}reminders setf remind[J

Zeile 729:   au BufNewFile,BufRead .reminders* call s:StarSetf('remind')[J

Zeile 730: endif[J

Zeile 731: [J

Zeile 732: if !has_key(g:polyglot_is_disabled, 'rrst')[J

Zeile 733:   au BufNewFile,BufRead *.rrst,*.srst setf rrst[J

Zeile 734: endif[J

Zeile 735: [J

Zeile 736: if !has_key(g:polyglot_is_disabled, 'rmd')[J

Zeile 737:   au BufNewFile,BufRead *.rmd,*.smd setf rmd[J

Zeile 738: endif[J

Zeile 739: [J

Zeile 740: if !has_key(g:polyglot_is_disabled, 'rnoweb')[J

Zeile 741:   au BufNewFile,BufRead *.rnw,*.snw setf rnoweb[J

Zeile 742: endif[J

Zeile 743: [J

Zeile 744: if !has_key(g:polyglot_is_disabled, 'rexx')[J

Zeile 745:   au BufNewFile,BufRead *.jrexx,*.orx,*.rex,*.rexx,*.rexxj,*.rxj,*.rxo,*.testGroup,*.testUnit setf rexx[J

Zeile 746: endif[J

Zeile 747: [J

Zeile 748: if !has_key(g:polyglot_is_disabled, 'rego')[J

Zeile 749:   au BufNewFile,BufRead *.rego setf rego[J

Zeile 750: endif[J

Zeile 751: [J

Zeile 752: if !has_key(g:polyglot_is_disabled, 'rib')[J

Zeile 753:   au BufNewFile,BufRead *.rib setf rib[J

Zeile 754: endif[J

Zeile 755: [J

Zeile 756: if !has_key(g:polyglot_is_disabled, 'readline')[J

Zeile 757:   au BufNewFile,BufRead {.,}inputrc,inputrc setf readline[J

Zeile 758: endif[J

Zeile 759: [J

Zeile 760: if !has_key(g:polyglot_is_disabled, 'rcs')[J

Zeile 761:   au BufNewFile,BufRead *\,v setf rcs[J

Zeile 762: endif[J

Zeile 763: [J

Zeile 764: if !has_key(g:polyglot_is_disabled, 'ratpoison')[J

Zeile 765:   au BufNewFile,BufRead {.,}ratpoisonrc,ratpoisonrc setf ratpoison[J

Zeile 766: endif[J

Zeile 767: [J

Zeile 768: if !has_key(g:polyglot_is_disabled, 'radiance')[J

Zeile 769:   au BufNewFile,BufRead *.mat,*.rad setf radiance[J

Zeile 770: endif[J

Zeile 771: [J

Zeile 772: if !has_key(g:polyglot_is_disabled, 'pyrex')[J

Zeile 773:   au BufNewFile,BufRead *.pxd,*.pyx setf pyrex[J

Zeile 774: endif[J

Zeile 775: [J

Zeile 776: if !has_key(g:polyglot_is_disabled, 'protocols')[J

Zeile 777:   au BufNewFile,BufRead */etc/protocols setf protocols[J

Zeile 778: endif[J

Zeile 779: [J

Zeile 780: if !has_key(g:polyglot_is_disabled, 'promela')[J

Zeile 781:   au BufNewFile,BufRead *.pml setf promela[J

Zeile 782: endif[J

Zeile 783: [J

Zeile 784: if !has_key(g:polyglot_is_disabled, 'psf')[J

Zeile 785:   au BufNewFile,BufRead *.psf setf psf[J

Zeile 786: endif[J

Zeile 787: [J

Zeile 788: if !has_key(g:polyglot_is_disabled, 'procmail')[J

Zeile 789:   au BufNewFile,BufRead {.,}procmail,{.,}procmailrc setf procmail[J

Zeile 790: endif[J

Zeile 791: [J

Zeile 792: if !has_key(g:polyglot_is_disabled, 'privoxy')[J

Zeile 793:   au BufNewFile,BufRead *.action setf privoxy[J

Zeile 794: endif[J

Zeile 795: [J

Zeile 796: if !has_key(g:polyglot_is_disabled, 'obj')[J

Zeile 797:   au BufNewFile,BufRead *.obj setf obj[J

Zeile 798: endif[J

Zeile 799: [J

Zeile 800: if !has_key(g:polyglot_is_disabled, 'ppwiz')[J

Zeile 801:   au BufNewFile,BufRead *.ih,*.it setf ppwiz[J

Zeile 802: endif[J

Zeile 803: [J

Zeile 804: if !has_key(g:polyglot_is_disabled, 'pccts')[J

Zeile 805:   au BufNewFile,BufRead *.g setf pccts[J

Zeile 806: endif[J

Zeile 807: [J

Zeile 808: if !has_key(g:polyglot_is_disabled, 'povini')[J

Zeile 809:   au BufNewFile,BufRead {.,}povrayrc setf povini[J

Zeile 810: endif[J

Zeile 811: [J

Zeile 812: if !has_key(g:polyglot_is_disabled, 'pov')[J

Zeile 813:   au BufNewFile,BufRead *.pov setf pov[J

Zeile 814: endif[J

Zeile 815: [J

Zeile 816: if !has_key(g:polyglot_is_disabled, 'ppd')[J

Zeile 817:   au BufNewFile,BufRead *.ppd setf ppd[J

Zeile 818: endif[J

Zeile 819: [J

Zeile 820: if !has_key(g:polyglot_is_disabled, 'postscr')[J

Zeile 821:   au BufNewFile,BufRead *.afm,*.ai,*.eps,*.epsf,*.epsi,*.pfa,*.ps setf postscr[J

Zeile 822: endif[J

Zeile 823: [J

Zeile 824: if !has_key(g:polyglot_is_disabled, 'pfmain')[J

Zeile 825:   au BufNewFile,BufRead main.cf setf pfmain[J

Zeile 826: endif[J

Zeile 827: [J

Zeile 828: if !has_key(g:polyglot_is_disabled, 'po')[J

Zeile 829:   au BufNewFile,BufRead *.po,*.pot setf po[J

Zeile 830: endif[J

Zeile 831: [J

Zeile 832: if !has_key(g:polyglot_is_disabled, 'plp')[J

Zeile 833:   au BufNewFile,BufRead *.plp setf plp[J

Zeile 834: endif[J

Zeile 835: [J

Zeile 836: if !has_key(g:polyglot_is_disabled, 'plsql')[J

Zeile 837:   au BufNewFile,BufRead *.pls,*.plsql setf plsql[J

Zeile 838: endif[J

Zeile 839: [J

Zeile 840: if !has_key(g:polyglot_is_disabled, 'plm')[J

Zeile 841:   au BufNewFile,BufRead *.p36,*.pac,*.plm setf plm[J

Zeile 842: endif[J

Zeile 843: [J

Zeile 844: if !has_key(g:polyglot_is_disabled, 'pli')[J

Zeile 845:   au BufNewFile,BufRead *.pl1,*.pli setf pli[J

Zeile 846: endif[J

Zeile 847: [J

Zeile 848: if !has_key(g:polyglot_is_disabled, 'pine')[J

Zeile 849:   au BufNewFile,BufRead {.,}pinerc,{.,}pinercex,pinerc,pinercex setf pine[J

Zeile 850: endif[J

Zeile 851: [J

Zeile 852: if !has_key(g:polyglot_is_disabled, 'pilrc')[J

Zeile 853:   au BufNewFile,BufRead *.rcp setf pilrc[J

Zeile 854: endif[J

Zeile 855: [J

Zeile 856: if !has_key(g:polyglot_is_disabled, 'pinfo')[J

Zeile 857:   au BufNewFile,BufRead */.pinforc,*/etc/pinforc setf pinfo[J

Zeile 858: endif[J

Zeile 859: [J

Zeile 860: if !has_key(g:polyglot_is_disabled, 'cmod')[J

Zeile 861:   au BufNewFile,BufRead *.cmod setf cmod[J

Zeile 862: endif[J

Zeile 863: [J

Zeile 864: if !has_key(g:polyglot_is_disabled, 'pike')[J

Zeile 865:   au BufNewFile,BufRead *.pike,*.pmod setf pike[J

Zeile 866: endif[J

Zeile 867: [J

Zeile 868: if !has_key(g:polyglot_is_disabled, 'pdf')[J

Zeile 869:   au BufNewFile,BufRead *.pdf setf pdf[J

Zeile 870: endif[J

Zeile 871: [J

Zeile 872: if !has_key(g:polyglot_is_disabled, 'pascal')[J

Zeile 873:   au BufNewFile,BufRead *.dpr,*.lpr,*.pas,*.pp setf pascal[J

Zeile 874: endif[J

Zeile 875: [J

Zeile 876: if !has_key(g:polyglot_is_disabled, 'passwd')[J

Zeile 877:   au BufNewFile,BufRead */etc/passwd,*/etc/passwd-,*/etc/passwd.edit,*/etc/shadow,*/etc/shadow-,*/etc/shadow.edit,*/var/backups/passwd.bak,*/var/backups/shadow.bak setf passwd[J

Zeile 878: endif[J

Zeile 879: [J

Zeile 880: if !has_key(g:polyglot_is_disabled, 'papp')[J

Zeile 881:   au BufNewFile,BufRead *.papp,*.pxml,*.pxsl setf papp[J

Zeile 882: endif[J

Zeile 883: [J

Zeile 884: if !has_key(g:polyglot_is_disabled, 'pamenv')[J

Zeile 885:   au BufNewFile,BufRead {.,}pam_environment,pam_env.conf setf pamenv[J

Zeile 886: endif[J

Zeile 887: [J

Zeile 888: if !has_key(g:polyglot_is_disabled, 'pamconf')[J

Zeile 889:   au BufNewFile,BufRead */etc/pam.conf setf pamconf[J

Zeile 890:   au BufNewFile,BufRead */etc/pam.d/* call s:StarSetf('pamconf')[J

Zeile 891: endif[J

Zeile 892: [J

Zeile 893: if !has_key(g:polyglot_is_disabled, 'pf')[J

Zeile 894:   au BufNewFile,BufRead pf.conf setf pf[J

Zeile 895: endif[J

Zeile 896: [J

Zeile 897: if !has_key(g:polyglot_is_disabled, 'ora')[J

Zeile 898:   au BufNewFile,BufRead *.ora setf ora[J

Zeile 899: endif[J

Zeile 900: [J

Zeile 901: if !has_key(g:polyglot_is_disabled, 'opl')[J

Zeile 902:   au BufNewFile,BufRead *.[Oo][Pp][Ll] setf opl[J

Zeile 903: endif[J

Zeile 904: [J

Zeile 905: if !has_key(g:polyglot_is_disabled, 'openroad')[J

Zeile 906:   au BufNewFile,BufRead *.or setf openroad[J

Zeile 907: endif[J

Zeile 908: [J

Zeile 909: if !has_key(g:polyglot_is_disabled, 'omnimark')[J

Zeile 910:   au BufNewFile,BufRead *.xin,*.xom setf omnimark[J

Zeile 911: endif[J

Zeile 912: [J

Zeile 913: if !has_key(g:polyglot_is_disabled, 'occam')[J

Zeile 914:   au BufNewFile,BufRead *.occ setf occam[J

Zeile 915: endif[J

Zeile 916: [J

Zeile 917: if !has_key(g:polyglot_is_disabled, 'nsis')[J

Zeile 918:   au BufNewFile,BufRead *.nsh,*.nsi setf nsis[J

Zeile 919: endif[J

Zeile 920: [J

Zeile 921: if !has_key(g:polyglot_is_disabled, 'nqc')[J

Zeile 922:   au BufNewFile,BufRead *.nqc setf nqc[J

Zeile 923: endif[J

Zeile 924: [J

Zeile 925: if !has_key(g:polyglot_is_disabled, 'nroff')[J

Zeile 926:   au BufNewFile,BufRead *.1,*.1in,*.1m,*.1x,*.2,*.3,*.3in,*.3m,*.3p,*.3pm,*.3qt,*.3x,*.4,*.5,*.6,*.7,*.8,*.9,*.man,*.mdoc setf nroff[J

Zeile 927:   au BufNewFile,BufRead *.mom,*.nr,*.roff,*.tmac,*.tr setf nroff[J

Zeile 928:   au BufNewFile,BufRead tmac.* call s:StarSetf('nroff')[J

Zeile 929: endif[J

Zeile 930: [J

Zeile 931: if !has_key(g:polyglot_is_disabled, 'ncf')[J

Zeile 932:   au BufNewFile,BufRead *.ncf setf ncf[J

Zeile 933: endif[J

Zeile 934: [J

Zeile 935: if !has_key(g:polyglot_is_disabled, 'ninja')[J

Zeile 936:   au BufNewFile,BufRead *.ninja setf ninja[J

Zeile 937: endif[J

Zeile 938: [J

Zeile 939: if !has_key(g:polyglot_is_disabled, 'netrc')[J

Zeile 940:   au BufNewFile,BufRead {.,}netrc setf netrc[J

Zeile 941: endif[J

Zeile 942: [J

Zeile 943: if !has_key(g:polyglot_is_disabled, 'neomuttrc')[J

Zeile 944:   au BufNewFile,BufRead Neomuttrc setf neomuttrc[J

Zeile 945:   au BufNewFile,BufRead neomuttrc* call s:StarSetf('neomuttrc')[J

Zeile 946:   au BufNewFile,BufRead Neomuttrc* call s:StarSetf('neomuttrc')[J

Zeile 947:   au BufNewFile,BufRead .neomuttrc* call s:StarSetf('neomuttrc')[J

Zeile 948:   au BufNewFile,BufRead */.neomutt/neomuttrc* call s:StarSetf('neomuttrc')[J

Zeile 949: endif[J

Zeile 950: [J

Zeile 951: if !has_key(g:polyglot_is_disabled, 'natural')[J

Zeile 952:   au BufNewFile,BufRead *.NS[ACGLMNPS] setf natural[J

Zeile 953: endif[J

Zeile 954: [J

Zeile 955: if !has_key(g:polyglot_is_disabled, 'nanorc')[J

Zeile 956:   au BufNewFile,BufRead *.nanorc,*/etc/nanorc setf nanorc[J

Zeile 957: endif[J

Zeile 958: [J

Zeile 959: if !has_key(g:polyglot_is_disabled, 'n1ql')[J

Zeile 960:   au BufNewFile,BufRead *.n1ql,*.nql setf n1ql[J

Zeile 961: endif[J

Zeile 962: [J

Zeile 963: if !has_key(g:polyglot_is_disabled, 'mush')[J

Zeile 964:   au BufNewFile,BufRead *.mush setf mush[J

Zeile 965: endif[J

Zeile 966: [J

Zeile 967: if !has_key(g:polyglot_is_disabled, 'mupad')[J

Zeile 968:   au BufNewFile,BufRead *.mu setf mupad[J

Zeile 969: endif[J

Zeile 970: [J

Zeile 971: if !has_key(g:polyglot_is_disabled, 'muttrc')[J

Zeile 972:   au BufNewFile,BufRead Mutt{ng,}rc setf muttrc[J

Zeile 973:   au BufNewFile,BufRead mutt{ng,}rc* call s:StarSetf('muttrc')[J

Zeile 974:   au BufNewFile,BufRead Mutt{ng,}rc* call s:StarSetf('muttrc')[J

Zeile 975:   au BufNewFile,BufRead .mutt{ng,}rc* call s:StarSetf('muttrc')[J

Zeile 976:   au BufNewFile,BufRead */etc/Muttrc.d/* call s:StarSetf('muttrc')[J

Zeile 977:   au BufNewFile,BufRead */.mutt{ng,}/mutt{ng,}rc* call s:StarSetf('muttrc')[J

Zeile 978: endif[J

Zeile 979: [J

Zeile 980: if !has_key(g:polyglot_is_disabled, 'msql')[J

Zeile 981:   au BufNewFile,BufRead *.msql setf msql[J

Zeile 982: endif[J

Zeile 983: [J

Zeile 984: if !has_key(g:polyglot_is_disabled, 'mrxvtrc')[J

Zeile 985:   au BufNewFile,BufRead {.,}mrxvtrc,mrxvtrc setf mrxvtrc[J

Zeile 986: endif[J

Zeile 987: [J

Zeile 988: if !has_key(g:polyglot_is_disabled, 'srec')[J

Zeile 989:   au BufNewFile,BufRead *.mot,*.s19,*.s28,*.s37,*.srec setf srec[J

Zeile 990: endif[J

Zeile 991: [J

Zeile 992: if !has_key(g:polyglot_is_disabled, 'mplayerconf')[J

Zeile 993:   au BufNewFile,BufRead */.mplayer/config,mplayer.conf setf mplayerconf[J

Zeile 994: endif[J

Zeile 995: [J

Zeile 996: if !has_key(g:polyglot_is_disabled, 'modconf')[J

Zeile 997:   au BufNewFile,BufRead */etc/conf.modules,*/etc/modules,*/etc/modules.conf setf modconf[J

Zeile 998:   au BufNewFile,BufRead */etc/modprobe.* call s:StarSetf('modconf')[J

Zeile 999: endif[J

Zeile 1000: [J

Zeile 1001: if !has_key(g:polyglot_is_disabled, 'moo')[J

Zeile 1002:   au BufNewFile,BufRead *.moo setf moo[J

Zeile 1003: endif[J

Zeile 1004: [J

Zeile 1005: if !has_key(g:polyglot_is_disabled, 'monk')[J

Zeile 1006:   au BufNewFile,BufRead *.isc,*.monk,*.ssc,*.tsc setf monk[J

Zeile 1007: endif[J

Zeile 1008: [J

Zeile 1009: if !has_key(g:polyglot_is_disabled, 'modula3')[J

Zeile 1010:   au BufNewFile,BufRead *.[mi][3g] setf modula3[J

Zeile 1011: endif[J

Zeile 1012: [J

Zeile 1013: if !has_key(g:polyglot_is_disabled, 'modula2')[J

Zeile 1014:   au BufNewFile,BufRead *.DEF,*.MOD,*.m2,*.mi setf modula2[J

Zeile 1015: endif[J

Zeile 1016: [J

Zeile 1017: if !has_key(g:polyglot_is_disabled, 'mmp')[J

Zeile 1018:   au BufNewFile,BufRead *.mmp setf mmp[J

Zeile 1019: endif[J

Zeile 1020: [J

Zeile 1021: if !has_key(g:polyglot_is_disabled, 'mix')[J

Zeile 1022:   au BufNewFile,BufRead *.mix,*.mixal setf mix[J

Zeile 1023: endif[J

Zeile 1024: [J

Zeile 1025: if !has_key(g:polyglot_is_disabled, 'mgl')[J

Zeile 1026:   au BufNewFile,BufRead *.mgl setf mgl[J

Zeile 1027: endif[J

Zeile 1028: [J

Zeile 1029: if !has_key(g:polyglot_is_disabled, 'mp')[J

Zeile 1030:   au BufNewFile,BufRead *.mp setf mp[J

Zeile 1031: endif[J

Zeile 1032: [J

Zeile 1033: if !has_key(g:polyglot_is_disabled, 'mf')[J

Zeile 1034:   au BufNewFile,BufRead *.mf setf mf[J

Zeile 1035: endif[J

Zeile 1036: [J

Zeile 1037: if !has_key(g:polyglot_is_disabled, 'messages')[J

Zeile 1038:   au BufNewFile,BufRead */log/{auth,cron,daemon,debug,kern,lpr,mail,messages,news/news,syslog,user}{,.log,.err,.info,.warn,.crit,.notice}{,.[0-9]*,-[0-9]*} setf messages[J

Zeile 1039: endif[J

Zeile 1040: [J

Zeile 1041: if !has_key(g:polyglot_is_disabled, 'hgcommit')[J

Zeile 1042:   au BufNewFile,BufRead hg-editor-*.txt setf hgcommit[J

Zeile 1043: endif[J

Zeile 1044: [J

Zeile 1045: if !has_key(g:polyglot_is_disabled, 'mel')[J

Zeile 1046:   au BufNewFile,BufRead *.mel setf mel[J

Zeile 1047: endif[J

Zeile 1048: [J

Zeile 1049: if !has_key(g:polyglot_is_disabled, 'maple')[J

Zeile 1050:   au BufNewFile,BufRead *.mpl,*.mv,*.mws setf maple[J

Zeile 1051: endif[J

Zeile 1052: [J

Zeile 1053: if !has_key(g:polyglot_is_disabled, 'manconf')[J

Zeile 1054:   au BufNewFile,BufRead */etc/man.conf,man.config setf manconf[J

Zeile 1055: endif[J

Zeile 1056: [J

Zeile 1057: if !has_key(g:polyglot_is_disabled, 'mallard')[J

Zeile 1058:   au BufNewFile,BufRead *.page setf mallard[J

Zeile 1059: endif[J

Zeile 1060: [J

Zeile 1061: if !has_key(g:polyglot_is_disabled, 'ist')[J

Zeile 1062:   au BufNewFile,BufRead *.ist,*.mst setf ist[J

Zeile 1063: endif[J

Zeile 1064: [J

Zeile 1065: if !has_key(g:polyglot_is_disabled, 'mailcap')[J

Zeile 1066:   au BufNewFile,BufRead {.,}mailcap,mailcap setf mailcap[J

Zeile 1067: endif[J

Zeile 1068: [J

Zeile 1069: if !has_key(g:polyglot_is_disabled, 'mailaliases')[J

Zeile 1070:   au BufNewFile,BufRead */etc/aliases,*/etc/mail/aliases setf mailaliases[J

Zeile 1071: endif[J

Zeile 1072: [J

Zeile 1073: if !has_key(g:polyglot_is_disabled, 'mail')[J

Zeile 1074:   au BufNewFile,BufRead *.eml,{.,}article,{.,}article.\d\+,{.,}followup,{.,}letter,{.,}letter.\d\+,/tmp/SLRN[0-9A-Z.]\+,ae\d\+.txt,mutt[[:alnum:]_-]\\\{6\},mutt{ng,}-*-\w\+,neomutt-*-\w\+,neomutt[[:alnum:]_-]\\\{6\},pico.\d\+,snd.\d\+,{neo,}mutt[[:alnum:]._-]\\\{6\} setf mail[J

Zeile 1075:   au BufNewFile,BufRead reportbug-* call s:StarSetf('mail')[J

Zeile 1076: endif[J

Zeile 1077: [J

Zeile 1078: if !has_key(g:polyglot_is_disabled, 'mgp')[J

Zeile 1079:   au BufNewFile,BufRead *.mgp setf mgp[J

Zeile 1080: endif[J

Zeile 1081: [J

Zeile 1082: if !has_key(g:polyglot_is_disabled, 'lss')[J

Zeile 1083:   au BufNewFile,BufRead *.lss setf lss[J

Zeile 1084: endif[J

Zeile 1085: [J

Zeile 1086: if !has_key(g:polyglot_is_disabled, 'lsl')[J

Zeile 1087:   au BufNewFile,BufRead *.lsl setf lsl[J

Zeile 1088: endif[J

Zeile 1089: [J

Zeile 1090: if !has_key(g:polyglot_is_disabled, 'lout')[J

Zeile 1091:   au BufNewFile,BufRead *.lou,*.lout setf lout[J

Zeile 1092: endif[J

Zeile 1093: [J

Zeile 1094: if !has_key(g:polyglot_is_disabled, 'lotos')[J

Zeile 1095:   au BufNewFile,BufRead *.lot,*.lotos setf lotos[J

Zeile 1096: endif[J

Zeile 1097: [J

Zeile 1098: if !has_key(g:polyglot_is_disabled, 'logtalk')[J

Zeile 1099:   au BufNewFile,BufRead *.lgt setf logtalk[J

Zeile 1100: endif[J

Zeile 1101: [J

Zeile 1102: if !has_key(g:polyglot_is_disabled, 'logindefs')[J

Zeile 1103:   au BufNewFile,BufRead */etc/login.defs setf logindefs[J

Zeile 1104: endif[J

Zeile 1105: [J

Zeile 1106: if !has_key(g:polyglot_is_disabled, 'loginaccess')[J

Zeile 1107:   au BufNewFile,BufRead */etc/login.access setf loginaccess[J

Zeile 1108: endif[J

Zeile 1109: [J

Zeile 1110: if !has_key(g:polyglot_is_disabled, 'litestep')[J

Zeile 1111:   au BufNewFile,BufRead */LiteStep/*/*.rc setf litestep[J

Zeile 1112: endif[J

Zeile 1113: [J

Zeile 1114: if !has_key(g:polyglot_is_disabled, 'lite')[J

Zeile 1115:   au BufNewFile,BufRead *.lite,*.lt setf lite[J

Zeile 1116: endif[J

Zeile 1117: [J

Zeile 1118: if !has_key(g:polyglot_is_disabled, 'liquid')[J

Zeile 1119:   au BufNewFile,BufRead *.liquid setf liquid[J

Zeile 1120: endif[J

Zeile 1121: [J

Zeile 1122: if !has_key(g:polyglot_is_disabled, 'lisp')[J

Zeile 1123:   au BufNewFile,BufRead *.cl,*.el,*.lisp,*.lsp,{.,}emacs,{.,}sawfishrc,{.,}sbclrc,sbclrc setf lisp[J

Zeile 1124: endif[J

Zeile 1125: [J

Zeile 1126: if !has_key(g:polyglot_is_disabled, 'lilo')[J

Zeile 1127:   au BufNewFile,BufRead lilo.conf setf lilo[J

Zeile 1128:   au BufNewFile,BufRead lilo.conf* call s:StarSetf('lilo')[J

Zeile 1129: endif[J

Zeile 1130: [J

Zeile 1131: if !has_key(g:polyglot_is_disabled, 'lifelines')[J

Zeile 1132:   au BufNewFile,BufRead *.ll setf lifelines[J

Zeile 1133: endif[J

Zeile 1134: [J

Zeile 1135: if !has_key(g:polyglot_is_disabled, 'lftp')[J

Zeile 1136:   au BufNewFile,BufRead *lftp/rc,{.,}lftprc,lftp.conf setf lftp[J

Zeile 1137: endif[J

Zeile 1138: [J

Zeile 1139: if !has_key(g:polyglot_is_disabled, 'sensors')[J

Zeile 1140:   au BufNewFile,BufRead */etc/sensors.conf,*/etc/sensors3.conf setf sensors[J

Zeile 1141: endif[J

Zeile 1142: [J

Zeile 1143: if !has_key(g:polyglot_is_disabled, 'libao')[J

Zeile 1144:   au BufNewFile,BufRead */.libao,*/etc/libao.conf setf libao[J

Zeile 1145: endif[J

Zeile 1146: [J

Zeile 1147: if !has_key(g:polyglot_is_disabled, 'lex')[J

Zeile 1148:   au BufNewFile,BufRead *.l,*.l++,*.lex,*.lxx setf lex[J

Zeile 1149: endif[J

Zeile 1150: [J

Zeile 1151: if !has_key(g:polyglot_is_disabled, 'ld')[J

Zeile 1152:   au BufNewFile,BufRead *.ld setf ld[J

Zeile 1153: endif[J

Zeile 1154: [J

Zeile 1155: if !has_key(g:polyglot_is_disabled, 'ldif')[J

Zeile 1156:   au BufNewFile,BufRead *.ldif setf ldif[J

Zeile 1157: endif[J

Zeile 1158: [J

Zeile 1159: if !has_key(g:polyglot_is_disabled, 'lprolog')[J

Zeile 1160:   au BufNewFile,BufRead *.sig setf lprolog[J

Zeile 1161: endif[J

Zeile 1162: [J

Zeile 1163: if !has_key(g:polyglot_is_disabled, 'limits')[J

Zeile 1164:   au BufNewFile,BufRead */etc/*limits.conf,*/etc/*limits.d/*.conf,*/etc/limits setf limits[J

Zeile 1165: endif[J

Zeile 1166: [J

Zeile 1167: if !has_key(g:polyglot_is_disabled, 'latte')[J

Zeile 1168:   au BufNewFile,BufRead *.latte,*.lte setf latte[J

Zeile 1169: endif[J

Zeile 1170: [J

Zeile 1171: if !has_key(g:polyglot_is_disabled, 'lace')[J

Zeile 1172:   au BufNewFile,BufRead *.ACE,*.ace setf lace[J

Zeile 1173: endif[J

Zeile 1174: [J

Zeile 1175: if !has_key(g:polyglot_is_disabled, 'kconfig')[J

Zeile 1176:   au BufNewFile,BufRead Kconfig,Kconfig.debug setf kconfig[J

Zeile 1177:   au BufNewFile,BufRead Kconfig.* call s:StarSetf('kconfig')[J

Zeile 1178: endif[J

Zeile 1179: [J

Zeile 1180: if !has_key(g:polyglot_is_disabled, 'kscript')[J

Zeile 1181:   au BufNewFile,BufRead *.ks setf kscript[J

Zeile 1182: endif[J

Zeile 1183: [J

Zeile 1184: if !has_key(g:polyglot_is_disabled, 'kivy')[J

Zeile 1185:   au BufNewFile,BufRead *.kv setf kivy[J

Zeile 1186: endif[J

Zeile 1187: [J

Zeile 1188: if !has_key(g:polyglot_is_disabled, 'kwt')[J

Zeile 1189:   au BufNewFile,BufRead *.k setf kwt[J

Zeile 1190: endif[J

Zeile 1191: [J

Zeile 1192: if !has_key(g:polyglot_is_disabled, 'kix')[J

Zeile 1193:   au BufNewFile,BufRead *.kix setf kix[J

Zeile 1194: endif[J

Zeile 1195: [J

Zeile 1196: if !has_key(g:polyglot_is_disabled, 'jovial')[J

Zeile 1197:   au BufNewFile,BufRead *.j73,*.jov,*.jovial setf jovial[J

Zeile 1198: endif[J

Zeile 1199: [J

Zeile 1200: if !has_key(g:polyglot_is_disabled, 'jgraph')[J

Zeile 1201:   au BufNewFile,BufRead *.jgr setf jgraph[J

Zeile 1202: endif[J

Zeile 1203: [J

Zeile 1204: if !has_key(g:polyglot_is_disabled, 'jess')[J

Zeile 1205:   au BufNewFile,BufRead *.clp setf jess[J

Zeile 1206: endif[J

Zeile 1207: [J

Zeile 1208: if !has_key(g:polyglot_is_disabled, 'jproperties')[J

Zeile 1209:   au BufNewFile,BufRead *.properties,*.properties_??,*.properties_??_?? setf jproperties[J

Zeile 1210:   au BufNewFile,BufRead *.properties_??_??_* call s:StarSetf('jproperties')[J

Zeile 1211: endif[J

Zeile 1212: [J

Zeile 1213: if !has_key(g:polyglot_is_disabled, 'jsp')[J

Zeile 1214:   au BufNewFile,BufRead *.jsp setf jsp[J

Zeile 1215: endif[J

Zeile 1216: [J

Zeile 1217: if !has_key(g:polyglot_is_disabled, 'javacc')[J

Zeile 1218:   au BufNewFile,BufRead *.jj,*.jjt setf javacc[J

Zeile 1219: endif[J

Zeile 1220: [J

Zeile 1221: if !has_key(g:polyglot_is_disabled, 'java')[J

Zeile 1222:   au BufNewFile,BufRead *.jav,*.java setf java[J

Zeile 1223: endif[J

Zeile 1224: [J

Zeile 1225: if !has_key(g:polyglot_is_disabled, 'jam')[J

Zeile 1226:   au BufNewFile,BufRead *.jpl,*.jpr setf jam[J

Zeile 1227:   au BufNewFile,BufRead Prl*.* call s:StarSetf('jam')[J

Zeile 1228:   au BufNewFile,BufRead JAM*.* call s:StarSetf('jam')[J

Zeile 1229: endif[J

Zeile 1230: [J

Zeile 1231: if !has_key(g:polyglot_is_disabled, 'jal')[J

Zeile 1232:   au BufNewFile,BufRead *.JAL,*.jal setf jal[J

Zeile 1233: endif[J

Zeile 1234: [J

Zeile 1235: if !has_key(g:polyglot_is_disabled, 'j')[J

Zeile 1236:   au BufNewFile,BufRead *.ijs setf j[J

Zeile 1237: endif[J

Zeile 1238: [J

Zeile 1239: if !has_key(g:polyglot_is_disabled, 'iss')[J

Zeile 1240:   au BufNewFile,BufRead *.iss setf iss[J

Zeile 1241: endif[J

Zeile 1242: [J

Zeile 1243: if !has_key(g:polyglot_is_disabled, 'inittab')[J

Zeile 1244:   au BufNewFile,BufRead inittab setf inittab[J

Zeile 1245: endif[J

Zeile 1246: [J

Zeile 1247: if !has_key(g:polyglot_is_disabled, 'fgl')[J

Zeile 1248:   au BufNewFile,BufRead *.4gh,*.4gl,*.m4gl setf fgl[J

Zeile 1249: endif[J

Zeile 1250: [J

Zeile 1251: if !has_key(g:polyglot_is_disabled, 'ipfilter')[J

Zeile 1252:   au BufNewFile,BufRead ipf.conf,ipf.rules,ipf6.conf setf ipfilter[J

Zeile 1253: endif[J

Zeile 1254: [J

Zeile 1255: if !has_key(g:polyglot_is_disabled, 'usw2kagtlog')[J

Zeile 1256:   au BufNewFile,BufRead *.usw2kagt.log\c,usw2kagt.*.log\c,usw2kagt.log\c setf usw2kagtlog[J

Zeile 1257: endif[J

Zeile 1258: [J

Zeile 1259: if !has_key(g:polyglot_is_disabled, 'usserverlog')[J

Zeile 1260:   au BufNewFile,BufRead *.usserver.log\c,usserver.*.log\c,usserver.log\c setf usserverlog[J

Zeile 1261: endif[J

Zeile 1262: [J

Zeile 1263: if !has_key(g:polyglot_is_disabled, 'upstreaminstalllog')[J

Zeile 1264:   au BufNewFile,BufRead *.upstreaminstall.log\c,upstreaminstall.*.log\c,upstreaminstall.log\c setf upstreaminstalllog[J

Zeile 1265: endif[J

Zeile 1266: [J

Zeile 1267: if !has_key(g:polyglot_is_disabled, 'upstreamlog')[J

Zeile 1268:   au BufNewFile,BufRead *.upstream.log\c,UPSTREAM-*.log\c,fdrupstream.log,upstream.*.log\c,upstream.log\c setf upstreamlog[J

Zeile 1269: endif[J

Zeile 1270: [J

Zeile 1271: if !has_key(g:polyglot_is_disabled, 'upstreamdat')[J

Zeile 1272:   au BufNewFile,BufRead *.upstream.dat\c,upstream.*.dat\c,upstream.dat\c setf upstreamdat[J

Zeile 1273: endif[J

Zeile 1274: [J

Zeile 1275: if !has_key(g:polyglot_is_disabled, 'initng')[J

Zeile 1276:   au BufNewFile,BufRead *.ii,*/etc/initng/*/*.i setf initng[J

Zeile 1277: endif[J

Zeile 1278: [J

Zeile 1279: if !has_key(g:polyglot_is_disabled, 'inform')[J

Zeile 1280:   au BufNewFile,BufRead *.INF,*.inf setf inform[J

Zeile 1281: endif[J

Zeile 1282: [J

Zeile 1283: if !has_key(g:polyglot_is_disabled, 'indent')[J

Zeile 1284:   au BufNewFile,BufRead {.,}indent.pro,indentrc setf indent[J

Zeile 1285: endif[J

Zeile 1286: [J

Zeile 1287: if !has_key(g:polyglot_is_disabled, 'icemenu')[J

Zeile 1288:   au BufNewFile,BufRead */.icewm/menu setf icemenu[J

Zeile 1289: endif[J

Zeile 1290: [J

Zeile 1291: if !has_key(g:polyglot_is_disabled, 'msidl')[J

Zeile 1292:   au BufNewFile,BufRead *.mof,*.odl setf msidl[J

Zeile 1293: endif[J

Zeile 1294: [J

Zeile 1295: if !has_key(g:polyglot_is_disabled, 'icon')[J

Zeile 1296:   au BufNewFile,BufRead *.icn setf icon[J

Zeile 1297: endif[J

Zeile 1298: [J

Zeile 1299: if !has_key(g:polyglot_is_disabled, 'hb')[J

Zeile 1300:   au BufNewFile,BufRead *.hb setf hb[J

Zeile 1301: endif[J

Zeile 1302: [J

Zeile 1303: if !has_key(g:polyglot_is_disabled, 'hostsaccess')[J

Zeile 1304:   au BufNewFile,BufRead */etc/hosts.allow,*/etc/hosts.deny setf hostsaccess[J

Zeile 1305: endif[J

Zeile 1306: [J

Zeile 1307: if !has_key(g:polyglot_is_disabled, 'hostconf')[J

Zeile 1308:   au BufNewFile,BufRead */etc/host.conf setf hostconf[J

Zeile 1309: endif[J

Zeile 1310: [J

Zeile 1311: if !has_key(g:polyglot_is_disabled, 'template')[J

Zeile 1312:   au BufNewFile,BufRead *.tmpl setf template[J

Zeile 1313: endif[J

Zeile 1314: [J

Zeile 1315: if !has_key(g:polyglot_is_disabled, 'htmlm4')[J

Zeile 1316:   au BufNewFile,BufRead *.html.m4 setf htmlm4[J

Zeile 1317: endif[J

Zeile 1318: [J

Zeile 1319: if !has_key(g:polyglot_is_disabled, 'tilde')[J

Zeile 1320:   au BufNewFile,BufRead *.t.html setf tilde[J

Zeile 1321: endif[J

Zeile 1322: [J

Zeile 1323: if !has_key(g:polyglot_is_disabled, 'hollywood')[J

Zeile 1324:   au BufNewFile,BufRead *.hws setf hollywood[J

Zeile 1325: endif[J

Zeile 1326: [J

Zeile 1327: if !has_key(g:polyglot_is_disabled, 'hex')[J

Zeile 1328:   au BufNewFile,BufRead *.h32,*.hex setf hex[J

Zeile 1329: endif[J

Zeile 1330: [J

Zeile 1331: if !has_key(g:polyglot_is_disabled, 'hercules')[J

Zeile 1332:   au BufNewFile,BufRead *.errsum,*.ev,*.sum,*.vc setf hercules[J

Zeile 1333: endif[J

Zeile 1334: [J

Zeile 1335: if !has_key(g:polyglot_is_disabled, 'hastepreproc')[J

Zeile 1336:   au BufNewFile,BufRead *.htpp setf hastepreproc[J

Zeile 1337: endif[J

Zeile 1338: [J

Zeile 1339: if !has_key(g:polyglot_is_disabled, 'haste')[J

Zeile 1340:   au BufNewFile,BufRead *.ht setf haste[J

Zeile 1341: endif[J

Zeile 1342: [J

Zeile 1343: if !has_key(g:polyglot_is_disabled, 'chaskell')[J

Zeile 1344:   au BufNewFile,BufRead *.chs setf chaskell[J

Zeile 1345: endif[J

Zeile 1346: [J

Zeile 1347: if !has_key(g:polyglot_is_disabled, 'lhaskell')[J

Zeile 1348:   au BufNewFile,BufRead *.lhs setf lhaskell[J

Zeile 1349: endif[J

Zeile 1350: [J

Zeile 1351: if !has_key(g:polyglot_is_disabled, 'gtkrc')[J

Zeile 1352:   au BufNewFile,BufRead {.,}gtkrc,gtkrc setf gtkrc[J

Zeile 1353:   au BufNewFile,BufRead gtkrc* call s:StarSetf('gtkrc')[J

Zeile 1354:   au BufNewFile,BufRead .gtkrc* call s:StarSetf('gtkrc')[J

Zeile 1355: endif[J

Zeile 1356: [J

Zeile 1357: if !has_key(g:polyglot_is_disabled, 'group')[J

Zeile 1358:   au BufNewFile,BufRead */etc/group,*/etc/group-,*/etc/group.edit,*/etc/gshadow,*/etc/gshadow-,*/etc/gshadow.edit,*/var/backups/group.bak,*/var/backups/gshadow.bak setf group[J

Zeile 1359: endif[J

Zeile 1360: [J

Zeile 1361: if !has_key(g:polyglot_is_disabled, 'gsp')[J

Zeile 1362:   au BufNewFile,BufRead *.gsp setf gsp[J

Zeile 1363: endif[J

Zeile 1364: [J

Zeile 1365: if !has_key(g:polyglot_is_disabled, 'gretl')[J

Zeile 1366:   au BufNewFile,BufRead *.gretl setf gretl[J

Zeile 1367: endif[J

Zeile 1368: [J

Zeile 1369: if !has_key(g:polyglot_is_disabled, 'grads')[J

Zeile 1370:   au BufNewFile,BufRead *.gs setf grads[J

Zeile 1371: endif[J

Zeile 1372: [J

Zeile 1373: if !has_key(g:polyglot_is_disabled, 'gitolite')[J

Zeile 1374:   au BufNewFile,BufRead gitolite.conf setf gitolite[J

Zeile 1375:   au BufNewFile,BufRead */gitolite-admin/conf/* call s:StarSetf('gitolite')[J

Zeile 1376: endif[J

Zeile 1377: [J

Zeile 1378: if !has_key(g:polyglot_is_disabled, 'gnash')[J

Zeile 1379:   au BufNewFile,BufRead {.,}gnashpluginrc,{.,}gnashrc,gnashpluginrc,gnashrc setf gnash[J

Zeile 1380: endif[J

Zeile 1381: [J

Zeile 1382: if !has_key(g:polyglot_is_disabled, 'gpg')[J

Zeile 1383:   au BufNewFile,BufRead */.gnupg/gpg.conf,*/.gnupg/options,*/usr/*/gnupg/options.skel setf gpg[J

Zeile 1384: endif[J

Zeile 1385: [J

Zeile 1386: if !has_key(g:polyglot_is_disabled, 'gp')[J

Zeile 1387:   au BufNewFile,BufRead *.gp,{.,}gprc setf gp[J

Zeile 1388: endif[J

Zeile 1389: [J

Zeile 1390: if !has_key(g:polyglot_is_disabled, 'gkrellmrc')[J

Zeile 1391:   au BufNewFile,BufRead gkrellmrc,gkrellmrc_? setf gkrellmrc[J

Zeile 1392: endif[J

Zeile 1393: [J

Zeile 1394: if !has_key(g:polyglot_is_disabled, 'gedcom')[J

Zeile 1395:   au BufNewFile,BufRead *.ged,lltxxxxx.txt setf gedcom[J

Zeile 1396:   au BufNewFile,BufRead */tmp/lltmp* call s:StarSetf('gedcom')[J

Zeile 1397: endif[J

Zeile 1398: [J

Zeile 1399: if !has_key(g:polyglot_is_disabled, 'gdmo')[J

Zeile 1400:   au BufNewFile,BufRead *.gdmo,*.mo setf gdmo[J

Zeile 1401: endif[J

Zeile 1402: [J

Zeile 1403: if !has_key(g:polyglot_is_disabled, 'gdb')[J

Zeile 1404:   au BufNewFile,BufRead {.,}gdbinit setf gdb[J

Zeile 1405: endif[J

Zeile 1406: [J

Zeile 1407: if !has_key(g:polyglot_is_disabled, 'fstab')[J

Zeile 1408:   au BufNewFile,BufRead fstab,mtab setf fstab[J

Zeile 1409: endif[J

Zeile 1410: [J

Zeile 1411: if !has_key(g:polyglot_is_disabled, 'framescript')[J

Zeile 1412:   au BufNewFile,BufRead *.fsl setf framescript[J

Zeile 1413: endif[J

Zeile 1414: [J

Zeile 1415: if !has_key(g:polyglot_is_disabled, 'fortran')[J

Zeile 1416:   au BufNewFile,BufRead *.f,*.f03,*.f08,*.f77,*.f90,*.f95,*.for,*.fortran,*.fpp,*.ftn setf fortran[J

Zeile 1417: endif[J

Zeile 1418: [J

Zeile 1419: if !has_key(g:polyglot_is_disabled, 'reva')[J

Zeile 1420:   au BufNewFile,BufRead *.frt setf reva[J

Zeile 1421: endif[J

Zeile 1422: [J

Zeile 1423: if !has_key(g:polyglot_is_disabled, 'focexec')[J

Zeile 1424:   au BufNewFile,BufRead *.fex,*.focexec setf focexec[J

Zeile 1425: endif[J

Zeile 1426: [J

Zeile 1427: if !has_key(g:polyglot_is_disabled, 'fetchmail')[J

Zeile 1428:   au BufNewFile,BufRead {.,}fetchmailrc setf fetchmail[J

Zeile 1429: endif[J

Zeile 1430: [J

Zeile 1431: if !has_key(g:polyglot_is_disabled, 'fan')[J

Zeile 1432:   au BufNewFile,BufRead *.fan,*.fwt setf fan[J

Zeile 1433: endif[J

Zeile 1434: [J

Zeile 1435: if !has_key(g:polyglot_is_disabled, 'falcon')[J

Zeile 1436:   au BufNewFile,BufRead *.fal setf falcon[J

Zeile 1437: endif[J

Zeile 1438: [J

Zeile 1439: if !has_key(g:polyglot_is_disabled, 'exports')[J

Zeile 1440:   au BufNewFile,BufRead exports setf exports[J

Zeile 1441: endif[J

Zeile 1442: [J

Zeile 1443: if !has_key(g:polyglot_is_disabled, 'expect')[J

Zeile 1444:   au BufNewFile,BufRead *.exp setf expect[J

Zeile 1445: endif[J

Zeile 1446: [J

Zeile 1447: if !has_key(g:polyglot_is_disabled, 'exim')[J

Zeile 1448:   au BufNewFile,BufRead exim.conf setf exim[J

Zeile 1449: endif[J

Zeile 1450: [J

Zeile 1451: if !has_key(g:polyglot_is_disabled, 'csc')[J

Zeile 1452:   au BufNewFile,BufRead *.csc setf csc[J

Zeile 1453: endif[J

Zeile 1454: [J

Zeile 1455: if !has_key(g:polyglot_is_disabled, 'esterel')[J

Zeile 1456:   au BufNewFile,BufRead *.strl setf esterel[J

Zeile 1457: endif[J

Zeile 1458: [J

Zeile 1459: if !has_key(g:polyglot_is_disabled, 'esqlc')[J

Zeile 1460:   au BufNewFile,BufRead *.EC,*.ec setf esqlc[J

Zeile 1461: endif[J

Zeile 1462: [J

Zeile 1463: if !has_key(g:polyglot_is_disabled, 'esmtprc')[J

Zeile 1464:   au BufNewFile,BufRead *esmtprc setf esmtprc[J

Zeile 1465: endif[J

Zeile 1466: [J

Zeile 1467: if !has_key(g:polyglot_is_disabled, 'elmfilt')[J

Zeile 1468:   au BufNewFile,BufRead filter-rules setf elmfilt[J

Zeile 1469: endif[J

Zeile 1470: [J

Zeile 1471: if !has_key(g:polyglot_is_disabled, 'elinks')[J

Zeile 1472:   au BufNewFile,BufRead elinks.conf setf elinks[J

Zeile 1473: endif[J

Zeile 1474: [J

Zeile 1475: if !has_key(g:polyglot_is_disabled, 'ecd')[J

Zeile 1476:   au BufNewFile,BufRead *.ecd setf ecd[J

Zeile 1477: endif[J

Zeile 1478: [J

Zeile 1479: if !has_key(g:polyglot_is_disabled, 'edif')[J

Zeile 1480:   au BufNewFile,BufRead *.ed\(f\|if\|o\) setf edif[J

Zeile 1481: endif[J

Zeile 1482: [J

Zeile 1483: if !has_key(g:polyglot_is_disabled, 'dts')[J

Zeile 1484:   au BufNewFile,BufRead *.dts,*.dtsi setf dts[J

Zeile 1485: endif[J

Zeile 1486: [J

Zeile 1487: if !has_key(g:polyglot_is_disabled, 'dtd')[J

Zeile 1488:   au BufNewFile,BufRead *.dtd setf dtd[J

Zeile 1489: endif[J

Zeile 1490: [J

Zeile 1491: if !has_key(g:polyglot_is_disabled, 'dsl')[J

Zeile 1492:   au BufNewFile,BufRead *.dsl setf dsl[J

Zeile 1493: endif[J

Zeile 1494: [J

Zeile 1495: if !has_key(g:polyglot_is_disabled, 'datascript')[J

Zeile 1496:   au BufNewFile,BufRead *.ds setf datascript[J

Zeile 1497: endif[J

Zeile 1498: [J

Zeile 1499: if !has_key(g:polyglot_is_disabled, 'dracula')[J

Zeile 1500:   au BufNewFile,BufRead *.drac,*.drc,*lpe,*lvs setf dracula[J

Zeile 1501:   au BufNewFile,BufRead drac.* call s:StarSetf('dracula')[J

Zeile 1502: endif[J

Zeile 1503: [J

Zeile 1504: if !has_key(g:polyglot_is_disabled, 'def')[J

Zeile 1505:   au BufNewFile,BufRead *.def setf def[J

Zeile 1506: endif[J

Zeile 1507: [J

Zeile 1508: if !has_key(g:polyglot_is_disabled, 'dylan')[J

Zeile 1509:   au BufNewFile,BufRead *.dylan setf dylan[J

Zeile 1510: endif[J

Zeile 1511: [J

Zeile 1512: if !has_key(g:polyglot_is_disabled, 'dylanintr')[J

Zeile 1513:   au BufNewFile,BufRead *.intr setf dylanintr[J

Zeile 1514: endif[J

Zeile 1515: [J

Zeile 1516: if !has_key(g:polyglot_is_disabled, 'dylanlid')[J

Zeile 1517:   au BufNewFile,BufRead *.lid setf dylanlid[J

Zeile 1518: endif[J

Zeile 1519: [J

Zeile 1520: if !has_key(g:polyglot_is_disabled, 'dot')[J

Zeile 1521:   au BufNewFile,BufRead *.dot,*.gv setf dot[J

Zeile 1522: endif[J

Zeile 1523: [J

Zeile 1524: if !has_key(g:polyglot_is_disabled, 'dircolors')[J

Zeile 1525:   au BufNewFile,BufRead */etc/DIR_COLORS,{.,}dir_colors,{.,}dircolors setf dircolors[J

Zeile 1526: endif[J

Zeile 1527: [J

Zeile 1528: if !has_key(g:polyglot_is_disabled, 'diff')[J

Zeile 1529:   au BufNewFile,BufRead *.diff,*.rej setf diff[J

Zeile 1530: endif[J

Zeile 1531: [J

Zeile 1532: if !has_key(g:polyglot_is_disabled, 'dictdconf')[J

Zeile 1533:   au BufNewFile,BufRead dictd.conf setf dictdconf[J

Zeile 1534: endif[J

Zeile 1535: [J

Zeile 1536: if !has_key(g:polyglot_is_disabled, 'dictconf')[J

Zeile 1537:   au BufNewFile,BufRead {.,}dictrc,dict.conf setf dictconf[J

Zeile 1538: endif[J

Zeile 1539: [J

Zeile 1540: if !has_key(g:polyglot_is_disabled, 'desktop')[J

Zeile 1541:   au BufNewFile,BufRead *.desktop,*.directory setf desktop[J

Zeile 1542: endif[J

Zeile 1543: [J

Zeile 1544: if !has_key(g:polyglot_is_disabled, 'desc')[J

Zeile 1545:   au BufNewFile,BufRead *.desc setf desc[J

Zeile 1546: endif[J

Zeile 1547: [J

Zeile 1548: if !has_key(g:polyglot_is_disabled, 'dnsmasq')[J

Zeile 1549:   au BufNewFile,BufRead */etc/dnsmasq.conf setf dnsmasq[J

Zeile 1550:   au BufNewFile,BufRead */etc/dnsmasq.d/* call s:StarSetf('dnsmasq')[J

Zeile 1551: endif[J

Zeile 1552: [J

Zeile 1553: if !has_key(g:polyglot_is_disabled, 'denyhosts')[J

Zeile 1554:   au BufNewFile,BufRead denyhosts.conf setf denyhosts[J

Zeile 1555: endif[J

Zeile 1556: [J

Zeile 1557: if !has_key(g:polyglot_is_disabled, 'debsources')[J

Zeile 1558:   au BufNewFile,BufRead */etc/apt/sources.list,*/etc/apt/sources.list.d/*.list setf debsources[J

Zeile 1559: endif[J

Zeile 1560: [J

Zeile 1561: if !has_key(g:polyglot_is_disabled, 'debcopyright')[J

Zeile 1562:   au BufNewFile,BufRead */debian/copyright setf debcopyright[J

Zeile 1563: endif[J

Zeile 1564: [J

Zeile 1565: if !has_key(g:polyglot_is_disabled, 'debcontrol')[J

Zeile 1566:   au BufNewFile,BufRead */debian/control setf debcontrol[J

Zeile 1567: endif[J

Zeile 1568: [J

Zeile 1569: if !has_key(g:polyglot_is_disabled, 'cuplsim')[J

Zeile 1570:   au BufNewFile,BufRead *.si setf cuplsim[J

Zeile 1571: endif[J

Zeile 1572: [J

Zeile 1573: if !has_key(g:polyglot_is_disabled, 'cupl')[J

Zeile 1574:   au BufNewFile,BufRead *.pld setf cupl[J

Zeile 1575: endif[J

Zeile 1576: [J

Zeile 1577: if !has_key(g:polyglot_is_disabled, 'csp')[J

Zeile 1578:   au BufNewFile,BufRead *.csp,*.fdr setf csp[J

Zeile 1579: endif[J

Zeile 1580: [J

Zeile 1581: if !has_key(g:polyglot_is_disabled, 'quake')[J

Zeile 1582:   au BufNewFile,BufRead *baseq[2-3]/*.cfg,*id1/*.cfg,*quake[1-3]/*.cfg setf quake[J

Zeile 1583: endif[J

Zeile 1584: [J

Zeile 1585: if !has_key(g:polyglot_is_disabled, 'lynx')[J

Zeile 1586:   au BufNewFile,BufRead lynx.cfg setf lynx[J

Zeile 1587: endif[J

Zeile 1588: [J

Zeile 1589: if !has_key(g:polyglot_is_disabled, 'eterm')[J

Zeile 1590:   au BufNewFile,BufRead *Eterm/*.cfg setf eterm[J

Zeile 1591: endif[J

Zeile 1592: [J

Zeile 1593: if !has_key(g:polyglot_is_disabled, 'dcd')[J

Zeile 1594:   au BufNewFile,BufRead *.dcd setf dcd[J

Zeile 1595: endif[J

Zeile 1596: [J

Zeile 1597: if !has_key(g:polyglot_is_disabled, 'dockerfile')[J

Zeile 1598:   au BufNewFile,BufRead *.Dockerfile,*.dock,Containerfile,Dockerfile,dockerfile setf dockerfile[J

Zeile 1599:   au BufNewFile,BufRead Dockerfile* call s:StarSetf('dockerfile')[J

Zeile 1600: endif[J

Zeile 1601: [J

Zeile 1602: if !has_key(g:polyglot_is_disabled, 'cuda')[J

Zeile 1603:   au BufNewFile,BufRead *.cu,*.cuh setf cuda[J

Zeile 1604: endif[J

Zeile 1605: [J

Zeile 1606: if !has_key(g:polyglot_is_disabled, 'config')[J

Zeile 1607:   au BufNewFile,BufRead Pipfile,configure.ac,configure.in setf config[J

Zeile 1608:   au BufNewFile,BufRead /etc/hostname.* call s:StarSetf('config')[J

Zeile 1609: endif[J

Zeile 1610: [J

Zeile 1611: if !has_key(g:polyglot_is_disabled, 'cf')[J

Zeile 1612:   au BufNewFile,BufRead *.cfc,*.cfi,*.cfm setf cf[J

Zeile 1613: endif[J

Zeile 1614: [J

Zeile 1615: if !has_key(g:polyglot_is_disabled, 'coco')[J

Zeile 1616:   au BufNewFile,BufRead *.atg setf coco[J

Zeile 1617: endif[J

Zeile 1618: [J

Zeile 1619: if !has_key(g:polyglot_is_disabled, 'cobol')[J

Zeile 1620:   au BufNewFile,BufRead *.cbl,*.cob,*.lib setf cobol[J

Zeile 1621: endif[J

Zeile 1622: [J

Zeile 1623: if !has_key(g:polyglot_is_disabled, 'cmusrc')[J

Zeile 1624:   au BufNewFile,BufRead */.cmus/{autosave,rc,command-history,*.theme},*/cmus/{rc,*.theme} setf cmusrc[J

Zeile 1625: endif[J

Zeile 1626: [J

Zeile 1627: if !has_key(g:polyglot_is_disabled, 'cl')[J

Zeile 1628:   au BufNewFile,BufRead *.eni setf cl[J

Zeile 1629: endif[J

Zeile 1630: [J

Zeile 1631: if !has_key(g:polyglot_is_disabled, 'clean')[J

Zeile 1632:   au BufNewFile,BufRead *.dcl,*.icl setf clean[J

Zeile 1633: endif[J

Zeile 1634: [J

Zeile 1635: if !has_key(g:polyglot_is_disabled, 'chordpro')[J

Zeile 1636:   au BufNewFile,BufRead *.cho,*.chopro,*.chordpro,*.crd,*.crdpro setf chordpro[J

Zeile 1637: endif[J

Zeile 1638: [J

Zeile 1639: if !has_key(g:polyglot_is_disabled, 'chill')[J

Zeile 1640:   au BufNewFile,BufRead *..ch setf chill[J

Zeile 1641: endif[J

Zeile 1642: [J

Zeile 1643: if !has_key(g:polyglot_is_disabled, 'debchangelog')[J

Zeile 1644:   au BufNewFile,BufRead */debian/changelog,NEWS.Debian,NEWS.dch,changelog.Debian,changelog.dch setf debchangelog[J

Zeile 1645: endif[J

Zeile 1646: [J

Zeile 1647: if !has_key(g:polyglot_is_disabled, 'cterm')[J

Zeile 1648:   au BufNewFile,BufRead *.con setf cterm[J

Zeile 1649: endif[J

Zeile 1650: [J

Zeile 1651: if !has_key(g:polyglot_is_disabled, 'css')[J

Zeile 1652:   au BufNewFile,BufRead *.css setf css[J

Zeile 1653: endif[J

Zeile 1654: [J

Zeile 1655: if !has_key(g:polyglot_is_disabled, 'ch')[J

Zeile 1656:   au BufNewFile,BufRead *.chf setf ch[J

Zeile 1657: endif[J

Zeile 1658: [J

Zeile 1659: if !has_key(g:polyglot_is_disabled, 'cynpp')[J

Zeile 1660:   au BufNewFile,BufRead *.cyn setf cynpp[J

Zeile 1661: endif[J

Zeile 1662: [J

Zeile 1663: if !has_key(g:polyglot_is_disabled, 'crm')[J

Zeile 1664:   au BufNewFile,BufRead *.crm setf crm[J

Zeile 1665: endif[J

Zeile 1666: [J

Zeile 1667: if !has_key(g:polyglot_is_disabled, 'conaryrecipe')[J

Zeile 1668:   au BufNewFile,BufRead *.recipe setf conaryrecipe[J

Zeile 1669: endif[J

Zeile 1670: [J

Zeile 1671: if !has_key(g:polyglot_is_disabled, 'cdl')[J

Zeile 1672:   au BufNewFile,BufRead *.cdl setf cdl[J

Zeile 1673: endif[J

Zeile 1674: [J

Zeile 1675: if !has_key(g:polyglot_is_disabled, 'chaiscript')[J

Zeile 1676:   au BufNewFile,BufRead *.chai setf chaiscript[J

Zeile 1677: endif[J

Zeile 1678: [J

Zeile 1679: if !has_key(g:polyglot_is_disabled, 'cdrdaoconf')[J

Zeile 1680:   au BufNewFile,BufRead */etc/cdrdao.conf,*/etc/default/cdrdao,*/etc/defaults/cdrdao,{.,}cdrdao setf cdrdaoconf[J

Zeile 1681: endif[J

Zeile 1682: [J

Zeile 1683: if !has_key(g:polyglot_is_disabled, 'cdrtoc')[J

Zeile 1684:   au BufNewFile,BufRead *.toc setf cdrtoc[J

Zeile 1685: endif[J

Zeile 1686: [J

Zeile 1687: if !has_key(g:polyglot_is_disabled, 'cabal')[J

Zeile 1688:   au BufNewFile,BufRead *.cabal setf cabal[J

Zeile 1689: endif[J

Zeile 1690: [J

Zeile 1691: if !has_key(g:polyglot_is_disabled, 'csdl')[J

Zeile 1692:   au BufNewFile,BufRead *.csdl setf csdl[J

Zeile 1693: endif[J

Zeile 1694: [J

Zeile 1695: if !has_key(g:polyglot_is_disabled, 'cs')[J

Zeile 1696:   au BufNewFile,BufRead *.cs setf cs[J

Zeile 1697: endif[J

Zeile 1698: [J

Zeile 1699: if !has_key(g:polyglot_is_disabled, 'calendar')[J

Zeile 1700:   au BufNewFile,BufRead calendar setf calendar[J

Zeile 1701:   au BufNewFile,BufRead */share/calendar/calendar.* call s:StarSetf('calendar')[J

Zeile 1702:   au BufNewFile,BufRead */share/calendar/*/calendar.* call s:StarSetf('calendar')[J

Zeile 1703:   au BufNewFile,BufRead */.calendar/* call s:StarSetf('calendar')[J

Zeile 1704: endif[J

Zeile 1705: [J

Zeile 1706: if !has_key(g:polyglot_is_disabled, 'lpc')[J

Zeile 1707:   au BufNewFile,BufRead *.lpc,*.ulpc setf lpc[J

Zeile 1708: endif[J

Zeile 1709: [J

Zeile 1710: if !has_key(g:polyglot_is_disabled, 'bsdl')[J

Zeile 1711:   au BufNewFile,BufRead *.bsdl,*bsd setf bsdl[J

Zeile 1712: endif[J

Zeile 1713: [J

Zeile 1714: if !has_key(g:polyglot_is_disabled, 'blank')[J

Zeile 1715:   au BufNewFile,BufRead *.bl setf blank[J

Zeile 1716: endif[J

Zeile 1717: [J

Zeile 1718: if !has_key(g:polyglot_is_disabled, 'bindzone')[J

Zeile 1719:   au BufNewFile,BufRead named.root setf bindzone[J

Zeile 1720:   au BufNewFile,BufRead */named/db.* call s:StarSetf('bindzone')[J

Zeile 1721:   au BufNewFile,BufRead */bind/db.* call s:StarSetf('bindzone')[J

Zeile 1722: endif[J

Zeile 1723: [J

Zeile 1724: if !has_key(g:polyglot_is_disabled, 'named')[J

Zeile 1725:   au BufNewFile,BufRead named*.conf,rndc*.conf,rndc*.key setf named[J

Zeile 1726: endif[J

Zeile 1727: [J

Zeile 1728: if !has_key(g:polyglot_is_disabled, 'bst')[J

Zeile 1729:   au BufNewFile,BufRead *.bst setf bst[J

Zeile 1730: endif[J

Zeile 1731: [J

Zeile 1732: if !has_key(g:polyglot_is_disabled, 'bib')[J

Zeile 1733:   au BufNewFile,BufRead *.bib setf bib[J

Zeile 1734: endif[J

Zeile 1735: [J

Zeile 1736: if !has_key(g:polyglot_is_disabled, 'bdf')[J

Zeile 1737:   au BufNewFile,BufRead *.bdf setf bdf[J

Zeile 1738: endif[J

Zeile 1739: [J

Zeile 1740: if !has_key(g:polyglot_is_disabled, 'bc')[J

Zeile 1741:   au BufNewFile,BufRead *.bc setf bc[J

Zeile 1742: endif[J

Zeile 1743: [J

Zeile 1744: if !has_key(g:polyglot_is_disabled, 'dosbatch')[J

Zeile 1745:   au BufNewFile,BufRead *.bat,*.sys setf dosbatch[J

Zeile 1746: endif[J

Zeile 1747: [J

Zeile 1748: if !has_key(g:polyglot_is_disabled, 'hamster')[J

Zeile 1749:   au BufNewFile,BufRead *.hsc,*.hsm setf hamster[J

Zeile 1750: endif[J

Zeile 1751: [J

Zeile 1752: if !has_key(g:polyglot_is_disabled, 'freebasic')[J

Zeile 1753:   au BufNewFile,BufRead *.bi,*.fb setf freebasic[J

Zeile 1754: endif[J

Zeile 1755: [J

Zeile 1756: if !has_key(g:polyglot_is_disabled, 'ibasic')[J

Zeile 1757:   au BufNewFile,BufRead *.iba,*.ibi setf ibasic[J

Zeile 1758: endif[J

Zeile 1759: [J

Zeile 1760: if !has_key(g:polyglot_is_disabled, 'b')[J

Zeile 1761:   au BufNewFile,BufRead *.imp,*.mch,*.ref setf b[J

Zeile 1762: endif[J

Zeile 1763: [J

Zeile 1764: if !has_key(g:polyglot_is_disabled, 'sql')[J

Zeile 1765:   au BufNewFile,BufRead *.bdy,*.ddl,*.fnc,*.pck,*.pkb,*.pks,*.plb,*.pls,*.plsql,*.prc,*.spc,*.sql,*.tpb,*.tps,*.trg,*.tyb,*.tyc,*.typ,*.vw setf sql[J

Zeile 1766: endif[J

Zeile 1767: [J

Zeile 1768: if !has_key(g:polyglot_is_disabled, 'gitignore')[J

Zeile 1769:   au BufNewFile,BufRead *.git/info/exclude,*/.config/git/ignore,{.,}gitignore setf gitignore[J

Zeile 1770: endif[J

Zeile 1771: [J

Zeile 1772: if !has_key(g:polyglot_is_disabled, 'tads')[J

Zeile 1773:   au! BufNewFile,BufRead,BufWritePost *.t call polyglot#detect#T()[J

Zeile 1774: endif[J

Zeile 1775: [J

Zeile 1776: if !has_key(g:polyglot_is_disabled, 'prolog')[J

Zeile 1777:   au! BufNewFile,BufRead,BufWritePost *.pl call polyglot#detect#Pl()[J

Zeile 1778:   au BufNewFile,BufRead *.pdb,*.pro,*.prolog,*.yap setf prolog[J

Zeile 1779: endif[J

Zeile 1780: [J

Zeile 1781: if !has_key(g:polyglot_is_disabled, 'bzl')[J

Zeile 1782:   au BufNewFile,BufRead *.BUILD,*.bazel,*.bzl,BUCK,BUILD,BUILD.bazel,Tiltfile,WORKSPACE setf bzl[J

Zeile 1783: endif[J

Zeile 1784: [J

Zeile 1785: if !has_key(g:polyglot_is_disabled, 'odin')[J

Zeile 1786:   au BufNewFile,BufRead *.odin setf odin[J

Zeile 1787: endif[J

Zeile 1788: [J

Zeile 1789: if !has_key(g:polyglot_is_disabled, 'dosini')[J

Zeile 1790:   au BufNewFile,BufRead *.dof,*.ini,*.lektorproject,*.prefs,*.pro,*.properties,*/etc/pacman.conf,*/etc/yum.conf,{.,}editorconfig,{.,}npmrc,buildozer.spec setf dosini[J

Zeile 1791:   au BufNewFile,BufRead php.ini-* call s:StarSetf('dosini')[J

Zeile 1792:   au BufNewFile,BufRead */etc/yum.repos.d/* call s:StarSetf('dosini')[J

Zeile 1793: endif[J

Zeile 1794: [J

Zeile 1795: if !has_key(g:polyglot_is_disabled, 'spec')[J

Zeile 1796:   au BufNewFile,BufRead *.spec setf spec[J

Zeile 1797: endif[J

Zeile 1798: [J

Zeile 1799: if !has_key(g:polyglot_is_disabled, 'visual-basic')[J

Zeile 1800:   au! BufNewFile,BufRead,BufWritePost *.bas call polyglot#detect#Bas()[J

Zeile 1801:   au BufNewFile,BufRead *.cls,*.ctl,*.dsm,*.frm,*.frx,*.sba,*.vba,*.vbs setf vb[J

Zeile 1802: endif[J

Zeile 1803: [J

Zeile 1804: if !has_key(g:polyglot_is_disabled, 'basic')[J

Zeile 1805:   au BufNewFile,BufRead *.basic setf basic[J

Zeile 1806: endif[J

Zeile 1807: [J

Zeile 1808: if !has_key(g:polyglot_is_disabled, 'trasys')[J

Zeile 1809:   au! BufNewFile,BufRead,BufWritePost *.inp call polyglot#detect#Inp()[J

Zeile 1810: endif[J

Zeile 1811: [J

Zeile 1812: if !has_key(g:polyglot_is_disabled, 'zig')[J

Zeile 1813:   au BufNewFile,BufRead *.zir setf zir[J

Zeile 1814:   au BufNewFile,BufRead *.zig,*.zir setf zig[J

Zeile 1815: endif[J

Zeile 1816: [J

Zeile 1817: if !has_key(g:polyglot_is_disabled, 'zephir')[J

Zeile 1818:   au BufNewFile,BufRead *.zep setf zephir[J

Zeile 1819: endif[J

Zeile 1820: [J

Zeile 1821: if !has_key(g:polyglot_is_disabled, 'help')[J

Zeile 1822:   au BufNewFile,BufRead $VIMRUNTIME/doc/*.txt setf help[J

Zeile 1823: endif[J

Zeile 1824: [J

Zeile 1825: if !has_key(g:polyglot_is_disabled, 'helm')[J

Zeile 1826:   au BufNewFile,BufRead */templates/*.tpl,*/templates/*.yaml setf helm[J

Zeile 1827: endif[J

Zeile 1828: [J

Zeile 1829: if !has_key(g:polyglot_is_disabled, 'smarty')[J

Zeile 1830:   au BufNewFile,BufRead *.tpl setf smarty[J

Zeile 1831: endif[J

Zeile 1832: [J

Zeile 1833: if !has_key(g:polyglot_is_disabled, 'ansible')[J

Zeile 1834:   au BufNewFile,BufRead handlers.*.y{a,}ml,local.y{a,}ml,main.y{a,}ml,playbook.y{a,}ml,requirements.y{a,}ml,roles.*.y{a,}ml,site.y{a,}ml,tasks.*.y{a,}ml setf yaml.ansible[J

Zeile 1835:   au BufNewFile,BufRead host_vars/* call s:StarSetf('yaml.ansible')[J

Zeile 1836:   au BufNewFile,BufRead group_vars/* call s:StarSetf('yaml.ansible')[J

Zeile 1837: endif[J

Zeile 1838: [J

Zeile 1839: if !has_key(g:polyglot_is_disabled, 'xsl')[J

Zeile 1840:   au BufNewFile,BufRead *.xsl,*.xslt setf xsl[J

Zeile 1841: endif[J

Zeile 1842: [J

Zeile 1843: if !has_key(g:polyglot_is_disabled, 'xdc')[J

Zeile 1844:   au BufNewFile,BufRead *.xdc setf xdc[J

Zeile 1845: endif[J

Zeile 1846: [J

Zeile 1847: if !has_key(g:polyglot_is_disabled, 'vue')[J

Zeile 1848:   au BufNewFile,BufRead *.vue,*.wpy setf vue[J

Zeile 1849: endif[J

Zeile 1850: [J

Zeile 1851: if !has_key(g:polyglot_is_disabled, 'vmasm')[J

Zeile 1852:   au BufNewFile,BufRead *.mar setf vmasm[J

Zeile 1853: endif[J

Zeile 1854: [J

Zeile 1855: if !has_key(g:polyglot_is_disabled, 'velocity')[J

Zeile 1856:   au BufNewFile,BufRead *.vm setf velocity[J

Zeile 1857: endif[J

Zeile 1858: [J

Zeile 1859: if !has_key(g:polyglot_is_disabled, 'vcl')[J

Zeile 1860:   au BufNewFile,BufRead *.vcl setf vcl[J

Zeile 1861: endif[J

Zeile 1862: [J

Zeile 1863: if !has_key(g:polyglot_is_disabled, 'vbnet')[J

Zeile 1864:   au BufNewFile,BufRead *.vb,*.vbhtml setf vbnet[J

Zeile 1865: endif[J

Zeile 1866: [J

Zeile 1867: if !has_key(g:polyglot_is_disabled, 'vala')[J

Zeile 1868:   au BufNewFile,BufRead *.vala,*.valadoc,*.vapi setf vala[J

Zeile 1869: endif[J

Zeile 1870: [J

Zeile 1871: if !has_key(g:polyglot_is_disabled, 'v')[J

Zeile 1872:   au BufNewFile,BufRead *.v,*.vsh,*.vv setf vlang[J

Zeile 1873: endif[J

Zeile 1874: [J

Zeile 1875: if !has_key(g:polyglot_is_disabled, 'unison')[J

Zeile 1876:   au BufNewFile,BufRead *.u,*.uu setf unison[J

Zeile 1877: endif[J

Zeile 1878: [J

Zeile 1879: if !has_key(g:polyglot_is_disabled, 'typescript')[J

Zeile 1880:   au BufNewFile,BufRead *.ts setf typescript[J

Zeile 1881:   au BufNewFile,BufRead *.tsx setf typescriptreact[J

Zeile 1882: endif[J

Zeile 1883: [J

Zeile 1884: if !has_key(g:polyglot_is_disabled, 'twig')[J

Zeile 1885:   au BufNewFile,BufRead *.twig setf html.twig[J

Zeile 1886:   au BufNewFile,BufRead *.xml.twig setf xml.twig[J

Zeile 1887: endif[J

Zeile 1888: [J

Zeile 1889: if !has_key(g:polyglot_is_disabled, 'tutor')[J

Zeile 1890:   au BufNewFile,BufRead *.tutor setf tutor[J

Zeile 1891: endif[J

Zeile 1892: [J

Zeile 1893: if !has_key(g:polyglot_is_disabled, 'tptp')[J

Zeile 1894:   au BufNewFile,BufRead *.ax,*.p,*.tptp setf tptp[J

Zeile 1895: endif[J

Zeile 1896: [J

Zeile 1897: if !has_key(g:polyglot_is_disabled, 'toml')[J

Zeile 1898:   au BufNewFile,BufRead *.toml,*/.cargo/config,*/.cargo/credentials,Cargo.lock,Gopkg.lock,Pipfile,poetry.lock setf toml[J

Zeile 1899: endif[J

Zeile 1900: [J

Zeile 1901: if !has_key(g:polyglot_is_disabled, 'tmux')[J

Zeile 1902:   au BufNewFile,BufRead {.,}tmux*.conf setf tmux[J

Zeile 1903: endif[J

Zeile 1904: [J

Zeile 1905: if !has_key(g:polyglot_is_disabled, 'thrift')[J

Zeile 1906:   au BufNewFile,BufRead *.thrift setf thrift[J

Zeile 1907: endif[J

Zeile 1908: [J

Zeile 1909: if !has_key(g:polyglot_is_disabled, 'textile')[J

Zeile 1910:   au BufNewFile,BufRead *.textile setf textile[J

Zeile 1911: endif[J

Zeile 1912: [J

Zeile 1913: if !has_key(g:polyglot_is_disabled, 'terraform')[J

Zeile 1914:   au BufNewFile,BufRead *.tf,*.tfvars setf terraform[J

Zeile 1915:   au BufNewFile,BufRead *.hcl,*.nomad,*.workflow,{.,}terraformrc,Appfile,terraform.rc setf hcl[J

Zeile 1916: endif[J

Zeile 1917: [J

Zeile 1918: if !has_key(g:polyglot_is_disabled, 'tf')[J

Zeile 1919:   au BufNewFile,BufRead *.tf,{.,}tfrc,tfrc setf tf[J

Zeile 1920: endif[J

Zeile 1921: [J

Zeile 1922: if !has_key(g:polyglot_is_disabled, 'systemd')[J

Zeile 1923:   au BufNewFile,BufRead *.automount,*.dnssd,*.link,*.mount,*.netdev,*.network,*.nspawn,*.path,*.service,*.slice,*.socket,*.swap,*.target,*.timer,*/systemd/*.conf setf systemd[J

Zeile 1924:   au BufNewFile,BufRead *.#* call s:StarSetf('systemd')[J

Zeile 1925: endif[J

Zeile 1926: [J

Zeile 1927: if !has_key(g:polyglot_is_disabled, 'sxhkd')[J

Zeile 1928:   au BufNewFile,BufRead *.sxhkdrc,sxhkdrc setf sxhkdrc[J

Zeile 1929: endif[J

Zeile 1930: [J

Zeile 1931: if !has_key(g:polyglot_is_disabled, 'swift')[J

Zeile 1932:   au BufNewFile,BufRead *.swift setf swift[J

Zeile 1933: endif[J

Zeile 1934: [J

Zeile 1935: if !has_key(g:polyglot_is_disabled, 'svg')[J

Zeile 1936:   au BufNewFile,BufRead *.svg setf svg[J

Zeile 1937: endif[J

Zeile 1938: [J

Zeile 1939: if !has_key(g:polyglot_is_disabled, 'svelte')[J

Zeile 1940:   au BufNewFile,BufRead *.svelte setf svelte[J

Zeile 1941: endif[J

Zeile 1942: [J

Zeile 1943: if !has_key(g:polyglot_is_disabled, 'stylus')[J

Zeile 1944:   au BufNewFile,BufRead *.styl,*.stylus setf stylus[J

Zeile 1945: endif[J

Zeile 1946: [J

Zeile 1947: if !has_key(g:polyglot_is_disabled, 'solidity')[J

Zeile 1948:   au BufNewFile,BufRead *.sol setf solidity[J

Zeile 1949: endif[J

Zeile 1950: [J

Zeile 1951: if !has_key(g:polyglot_is_disabled, 'smt2')[J

Zeile 1952:   au BufNewFile,BufRead *.smt,*.smt2 setf smt2[J

Zeile 1953: endif[J

Zeile 1954: [J

Zeile 1955: if !has_key(g:polyglot_is_disabled, 'slime')[J

Zeile 1956:   au BufNewFile,BufRead *.slime setf slime[J

Zeile 1957: endif[J

Zeile 1958: [J

Zeile 1959: if !has_key(g:polyglot_is_disabled, 'slim')[J

Zeile 1960:   au BufNewFile,BufRead *.slim setf slim[J

Zeile 1961: endif[J

Zeile 1962: [J

Zeile 1963: if !has_key(g:polyglot_is_disabled, 'sh')[J

Zeile 1964:   au BufNewFile,BufRead *.bash,*.bats,*.cgi,*.command,*.env,*.fcgi,*.ksh,*.sh,*.sh.in,*.tmux,*.tool,*/etc/udev/cdsymlinks.conf,{.,}bash_aliases,{.,}bash_history,{.,}bash_logout,{.,}bash_profile,{.,}bashrc,{.,}cshrc,{.,}env,{.,}env.example,{.,}flaskenv,{.,}login,{.,}profile,9fs,PKGBUILD,bash_aliases,bash_logout,bash_profile,bashrc,cshrc,gradlew,login,man,profile setf sh[J

Zeile 1965:   au BufNewFile,BufRead *.zsh,*/etc/zprofile,{.,}zfbfmarks,{.,}zlogin,{.,}zlogout,{.,}zprofile,{.,}zshenv,{.,}zshrc setf zsh[J

Zeile 1966:   au BufNewFile,BufRead .zsh* call s:StarSetf('zsh')[J

Zeile 1967:   au BufNewFile,BufRead .zlog* call s:StarSetf('zsh')[J

Zeile 1968:   au BufNewFile,BufRead .zcompdump* call s:StarSetf('zsh')[J

Zeile 1969: endif[J

Zeile 1970: [J

Zeile 1971: if !has_key(g:polyglot_is_disabled, 'scss')[J

Zeile 1972:   au BufNewFile,BufRead *.scss setf scss[J

Zeile 1973: endif[J

Zeile 1974: [J

Zeile 1975: if !has_key(g:polyglot_is_disabled, 'scala')[J

Zeile 1976:   au BufNewFile,BufRead *.kojo,*.sc,*.scala setf scala[J

Zeile 1977: endif[J

Zeile 1978: [J

Zeile 1979: if !has_key(g:polyglot_is_disabled, 'rust')[J

Zeile 1980:   au BufNewFile,BufRead *.rs,*.rs.in setf rust[J

Zeile 1981: endif[J

Zeile 1982: [J

Zeile 1983: if !has_key(g:polyglot_is_disabled, 'brewfile')[J

Zeile 1984:   au BufNewFile,BufRead Brewfile setf brewfile[J

Zeile 1985: endif[J

Zeile 1986: [J

Zeile 1987: if !has_key(g:polyglot_is_disabled, 'rspec')[J

Zeile 1988:   au BufNewFile,BufRead *_spec.rb set ft=ruby syntax=rspec[J

Zeile 1989: endif[J

Zeile 1990: [J

Zeile 1991: if !has_key(g:polyglot_is_disabled, 'ruby')[J

Zeile 1992:   au BufNewFile,BufRead *.axlsx,*.builder,*.cap,*.eye,*.fcgi,*.gemspec,*.god,*.jbuilder,*.mspec,*.opal,*.pluginspec,*.podspec,*.prawn,*.rabl,*.rake,*.rant,*.rb,*.rbi,*.rbuild,*.rbw,*.rbx,*.rjs,*.ru,*.ruby,*.rxml,*.spec,*.thor,*.watchr,{.,}Brewfile,{.,}Guardfile,{.,}autotest,{.,}irbrc,{.,}pryrc,{.,}simplecov,Appraisals,Berksfile,Buildfile,Capfile,Cheffile,Dangerfile,Deliverfile,Fastfile,Gemfile,Guardfile,Jarfile,KitchenSink,Mavenfile,Podfile,Puppetfile,Rakefile,Routefile,Snapfile,Thorfile,Vagrantfile,[Rr]antfile,buildfile,vagrantfile setf ruby[J

Zeile 1993:   au BufNewFile,BufRead [Rr]akefile* call s:StarSetf('ruby')[J

Zeile 1994:   au BufNewFile,BufRead *.erb,*.erb.deface,*.rhtml setf eruby[J

Zeile 1995: endif[J

Zeile 1996: [J

Zeile 1997: if !has_key(g:polyglot_is_disabled, 'rst')[J

Zeile 1998:   au BufNewFile,BufRead *.rest,*.rest.txt,*.rst,*.rst.txt setf rst[J

Zeile 1999: endif[J

Zeile 2000: [J

Zeile 2001: if !has_key(g:polyglot_is_disabled, 'reason')[J

Zeile 2002:   au! BufNewFile,BufRead,BufWritePost *.re call polyglot#detect#Re()[J

Zeile 2003:   au BufNewFile,BufRead *.rei setf reason[J

Zeile 2004: endif[J

Zeile 2005: [J

Zeile 2006: if !has_key(g:polyglot_is_disabled, 'razor')[J

Zeile 2007:   au BufNewFile,BufRead *.cshtml,*.razor setf razor[J

Zeile 2008: endif[J

Zeile 2009: [J

Zeile 2010: if !has_key(g:polyglot_is_disabled, 'raml')[J

Zeile 2011:   au BufNewFile,BufRead *.raml setf raml[J

Zeile 2012: endif[J

Zeile 2013: [J

Zeile 2014: if !has_key(g:polyglot_is_disabled, 'raku')[J

Zeile 2015:   au! BufNewFile,BufRead,BufWritePost *.t call polyglot#detect#T()[J

Zeile 2016:   au! BufNewFile,BufRead,BufWritePost *.pm call polyglot#detect#Pm()[J

Zeile 2017:   au! BufNewFile,BufRead,BufWritePost *.pl call polyglot#detect#Pl()[J

Zeile 2018:   au BufNewFile,BufRead *.6pl,*.6pm,*.nqp,*.p6,*.p6l,*.p6m,*.pl6,*.pm6,*.pod6,*.raku,*.rakudoc,*.rakumod,*.rakutest,*.t6 setf raku[J

Zeile 2019: endif[J

Zeile 2020: [J

Zeile 2021: if !has_key(g:polyglot_is_disabled, 'ragel')[J

Zeile 2022:   au BufNewFile,BufRead *.rl setf ragel[J

Zeile 2023: endif[J

Zeile 2024: [J

Zeile 2025: if !has_key(g:polyglot_is_disabled, 'racket')[J

Zeile 2026:   au BufNewFile,BufRead *.rkt,*.rktd,*.rktl,*.scrbl setf racket[J

Zeile 2027: endif[J

Zeile 2028: [J

Zeile 2029: if !has_key(g:polyglot_is_disabled, 'r-lang')[J

Zeile 2030:   au BufNewFile,BufRead *.S,*.r,*.rsx,*.s,{.,}Rprofile,expr-dist setf r[J

Zeile 2031:   au BufNewFile,BufRead *.rd setf rhelp[J

Zeile 2032: endif[J

Zeile 2033: [J

Zeile 2034: if !has_key(g:polyglot_is_disabled, 'qml')[J

Zeile 2035:   au BufNewFile,BufRead *.qbs,*.qml setf qml[J

Zeile 2036: endif[J

Zeile 2037: [J

Zeile 2038: if !has_key(g:polyglot_is_disabled, 'qmake')[J

Zeile 2039:   au BufNewFile,BufRead *.pri,*.pro setf qmake[J

Zeile 2040: endif[J

Zeile 2041: [J

Zeile 2042: if !has_key(g:polyglot_is_disabled, 'requirements')[J

Zeile 2043:   au BufNewFile,BufRead *.pip,*require.{txt,in},*requirements.{txt,in},constraints.{txt,in} setf requirements[J

Zeile 2044: endif[J

Zeile 2045: [J

Zeile 2046: if !has_key(g:polyglot_is_disabled, 'python')[J

Zeile 2047:   au BufNewFile,BufRead *.cgi,*.fcgi,*.gyp,*.gypi,*.lmi,*.ptl,*.py,*.py3,*.pyde,*.pyi,*.pyp,*.pyt,*.pyw,*.rpy,*.smk,*.spec,*.tac,*.wsgi,*.xpy,{.,}gclient,{.,}pythonrc,{.,}pythonstartup,DEPS,SConscript,SConstruct,Snakefile,wscript setf python[J

Zeile 2048: endif[J

Zeile 2049: [J

Zeile 2050: if !has_key(g:polyglot_is_disabled, 'purescript')[J

Zeile 2051:   au BufNewFile,BufRead *.purs setf purescript[J

Zeile 2052: endif[J

Zeile 2053: [J

Zeile 2054: if !has_key(g:polyglot_is_disabled, 'puppet')[J

Zeile 2055:   au BufNewFile,BufRead *.pp,Modulefile setf puppet[J

Zeile 2056:   au BufNewFile,BufRead *.epp setf embeddedpuppet[J

Zeile 2057: endif[J

Zeile 2058: [J

Zeile 2059: if !has_key(g:polyglot_is_disabled, 'pug')[J

Zeile 2060:   au BufNewFile,BufRead *.jade,*.pug setf pug[J

Zeile 2061: endif[J

Zeile 2062: [J

Zeile 2063: if !has_key(g:polyglot_is_disabled, 'protobuf')[J

Zeile 2064:   au BufNewFile,BufRead *.proto setf proto[J

Zeile 2065: endif[J

Zeile 2066: [J

Zeile 2067: if !has_key(g:polyglot_is_disabled, 'powershell')[J

Zeile 2068:   au BufNewFile,BufRead *.ps1,*.psd1,*.psm1,*.pssc setf ps1[J

Zeile 2069:   au BufNewFile,BufRead *.ps1xml setf ps1xml[J

Zeile 2070: endif[J

Zeile 2071: [J

Zeile 2072: if !has_key(g:polyglot_is_disabled, 'pony')[J

Zeile 2073:   au BufNewFile,BufRead *.pony setf pony[J

Zeile 2074: endif[J

Zeile 2075: [J

Zeile 2076: if !has_key(g:polyglot_is_disabled, 'plantuml')[J

Zeile 2077:   au BufNewFile,BufRead *.iuml,*.plantuml,*.pu,*.puml,*.uml setf plantuml[J

Zeile 2078: endif[J

Zeile 2079: [J

Zeile 2080: if !has_key(g:polyglot_is_disabled, 'pest')[J

Zeile 2081:   au BufNewFile,BufRead *.pest setf pest[J

Zeile 2082: endif[J

Zeile 2083: [J

Zeile 2084: if !has_key(g:polyglot_is_disabled, 'blade')[J

Zeile 2085:   au BufNewFile,BufRead *.blade,*.blade.php setf blade[J

Zeile 2086: endif[J

Zeile 2087: [J

Zeile 2088: if !has_key(g:polyglot_is_disabled, 'php')[J

Zeile 2089:   au BufNewFile,BufRead *.aw,*.ctp,*.fcgi,*.inc,*.php,*.php3,*.php4,*.php5,*.php9,*.phps,*.phpt,*.phtml,{.,}php,{.,}php_cs,{.,}php_cs.dist,Phakefile setf php[J

Zeile 2090: endif[J

Zeile 2091: [J

Zeile 2092: if !has_key(g:polyglot_is_disabled, 'cql')[J

Zeile 2093:   au BufNewFile,BufRead *.cql setf cql[J

Zeile 2094: endif[J

Zeile 2095: [J

Zeile 2096: if !has_key(g:polyglot_is_disabled, 'pgsql')[J

Zeile 2097:   au BufNewFile,BufRead *.pgsql let b:sql_type_override='pgsql' | set ft=sql[J

Zeile 2098: endif[J

Zeile 2099: [J

Zeile 2100: if !has_key(g:polyglot_is_disabled, 'perl')[J

Zeile 2101:   au! BufNewFile,BufRead,BufWritePost *.t call polyglot#detect#T()[J

Zeile 2102:   au! BufNewFile,BufRead,BufWritePost *.pm call polyglot#detect#Pm()[J

Zeile 2103:   au! BufNewFile,BufRead,BufWritePost *.pl call polyglot#detect#Pl()[J

Zeile 2104:   au BufNewFile,BufRead *.al,*.cgi,*.fcgi,*.perl,*.ph,*.plx,*.psgi,{.,}gitolite.rc,Makefile.PL,Rexfile,ack,cpanfile,example.gitolite.rc setf perl[J

Zeile 2105:   au BufNewFile,BufRead *.pod setf pod[J

Zeile 2106:   au BufNewFile,BufRead *.comp,*.mason,*.mhtml setf mason[J

Zeile 2107:   au! BufNewFile,BufRead,BufWritePost *.tt2 call polyglot#detect#Tt2()[J

Zeile 2108:   au! BufNewFile,BufRead,BufWritePost *.tt2 call polyglot#detect#Tt2()[J

Zeile 2109:   au BufNewFile,BufRead *.xs setf xs[J

Zeile 2110: endif[J

Zeile 2111: [J

Zeile 2112: if !has_key(g:polyglot_is_disabled, 'rc')[J

Zeile 2113:   au BufNewFile,BufRead *.rc,*.rch setf rc[J

Zeile 2114: endif[J

Zeile 2115: [J

Zeile 2116: if !has_key(g:polyglot_is_disabled, 'opencl')[J

Zeile 2117:   au BufNewFile,BufRead *.cl,*.opencl setf opencl[J

Zeile 2118: endif[J

Zeile 2119: [J

Zeile 2120: if !has_key(g:polyglot_is_disabled, 'octave')[J

Zeile 2121:   au! BufNewFile,BufRead,BufWritePost *.m call polyglot#detect#M()[J

Zeile 2122:   au BufNewFile,BufRead *.oct setf octave[J

Zeile 2123: endif[J

Zeile 2124: [J

Zeile 2125: if !has_key(g:polyglot_is_disabled, 'ocaml')[J

Zeile 2126:   au BufNewFile,BufRead *.eliom,*.eliomi,*.ml,*.ml.cppo,*.ml4,*.mli,*.mli.cppo,*.mlip,*.mll,*.mlp,*.mlt,*.mly,{.,}ocamlinit setf ocaml[J

Zeile 2127:   au BufNewFile,BufRead *.om,OMakefile,OMakeroot,OMakeroot.in setf omake[J

Zeile 2128:   au BufNewFile,BufRead *.opam,*.opam.template,opam setf opam[J

Zeile 2129:   au BufNewFile,BufRead _oasis setf oasis[J

Zeile 2130:   au BufNewFile,BufRead dune,dune-project,dune-workspace,jbuild setf dune[J

Zeile 2131:   au BufNewFile,BufRead _tags setf ocamlbuild_tags[J

Zeile 2132:   au BufNewFile,BufRead *.ocp setf ocpbuild[J

Zeile 2133:   au BufNewFile,BufRead *.root setf ocpbuildroot[J

Zeile 2134:   au BufNewFile,BufRead *.sexp setf sexplib[J

Zeile 2135: endif[J

Zeile 2136: [J

Zeile 2137: if !has_key(g:polyglot_is_disabled, 'objc')[J

Zeile 2138:   au! BufNewFile,BufRead,BufWritePost *.m call polyglot#detect#M()[J

Zeile 2139:   au! BufNewFile,BufRead,BufWritePost *.h call polyglot#detect#H()[J

Zeile 2140: endif[J

Zeile 2141: [J

Zeile 2142: if !has_key(g:polyglot_is_disabled, 'nix')[J

Zeile 2143:   au BufNewFile,BufRead *.nix setf nix[J

Zeile 2144: endif[J

Zeile 2145: [J

Zeile 2146: if !has_key(g:polyglot_is_disabled, 'nim')[J

Zeile 2147:   au BufNewFile,BufRead *.nim,*.nim.cfg,*.nimble,*.nimrod,*.nims,nim.cfg setf nim[J

Zeile 2148: endif[J

Zeile 2149: [J

Zeile 2150: if !has_key(g:polyglot_is_disabled, 'nginx')[J

Zeile 2151:   au BufNewFile,BufRead *.nginx,*.nginxconf,*.vhost,*/nginx/*.conf,*nginx.conf,nginx*.conf,nginx.conf setf nginx[J

Zeile 2152:   au BufNewFile,BufRead */usr/local/nginx/conf/* call s:StarSetf('nginx')[J

Zeile 2153:   au BufNewFile,BufRead */etc/nginx/* call s:StarSetf('nginx')[J

Zeile 2154: endif[J

Zeile 2155: [J

Zeile 2156: if !has_key(g:polyglot_is_disabled, 'murphi')[J

Zeile 2157:   au! BufNewFile,BufRead,BufWritePost *.m call polyglot#detect#M()[J

Zeile 2158: endif[J

Zeile 2159: [J

Zeile 2160: if !has_key(g:polyglot_is_disabled, 'moonscript')[J

Zeile 2161:   au BufNewFile,BufRead *.moon setf moon[J

Zeile 2162: endif[J

Zeile 2163: [J

Zeile 2164: if !has_key(g:polyglot_is_disabled, 'meson')[J

Zeile 2165:   au BufNewFile,BufRead meson.build,meson_options.txt setf meson[J

Zeile 2166:   au BufNewFile,BufRead *.wrap setf dosini[J

Zeile 2167: endif[J

Zeile 2168: [J

Zeile 2169: if !has_key(g:polyglot_is_disabled, 'mdx')[J

Zeile 2170:   au BufNewFile,BufRead *.mdx setf markdown.mdx[J

Zeile 2171: endif[J

Zeile 2172: [J

Zeile 2173: if !has_key(g:polyglot_is_disabled, 'mathematica')[J

Zeile 2174:   au! BufNewFile,BufRead,BufWritePost *.m call polyglot#detect#M()[J

Zeile 2175:   au BufNewFile,BufRead *.cdf,*.ma,*.mathematica,*.mma,*.mt,*.nb,*.nbp,*.wl,*.wls,*.wlt setf mma[J

Zeile 2176: endif[J

Zeile 2177: [J

Zeile 2178: if !has_key(g:polyglot_is_disabled, 'mako')[J

Zeile 2179:   au BufNewFile,BufRead *.mako,*.mao setf mako[J

Zeile 2180:   au BufReadPre *.*.mao execute "do BufRead filetypedetect " . expand("<afile>:r") | let b:mako_outer_lang = &filetype[J

Zeile 2181:   au BufNewFile *.*.mao execute "do BufNewFile filetypedetect " . expand("<afile>:r") | let b:mako_outer_lang = &filetype[J

Zeile 2182:   au BufReadPre *.*.mako execute "do BufRead filetypedetect " . expand("<afile>:r") | let b:mako_outer_lang = &filetype[J

Zeile 2183:   au BufNewFile *.*.mako execute "do BufNewFile filetypedetect " . expand("<afile>:r") | let b:mako_outer_lang = &filetype[J

Zeile 2184: endif[J

Zeile 2185: [J

Zeile 2186: if !has_key(g:polyglot_is_disabled, 'm4')[J

Zeile 2187:   au BufNewFile,BufRead *.at,*.m4 setf m4[J

Zeile 2188: endif[J

Zeile 2189: [J

Zeile 2190: if !has_key(g:polyglot_is_disabled, 'lua')[J

Zeile 2191:   au BufNewFile,BufRead *.fcgi,*.lua,*.nse,*.p8,*.pd_lua,*.rbxs,*.rockspec,*.wlua,{.,}luacheckrc setf lua[J

Zeile 2192: endif[J

Zeile 2193: [J

Zeile 2194: if !has_key(g:polyglot_is_disabled, 'log')[J

Zeile 2195:   au BufNewFile,BufRead *.LOG,*.log,*_LOG,*_log setf log[J

Zeile 2196: endif[J

Zeile 2197: [J

Zeile 2198: if !has_key(g:polyglot_is_disabled, 'llvm')[J

Zeile 2199:   au BufNewFile,BufRead *.ll setf llvm[J

Zeile 2200:   au BufNewFile,BufRead *.td setf tablegen[J

Zeile 2201: endif[J

Zeile 2202: [J

Zeile 2203: if !has_key(g:polyglot_is_disabled, 'livescript')[J

Zeile 2204:   au BufNewFile,BufRead *._ls,*.ls,Slakefile setf ls[J

Zeile 2205: endif[J

Zeile 2206: [J

Zeile 2207: if !has_key(g:polyglot_is_disabled, 'lilypond')[J

Zeile 2208:   au BufNewFile,BufRead *.ily,*.ly setf lilypond[J

Zeile 2209: endif[J

Zeile 2210: [J

Zeile 2211: if !has_key(g:polyglot_is_disabled, 'less')[J

Zeile 2212:   au BufNewFile,BufRead *.less setf less[J

Zeile 2213: endif[J

Zeile 2214: [J

Zeile 2215: if !has_key(g:polyglot_is_disabled, 'ledger')[J

Zeile 2216:   au BufNewFile,BufRead *.journal,*.ldg,*.ledger setf ledger[J

Zeile 2217: endif[J

Zeile 2218: [J

Zeile 2219: if !has_key(g:polyglot_is_disabled, 'kotlin')[J

Zeile 2220:   au BufNewFile,BufRead *.kt,*.ktm,*.kts setf kotlin[J

Zeile 2221: endif[J

Zeile 2222: [J

Zeile 2223: if !has_key(g:polyglot_is_disabled, 'julia')[J

Zeile 2224:   au BufNewFile,BufRead *.jl setf julia[J

Zeile 2225: endif[J

Zeile 2226: [J

Zeile 2227: if !has_key(g:polyglot_is_disabled, 'jst')[J

Zeile 2228:   au BufNewFile,BufRead *.ect,*.ejs,*.jst setf jst[J

Zeile 2229: endif[J

Zeile 2230: [J

Zeile 2231: if !has_key(g:polyglot_is_disabled, 'jsonnet')[J

Zeile 2232:   au BufNewFile,BufRead *.jsonnet,*.libsonnet setf jsonnet[J

Zeile 2233: endif[J

Zeile 2234: [J

Zeile 2235: if !has_key(g:polyglot_is_disabled, 'json')[J

Zeile 2236:   au BufNewFile,BufRead *.JSON-tmLanguage,*.avsc,*.geojson,*.gltf,*.har,*.ice,*.json,*.jsonl,*.jsonp,*.mcmeta,*.template,*.tfstate,*.tfstate.backup,*.topojson,*.webapp,*.webmanifest,*.yy,*.yyp,{.,}arcconfig,{.,}auto-changelog,{.,}c8rc,{.,}htmlhintrc,{.,}imgbotconfig,{.,}nycrc,{.,}tern-config,{.,}tern-project,{.,}watchmanconfig,Pipfile.lock,composer.lock,mcmod.info setf json[J

Zeile 2237: endif[J

Zeile 2238: [J

Zeile 2239: if !has_key(g:polyglot_is_disabled, 'json5')[J

Zeile 2240:   au BufNewFile,BufRead *.json5 setf json5[J

Zeile 2241: endif[J

Zeile 2242: [J

Zeile 2243: if !has_key(g:polyglot_is_disabled, 'jq')[J

Zeile 2244:   au BufNewFile,BufRead *.jq,{.,}jqrc setf jq[J

Zeile 2245:   au BufNewFile,BufRead .jqrc* call s:StarSetf('jq')[J

Zeile 2246: endif[J

Zeile 2247: [J

Zeile 2248: if !has_key(g:polyglot_is_disabled, 'htmldjango')[J

Zeile 2249:   au BufNewFile,BufRead *.j2,*.jinja,*.jinja2 setf htmldjango[J

Zeile 2250: endif[J

Zeile 2251: [J

Zeile 2252: if !has_key(g:polyglot_is_disabled, 'jenkins')[J

Zeile 2253:   au BufNewFile,BufRead *.Jenkinsfile,*.jenkinsfile,Jenkinsfile setf Jenkinsfile[J

Zeile 2254:   au BufNewFile,BufRead Jenkinsfile* call s:StarSetf('Jenkinsfile')[J

Zeile 2255: endif[J

Zeile 2256: [J

Zeile 2257: if !has_key(g:polyglot_is_disabled, 'ion')[J

Zeile 2258:   au BufNewFile,BufRead *.ion,~/.config/ion/initrc setf ion[J

Zeile 2259: endif[J

Zeile 2260: [J

Zeile 2261: if !has_key(g:polyglot_is_disabled, 'idris2')[J

Zeile 2262:   au! BufNewFile,BufRead,BufWritePost *.idr call polyglot#detect#Idr()[J

Zeile 2263:   au BufNewFile,BufRead *.ipkg,idris-response setf idris2[J

Zeile 2264:   au! BufNewFile,BufRead,BufWritePost *.lidr call polyglot#detect#Lidr()[J

Zeile 2265: endif[J

Zeile 2266: [J

Zeile 2267: if !has_key(g:polyglot_is_disabled, 'idris')[J

Zeile 2268:   au! BufNewFile,BufRead,BufWritePost *.lidr call polyglot#detect#Lidr()[J

Zeile 2269:   au! BufNewFile,BufRead,BufWritePost *.idr call polyglot#detect#Idr()[J

Zeile 2270:   au BufNewFile,BufRead idris-response setf idris[J

Zeile 2271: endif[J

Zeile 2272: [J

Zeile 2273: if !has_key(g:polyglot_is_disabled, 'icalendar')[J

Zeile 2274:   au BufNewFile,BufRead *.ics setf icalendar[J

Zeile 2275: endif[J

Zeile 2276: [J

Zeile 2277: if !has_key(g:polyglot_is_disabled, 'hive')[J

Zeile 2278:   au BufNewFile,BufRead *.hql,*.q,*.ql setf hive[J

Zeile 2279: endif[J

Zeile 2280: [J

Zeile 2281: if !has_key(g:polyglot_is_disabled, 'haxe')[J

Zeile 2282:   au BufNewFile,BufRead *.hx,*.hxsl setf haxe[J

Zeile 2283:   au BufNewFile,BufRead *.hxml setf hxml[J

Zeile 2284:   au BufNewFile,BufRead *.hss setf hss[J

Zeile 2285: endif[J

Zeile 2286: [J

Zeile 2287: if !has_key(g:polyglot_is_disabled, 'haskell')[J

Zeile 2288:   au BufNewFile,BufRead *.bpk,*.hs,*.hs-boot,*.hsc,*.hsig setf haskell[J

Zeile 2289: endif[J

Zeile 2290: [J

Zeile 2291: if !has_key(g:polyglot_is_disabled, 'haproxy')[J

Zeile 2292:   au BufNewFile,BufRead haproxy*.conf* call s:StarSetf('haproxy')[J

Zeile 2293:   au BufNewFile,BufRead haproxy*.cfg* call s:StarSetf('haproxy')[J

Zeile 2294: endif[J

Zeile 2295: [J

Zeile 2296: if !has_key(g:polyglot_is_disabled, 'handlebars')[J

Zeile 2297:   au BufNewFile,BufRead *.hjs,*.hogan,*.hulk,*.mustache setf html.mustache[J

Zeile 2298:   au BufNewFile,BufRead *.handlebars,*.hb,*.hbs,*.hdbs setf html.handlebars[J

Zeile 2299: endif[J

Zeile 2300: [J

Zeile 2301: if !has_key(g:polyglot_is_disabled, 'haml')[J

Zeile 2302:   au BufNewFile,BufRead *.haml,*.haml.deface,*.hamlbars,*.hamlc setf haml[J

Zeile 2303: endif[J

Zeile 2304: [J

Zeile 2305: if !has_key(g:polyglot_is_disabled, 'grub')[J

Zeile 2306:   au BufNewFile,BufRead */boot/grub/grub.conf,*/boot/grub/menu.lst,*/etc/grub.conf setf grub[J

Zeile 2307: endif[J

Zeile 2308: [J

Zeile 2309: if !has_key(g:polyglot_is_disabled, 'groovy')[J

Zeile 2310:   au BufNewFile,BufRead *.gradle,*.groovy,*.grt,*.gtpl,*.gvy,Jenkinsfile setf groovy[J

Zeile 2311: endif[J

Zeile 2312: [J

Zeile 2313: if !has_key(g:polyglot_is_disabled, 'graphql')[J

Zeile 2314:   au BufNewFile,BufRead *.gql,*.graphql,*.graphqls setf graphql[J

Zeile 2315: endif[J

Zeile 2316: [J

Zeile 2317: if !has_key(g:polyglot_is_disabled, 'jsx')[J

Zeile 2318:   au BufNewFile,BufRead *.jsx setf javascriptreact[J

Zeile 2319: endif[J

Zeile 2320: [J

Zeile 2321: if !has_key(g:polyglot_is_disabled, 'javascript')[J

Zeile 2322:   au BufNewFile,BufRead *._js,*.bones,*.cjs,*.es,*.es6,*.frag,*.gs,*.jake,*.javascript,*.js,*.jsb,*.jscad,*.jsfl,*.jsm,*.jss,*.jsx,*.mjs,*.njs,*.pac,*.sjs,*.ssjs,*.xsjs,*.xsjslib,Jakefile setf javascript[J

Zeile 2323:   au BufNewFile,BufRead *.flow setf flow[J

Zeile 2324: endif[J

Zeile 2325: [J

Zeile 2326: if !has_key(g:polyglot_is_disabled, 'go')[J

Zeile 2327:   au BufNewFile,BufRead *.go setf go[J

Zeile 2328:   au BufNewFile,BufRead go.mod setf gomod[J

Zeile 2329:   au BufNewFile,BufRead *.tmpl setf gohtmltmpl[J

Zeile 2330: endif[J

Zeile 2331: [J

Zeile 2332: if !has_key(g:polyglot_is_disabled, 'gnuplot')[J

Zeile 2333:   au BufNewFile,BufRead *.gnu,*.gnuplot,*.gp,*.gpi,*.p,*.plot,*.plt setf gnuplot[J

Zeile 2334: endif[J

Zeile 2335: [J

Zeile 2336: if !has_key(g:polyglot_is_disabled, 'gmpl')[J

Zeile 2337:   au BufNewFile,BufRead *.mod setf gmpl[J

Zeile 2338: endif[J

Zeile 2339: [J

Zeile 2340: if !has_key(g:polyglot_is_disabled, 'glsl')[J

Zeile 2341:   au! BufNewFile,BufRead,BufWritePost *.fs call polyglot#detect#Fs()[J

Zeile 2342:   au BufNewFile,BufRead *.comp,*.fp,*.frag,*.frg,*.fsh,*.fshader,*.geo,*.geom,*.glsl,*.glslf,*.glslv,*.gs,*.gshader,*.shader,*.tesc,*.tese,*.vert,*.vrx,*.vsh,*.vshader setf glsl[J

Zeile 2343: endif[J

Zeile 2344: [J

Zeile 2345: if !has_key(g:polyglot_is_disabled, 'git')[J

Zeile 2346:   au BufNewFile,BufRead *.gitconfig,*.git/config,*.git/modules/*/config,*/.config/git/config,*/git/config,{.,}gitconfig,{.,}gitmodules setf gitconfig[J

Zeile 2347:   au BufNewFile,BufRead */{.,}gitconfig.d/* call s:StarSetf('gitconfig')[J

Zeile 2348:   au BufNewFile,BufRead git-rebase-todo setf gitrebase[J

Zeile 2349:   au BufNewFile,BufRead .gitsendemail.* call s:StarSetf('gitsendemail')[J

Zeile 2350:   au BufNewFile,BufRead COMMIT_EDITMSG,MERGE_MSG,TAG_EDITMSG setf gitcommit[J

Zeile 2351: endif[J

Zeile 2352: [J

Zeile 2353: if !has_key(g:polyglot_is_disabled, 'gdscript')[J

Zeile 2354:   au BufNewFile,BufRead *.gd setf gdscript3[J

Zeile 2355: endif[J

Zeile 2356: [J

Zeile 2357: if !has_key(g:polyglot_is_disabled, 'fsharp')[J

Zeile 2358:   au! BufNewFile,BufRead,BufWritePost *.fs call polyglot#detect#Fs()[J

Zeile 2359:   au BufNewFile,BufRead *.fsi,*.fsx setf fsharp[J

Zeile 2360: endif[J

Zeile 2361: [J

Zeile 2362: if !has_key(g:polyglot_is_disabled, 'forth')[J

Zeile 2363:   au! BufNewFile,BufRead,BufWritePost *.fs call polyglot#detect#Fs()[J

Zeile 2364:   au BufNewFile,BufRead *.ft,*.fth setf forth[J

Zeile 2365: endif[J

Zeile 2366: [J

Zeile 2367: if !has_key(g:polyglot_is_disabled, 'flatbuffers')[J

Zeile 2368:   au BufNewFile,BufRead *.fbs setf fbs[J

Zeile 2369: endif[J

Zeile 2370: [J

Zeile 2371: if !has_key(g:polyglot_is_disabled, 'fish')[J

Zeile 2372:   au BufNewFile,BufRead *.fish setf fish[J

Zeile 2373: endif[J

Zeile 2374: [J

Zeile 2375: if !has_key(g:polyglot_is_disabled, 'ferm')[J

Zeile 2376:   au BufNewFile,BufRead *.ferm,ferm.conf setf ferm[J

Zeile 2377: endif[J

Zeile 2378: [J

Zeile 2379: if !has_key(g:polyglot_is_disabled, 'fennel')[J

Zeile 2380:   au BufNewFile,BufRead *.fnl setf fennel[J

Zeile 2381: endif[J

Zeile 2382: [J

Zeile 2383: if !has_key(g:polyglot_is_disabled, 'erlang')[J

Zeile 2384:   au BufNewFile,BufRead *.app,*.app.src,*.erl,*.es,*.escript,*.hrl,*.xrl,*.yaws,*.yrl,Emakefile,rebar.config,rebar.config.lock,rebar.lock setf erlang[J

Zeile 2385: endif[J

Zeile 2386: [J

Zeile 2387: if !has_key(g:polyglot_is_disabled, 'emblem')[J

Zeile 2388:   au BufNewFile,BufRead *.em,*.emblem setf emblem[J

Zeile 2389: endif[J

Zeile 2390: [J

Zeile 2391: if !has_key(g:polyglot_is_disabled, 'emberscript')[J

Zeile 2392:   au BufNewFile,BufRead *.em,*.emberscript setf ember-script[J

Zeile 2393: endif[J

Zeile 2394: [J

Zeile 2395: if !has_key(g:polyglot_is_disabled, 'elm')[J

Zeile 2396:   au BufNewFile,BufRead *.elm setf elm[J

Zeile 2397: endif[J

Zeile 2398: [J

Zeile 2399: if !has_key(g:polyglot_is_disabled, 'elixir')[J

Zeile 2400:   au BufNewFile,BufRead *.ex,*.exs,mix.lock setf elixir[J

Zeile 2401:   au BufNewFile,BufRead *.eex,*.html.leex,*.leex setf eelixir[J

Zeile 2402: endif[J

Zeile 2403: [J

Zeile 2404: if !has_key(g:polyglot_is_disabled, 'docker-compose')[J

Zeile 2405:   au BufNewFile,BufRead docker-compose*.yaml,docker-compose*.yml setf yaml.docker-compose[J

Zeile 2406: endif[J

Zeile 2407: [J

Zeile 2408: if !has_key(g:polyglot_is_disabled, 'yaml')[J

Zeile 2409:   au BufNewFile,BufRead *.mir,*.reek,*.rviz,*.sublime-syntax,*.syntax,*.yaml,*.yaml-tmlanguage,*.yaml.sed,*.yml,*.yml.mysql,{.,}clang-format,{.,}clang-tidy,{.,}gemrc,fish_history,fish_read_history,glide.lock,yarn.lock setf yaml[J

Zeile 2410: endif[J

Zeile 2411: [J

Zeile 2412: if !has_key(g:polyglot_is_disabled, 'mysql')[J

Zeile 2413:   au BufNewFile,BufRead *.mysql setf mysql[J

Zeile 2414: endif[J

Zeile 2415: [J

Zeile 2416: if !has_key(g:polyglot_is_disabled, 'sed')[J

Zeile 2417:   au BufNewFile,BufRead *.sed setf sed[J

Zeile 2418: endif[J

Zeile 2419: [J

Zeile 2420: if !has_key(g:polyglot_is_disabled, 'dlang')[J

Zeile 2421:   au BufNewFile,BufRead *.d,*.di setf d[J

Zeile 2422:   au BufNewFile,BufRead *.lst setf dcov[J

Zeile 2423:   au BufNewFile,BufRead *.dd setf dd[J

Zeile 2424:   au BufNewFile,BufRead *.ddoc setf ddoc[J

Zeile 2425:   au BufNewFile,BufRead *.sdl setf dsdl[J

Zeile 2426: endif[J

Zeile 2427: [J

Zeile 2428: if !has_key(g:polyglot_is_disabled, 'dhall')[J

Zeile 2429:   au BufNewFile,BufRead *.dhall setf dhall[J

Zeile 2430: endif[J

Zeile 2431: [J

Zeile 2432: if !has_key(g:polyglot_is_disabled, 'dart')[J

Zeile 2433:   au BufNewFile,BufRead *.dart,*.drt setf dart[J

Zeile 2434: endif[J

Zeile 2435: [J

Zeile 2436: if !has_key(g:polyglot_is_disabled, 'cue')[J

Zeile 2437:   au BufNewFile,BufRead *.cue setf cuesheet[J

Zeile 2438: endif[J

Zeile 2439: [J

Zeile 2440: if !has_key(g:polyglot_is_disabled, 'cucumber')[J

Zeile 2441:   au BufNewFile,BufRead *.feature,*.story setf cucumber[J

Zeile 2442: endif[J

Zeile 2443: [J

Zeile 2444: if !has_key(g:polyglot_is_disabled, 'crystal')[J

Zeile 2445:   au BufNewFile,BufRead *.cr,Projectfile setf crystal[J

Zeile 2446:   au BufNewFile,BufRead *.ecr setf ecrystal[J

Zeile 2447: endif[J

Zeile 2448: [J

Zeile 2449: if !has_key(g:polyglot_is_disabled, 'cryptol')[J

Zeile 2450:   au BufNewFile,BufRead *.cry,*.cyl,*.lcry,*.lcyl setf cryptol[J

Zeile 2451: endif[J

Zeile 2452: [J

Zeile 2453: if !has_key(g:polyglot_is_disabled, 'coffee-script')[J

Zeile 2454:   au BufNewFile,BufRead *._coffee,*.cake,*.cjsx,*.coffee,*.coffeekup,*.cson,*.iced,Cakefile setf coffee[J

Zeile 2455:   au BufNewFile,BufRead *.coffee.md,*.litcoffee setf litcoffee[J

Zeile 2456: endif[J

Zeile 2457: [J

Zeile 2458: if !has_key(g:polyglot_is_disabled, 'markdown')[J

Zeile 2459:   au BufNewFile,BufRead *.markdown,*.md,*.mdown,*.mdwn,*.mkd,*.mkdn,*.mkdown,*.ronn,*.scd,*.workbook,contents.lr setf markdown[J

Zeile 2460: endif[J

Zeile 2461: [J

Zeile 2462: if !has_key(g:polyglot_is_disabled, 'cmake')[J

Zeile 2463:   au BufNewFile,BufRead *.cmake,*.cmake.in,CMakeLists.txt setf cmake[J

Zeile 2464: endif[J

Zeile 2465: [J

Zeile 2466: if !has_key(g:polyglot_is_disabled, 'clojure')[J

Zeile 2467:   au BufNewFile,BufRead *.boot,*.cl2,*.clj,*.cljc,*.cljs,*.cljs.hl,*.cljscm,*.cljx,*.edn,*.hic,build.boot,profile.boot,riemann.config setf clojure[J

Zeile 2468: endif[J

Zeile 2469: [J

Zeile 2470: if !has_key(g:polyglot_is_disabled, 'carp')[J

Zeile 2471:   au BufNewFile,BufRead *.carp setf carp[J

Zeile 2472: endif[J

Zeile 2473: [J

Zeile 2474: if !has_key(g:polyglot_is_disabled, 'caddyfile')[J

Zeile 2475:   au BufNewFile,BufRead Caddyfile setf caddyfile[J

Zeile 2476: endif[J

Zeile 2477: [J

Zeile 2478: if !has_key(g:polyglot_is_disabled, 'awk')[J

Zeile 2479:   au BufNewFile,BufRead *.awk,*.gawk setf awk[J

Zeile 2480: endif[J

Zeile 2481: [J

Zeile 2482: if !has_key(g:polyglot_is_disabled, 'ave')[J

Zeile 2483:   au BufNewFile,BufRead *.ave setf ave[J

Zeile 2484: endif[J

Zeile 2485: [J

Zeile 2486: if !has_key(g:polyglot_is_disabled, 'autoit')[J

Zeile 2487:   au BufNewFile,BufRead *.au3 setf autoit[J

Zeile 2488: endif[J

Zeile 2489: [J

Zeile 2490: if !has_key(g:polyglot_is_disabled, 'atlas')[J

Zeile 2491:   au BufNewFile,BufRead *.as,*.atl setf atlas[J

Zeile 2492: endif[J

Zeile 2493: [J

Zeile 2494: if !has_key(g:polyglot_is_disabled, 'aspperl')[J

Zeile 2495:   au! BufNewFile,BufRead,BufWritePost *.asp call polyglot#detect#Asp()[J

Zeile 2496: endif[J

Zeile 2497: [J

Zeile 2498: if !has_key(g:polyglot_is_disabled, 'aspvbs')[J

Zeile 2499:   au! BufNewFile,BufRead,BufWritePost *.asp call polyglot#detect#Asp()[J

Zeile 2500:   au! BufNewFile,BufRead,BufWritePost *.asa call polyglot#detect#Asa()[J

Zeile 2501: endif[J

Zeile 2502: [J

Zeile 2503: if !has_key(g:polyglot_is_disabled, 'asn')[J

Zeile 2504:   au BufNewFile,BufRead *.asn,*.asn1 setf asn[J

Zeile 2505: endif[J

Zeile 2506: [J

Zeile 2507: if !has_key(g:polyglot_is_disabled, 'automake')[J

Zeile 2508:   au BufNewFile,BufRead GNUmakefile.am,[mM]akefile.am setf automake[J

Zeile 2509: endif[J

Zeile 2510: [J

Zeile 2511: if !has_key(g:polyglot_is_disabled, 'elf')[J

Zeile 2512:   au BufNewFile,BufRead *.am setf elf[J

Zeile 2513: endif[J

Zeile 2514: [J

Zeile 2515: if !has_key(g:polyglot_is_disabled, 'make')[J

Zeile 2516:   au BufNewFile,BufRead *.dsp,*.mak,*.mk,*[mM]akefile setf make[J

Zeile 2517: endif[J

Zeile 2518: [J

Zeile 2519: if !has_key(g:polyglot_is_disabled, 'autohotkey')[J

Zeile 2520:   au BufNewFile,BufRead *.ahk,*.ahkl setf autohotkey[J

Zeile 2521: endif[J

Zeile 2522: [J

Zeile 2523: if !has_key(g:polyglot_is_disabled, 'asciidoc')[J

Zeile 2524:   au BufNewFile,BufRead *.adoc,*.asc,*.asciidoc setf asciidoc[J

Zeile 2525: endif[J

Zeile 2526: [J

Zeile 2527: if !has_key(g:polyglot_is_disabled, 'art')[J

Zeile 2528:   au BufNewFile,BufRead *.art setf art[J

Zeile 2529: endif[J

Zeile 2530: [J

Zeile 2531: if !has_key(g:polyglot_is_disabled, 'arduino')[J

Zeile 2532:   au BufNewFile,BufRead *.ino,*.pde setf arduino[J

Zeile 2533: endif[J

Zeile 2534: [J

Zeile 2535: if !has_key(g:polyglot_is_disabled, 'c/c++')[J

Zeile 2536:   au! BufNewFile,BufRead,BufWritePost *.h call polyglot#detect#H()[J

Zeile 2537:   au BufNewFile,BufRead *.c++,*.cc,*.cp,*.cpp,*.cxx,*.h++,*.hh,*.hpp,*.hxx,*.inc,*.inl,*.ipp,*.moc,*.tcc,*.tlh,*.tpp setf cpp[J

Zeile 2538:   au! BufNewFile,BufRead,BufWritePost *.h call polyglot#detect#H()[J

Zeile 2539:   au BufNewFile,BufRead *.c,*.cats,*.idc,*.qc,*enlightenment/*.cfg setf c[J

Zeile 2540: endif[J

Zeile 2541: [J

Zeile 2542: if !has_key(g:polyglot_is_disabled, 'arch')[J

Zeile 2543:   au BufNewFile,BufRead {.,}arch-inventory,=tagging-method setf arch[J

Zeile 2544: endif[J

Zeile 2545: [J

Zeile 2546: if !has_key(g:polyglot_is_disabled, 'aptconf')[J

Zeile 2547:   au BufNewFile,BufRead */.aptitude/config,*/etc/apt/apt.conf.d/*.conf,apt.conf setf aptconf[J

Zeile 2548:   au BufNewFile,BufRead */etc/apt/apt.conf.d/[^.]* call s:StarSetf('aptconf')[J

Zeile 2549: endif[J

Zeile 2550: [J

Zeile 2551: if !has_key(g:polyglot_is_disabled, 'applescript')[J

Zeile 2552:   au BufNewFile,BufRead *.applescript,*.scpt setf applescript[J

Zeile 2553: endif[J

Zeile 2554: [J

Zeile 2555: if !has_key(g:polyglot_is_disabled, 'apiblueprint')[J

Zeile 2556:   au BufNewFile,BufRead *.apib setf apiblueprint[J

Zeile 2557: endif[J

Zeile 2558: [J

Zeile 2559: if !has_key(g:polyglot_is_disabled, 'apache')[J

Zeile 2560:   au BufNewFile,BufRead */etc/apache2/sites-*/*.com,*/etc/httpd/*.conf,{.,}htaccess setf apache[J

Zeile 2561:   au BufNewFile,BufRead srm.conf* call s:StarSetf('apache')[J

Zeile 2562:   au BufNewFile,BufRead httpd.conf* call s:StarSetf('apache')[J

Zeile 2563:   au BufNewFile,BufRead apache2.conf* call s:StarSetf('apache')[J

Zeile 2564:   au BufNewFile,BufRead apache.conf* call s:StarSetf('apache')[J

Zeile 2565:   au BufNewFile,BufRead access.conf* call s:StarSetf('apache')[J

Zeile 2566:   au BufNewFile,BufRead */etc/httpd/conf.d/*.conf* call s:StarSetf('apache')[J

Zeile 2567:   au BufNewFile,BufRead */etc/apache2/sites-*/* call s:StarSetf('apache')[J

Zeile 2568:   au BufNewFile,BufRead */etc/apache2/mods-*/* call s:StarSetf('apache')[J

Zeile 2569:   au BufNewFile,BufRead */etc/apache2/conf.*/* call s:StarSetf('apache')[J

Zeile 2570:   au BufNewFile,BufRead */etc/apache2/*.conf* call s:StarSetf('apache')[J

Zeile 2571: endif[J

Zeile 2572: [J

Zeile 2573: if !has_key(g:polyglot_is_disabled, 'ant')[J

Zeile 2574:   au BufNewFile,BufRead build.xml setf ant[J

Zeile 2575: endif[J

Zeile 2576: [J

Zeile 2577: if !has_key(g:polyglot_is_disabled, 'xml')[J

Zeile 2578:   au BufNewFile,BufRead *.adml,*.admx,*.ant,*.axml,*.builds,*.ccproj,*.ccxml,*.cdxml,*.clixml,*.cproject,*.cscfg,*.csdef,*.csl,*.csproj,*.csproj.user,*.ct,*.depproj,*.dita,*.ditamap,*.ditaval,*.dll.config,*.dotsettings,*.filters,*.fsproj,*.fxml,*.glade,*.gml,*.gmx,*.grxml,*.gst,*.iml,*.ivy,*.jelly,*.jsproj,*.kml,*.launch,*.mdpolicy,*.mjml,*.mod,*.mxml,*.natvis,*.ncl,*.ndproj,*.nproj,*.nuspec,*.odd,*.osm,*.pkgproj,*.pluginspec,*.proj,*.props,*.psc1,*.pt,*.rdf,*.res,*.resx,*.rss,*.sch,*.scxml,*.sfproj,*.shproj,*.srdf,*.storyboard,*.sublime-snippet,*.targets,*.tml,*.tpm,*.ui,*.urdf,*.ux,*.vbproj,*.vcxproj,*.vsixmanifest,*.vssettings,*.vstemplate,*.vxml,*.wixproj,*.workflow,*.wpl,*.wsdl,*.wsf,*.wxi,*.wxl,*.wxs,*.x3d,*.xacro,*.xaml,*.xib,*.xlf,*.xliff,*.xmi,*.xml,*.xml.dist,*.xmp,*.xproj,*.xsd,*.xspec,*.xul,*.zcml,*/etc/blkid.tab,*/etc/blkid.tab.old,*/etc/xdg/menus/*.menu,*fglrxrc,{.,}classpath,{.,}cproject,{.,}project,App.config,NuGet.config,Settings.StyleCop,Web.Debug.config,Web.Release.config,Web.co[J

Zeile 2579: endif[J

Zeile 2580: [J

Zeile 2581: if !has_key(g:polyglot_is_disabled, 'csv')[J

Zeile 2582:   au BufNewFile,BufRead *.csv,*.tab,*.tsv setf csv[J

Zeile 2583: endif[J

Zeile 2584: [J

Zeile 2585: if !has_key(g:polyglot_is_disabled, 'ampl')[J

Zeile 2586:   " AMPL[J

Zeile 2587:   au BufNewFile,BufRead *.run setf ampl[J

Zeile 2588: endif[J

Zeile 2589: [J

Zeile 2590: if !has_key(g:polyglot_is_disabled, 'aml')[J

Zeile 2591:   au BufNewFile,BufRead *.aml setf aml[J

Zeile 2592: endif[J

Zeile 2593: [J

Zeile 2594: if !has_key(g:polyglot_is_disabled, 'alsaconf')[J

Zeile 2595:   au BufNewFile,BufRead */etc/asound.conf,*/usr/share/alsa/alsa.conf,{.,}asoundrc setf alsaconf[J

Zeile 2596: endif[J

Zeile 2597: [J

Zeile 2598: if !has_key(g:polyglot_is_disabled, 'conf')[J

Zeile 2599:   au BufNewFile,BufRead *.conf,*/etc/hosts,auto.master,config setf conf[J

Zeile 2600: endif[J

Zeile 2601: [J

Zeile 2602: if !has_key(g:polyglot_is_disabled, 'master')[J

Zeile 2603:   au BufNewFile,BufRead *.mas,*.master setf master[J

Zeile 2604: endif[J

Zeile 2605: [J

Zeile 2606: if !has_key(g:polyglot_is_disabled, 'aidl')[J

Zeile 2607:   " AIDL[J

Zeile 2608:   au BufNewFile,BufRead *.aidl setf aidl[J

Zeile 2609: endif[J

Zeile 2610: [J

Zeile 2611: if !has_key(g:polyglot_is_disabled, 'ahdl')[J

Zeile 2612:   " AHDL[J

Zeile 2613:   au BufNewFile,BufRead *.tdf setf ahdl[J

Zeile 2614: endif[J

Zeile 2615: [J

Zeile 2616: if !has_key(g:polyglot_is_disabled, 'ada')[J

Zeile 2617:   " Ada (83, 9X, 95)[J

Zeile 2618:   au BufNewFile,BufRead *.ada,*.ada_m,*.adb,*.adc,*.ads,*.gpr setf ada[J

Zeile 2619: endif[J

Zeile 2620: [J

Zeile 2621: if !has_key(g:polyglot_is_disabled, 'acpiasl')[J

Zeile 2622:   au BufNewFile,BufRead *.asl,*.dsl setf asl[J

Zeile 2623: endif[J

Zeile 2624: [J

Zeile 2625: if !has_key(g:polyglot_is_disabled, 'acedb')[J

Zeile 2626:   " AceDB[J

Zeile 2627:   au BufNewFile,BufRead *.wrm setf acedb[J

Zeile 2628: endif[J

Zeile 2629: [J

Zeile 2630: if !has_key(g:polyglot_is_disabled, 'abel')[J

Zeile 2631:   " ABEL[J

Zeile 2632:   au BufNewFile,BufRead *.abl setf abel[J

Zeile 2633: endif[J

Zeile 2634: [J

Zeile 2635: if !has_key(g:polyglot_is_disabled, 'abc')[J

Zeile 2636:   " ABC music notation[J

Zeile 2637:   au BufNewFile,BufRead *.abc setf abc[J

Zeile 2638: endif[J

Zeile 2639: [J

Zeile 2640: if !has_key(g:polyglot_is_disabled, 'abaqus')[J

Zeile 2641:   au! BufNewFile,BufRead,BufWritePost *.inp call polyglot#detect#Inp()[J

Zeile 2642: endif[J

Zeile 2643: [J

Zeile 2644: if !has_key(g:polyglot_is_disabled, 'abap')[J

Zeile 2645:   " ABAB/4[J

Zeile 2646:   au BufNewFile,BufRead *.abap setf abap[J

Zeile 2647: endif[J

Zeile 2648: [J

Zeile 2649: if !has_key(g:polyglot_is_disabled, 'aap')[J

Zeile 2650:   " A-A-P recipe[J

Zeile 2651:   au BufNewFile,BufRead *.aap setf aap[J

Zeile 2652: endif[J

Zeile 2653: [J

Zeile 2654: if !has_key(g:polyglot_is_disabled, 'a65')[J

Zeile 2655:   " XA65 MOS6510 cross assembler[J

Zeile 2656:   au BufNewFile,BufRead *.a65 setf a65[J

Zeile 2657: endif[J

Zeile 2658: [J

Zeile 2659: if !has_key(g:polyglot_is_disabled, 'a2ps')[J

Zeile 2660:   au BufNewFile,BufRead */etc/a2ps.cfg,*/etc/a2ps/*.cfg,{.,}a2psrc,a2psrc setf a2ps[J

Zeile 2661: endif[J

Zeile 2662: [J

Zeile 2663: if !has_key(g:polyglot_is_disabled, 'cfg')[J

Zeile 2664:   au BufNewFile,BufRead *.cfg,*.hgrc,*hgrc setf cfg[J

Zeile 2665: endif[J

Zeile 2666: [J

Zeile 2667: if !has_key(g:polyglot_is_disabled, '8th')[J

Zeile 2668:   " 8th (Firth-derivative)[J

Zeile 2669:   au BufNewFile,BufRead *.8th setf 8th[J

Zeile 2670: endif[J

Zeile 2671: [J

Zeile 2672: [J

Zeile 2673: " DO NOT EDIT CODE ABOVE, IT IS GENERATED WITH MAKEFILE[J

Zeile 2674: [J

Zeile 2675: func! s:Observe(fn)[J

Zeile 2682: [J

Zeile 2683: au BufNewFile,BufRead,StdinReadPost,BufWritePost * if (&ft == "" || &ft == "conf") && expand("<afile>:e") == "" | call polyglot#shebang#Detect() | endif[J

Zeile 2685: [J

Zeile 2686: au BufWinEnter * if &ft == "" && expand("<afile>:e") == "" | call s:Observe('shebang#Detect') | endif[J

Zeile 2688: [J

Zeile 2689: au BufWritePost * au! polyglot-observer[J

Zeile 2690: [J

Zeile 2691: augroup END[J

Zeile 2692: [J

Zeile 2693: endif[J

Zeile 2694: [J

Zeile 2695: if !has_key(g:polyglot_is_disabled, 'sensible')[J

Zeile 2696:   " Use 2-spaces tab indentation by default[J

Zeile 2697:   if &tabstop == 8[J

Zeile 2698:     let &tabstop = 2[J

Zeile 2699:   endif[J

Zeile 2700: [J

Zeile 2701:   " Set shiftwidth to proper value as users often mix it with tabstop[J

Zeile 2702:   if &shiftwidth > &tabstop[J

Zeile 2703:     let &shiftwidth = &tabstop[J

Zeile 2704:   endif[J

Zeile 2705: [J

Zeile 2706:   " Use utf-8 encoding by default[J

Zeile 2707:   set encoding=utf-8[J

Zeile 2708: [J

Zeile 2709:   " Reload unchanged files automatically.[J

Zeile 2710:   set autoread[J

Zeile 2711: [J

Zeile 2712:   " This is needed to avoid swapfile warning when auto-reloading[J

Zeile 2713:   set shortmess+=A[J

Zeile 2714: [J

Zeile 2715:   " Avoids swapfiles in current directory[J

Zeile 2716:   if &directory =~# '^\.,'[J

Zeile 2717:     if !empty($HOME)[J

Zeile 2718:       if has('win32')[J

Zeile 2719:         let &directory = expand('$HOME/vimfiles') . '//,' . &directory[J

Zeile 2720:       else[J

Zeile 2721:         let &directory = expand('$HOME/.vim') . '//,' . &directory[J

Zeile 2722:       endif[J

Zeile 2723:     endif[J

Zeile 2724:     if !empty($XDG_DATA_HOME)[J

Zeile 2725:       let &directory = expand('$XDG_DATA_HOME') . '//,' . &directory[J

Zeile 2726:     endif[J

Zeile 2727:     if has('macunix')[J

Zeile 2728:       let &directory = expand('$HOME/Library/Autosave Information') . '//,' . &directory[J

Zeile 2729:     endif[J

Zeile 2730:   endif[J

Zeile 2731: [J

Zeile 2732:   " Autoindent when starting new line, or using `o` or `O`.[J

Zeile 2733:   set autoindent[J

Zeile 2734: endif[J

Zeile 2735: [J

Zeile 2736: if !has_key(g:polyglot_is_disabled, 'autoindent')[J

Zeile 2737:   " Code below re-implements sleuth for vim-polyglot[J

Zeile 2738:   let g:loaded_sleuth = 1[J

Zeile 2739: [J

Zeile 2740:   let s:default_shiftwidth = &shiftwidth[J

Zeile 2741: [J

Zeile 2742:   func! s:get_shiftwidth(indents) abort[J

Zeile 2763: [J

Zeile 2764:   func! s:guess(lines) abort[J

Zeile 2896: [J

Zeile 2897:   func! s:detect_indent() abort[J

Zeile 2947: [J

Zeile 2948:   set smarttab[J

Zeile 2949: [J

Zeile 2950:   func! SleuthIndicator() abort[J

Zeile 2960: [J

Zeile 2961:   augroup polyglot-sleuth[J

Zeile 2962:     au![J

Zeile 2963:     au BufEnter * call s:detect_indent()[J

Zeile 2964:     au User Flags call Hoist('buffer', 5, 'SleuthIndicator')[J

Zeile 2965:   augroup END[J

Zeile 2966: [J

Zeile 2967:   command! -bar -bang Sleuth call s:detect_indent()[J

Zeile 2968: endif[J

Zeile 2969: [J

Zeile 2970: augroup filetypedetect[J

Zeile 2971: [J

Zeile 2972: " Ignored extensions[J

Zeile 2973: if exists("*fnameescape")[J

Zeile 2974: au BufNewFile,BufRead ?\+.orig,?\+.bak,?\+.old,?\+.new,?\+.dpkg-dist,?\+.dpkg-old,?\+.dpkg-new,?\+.dpkg-bak,?\+.rpmsave,?\+.rpmnew,?\+.pacsave,?\+.pacnew exe "doau filetypedetect BufRead " . fnameescape(expand("<afile>:r"))[J

Zeile 2976: au BufNewFile,BufRead *~ let s:name = expand("<afile>") | let s:short = substitute(s:name, '\~$', '', '') | if s:name != s:short && s:short != "" |   exe "doau filetypedetect BufRead " . fnameescape(s:short) | endif | unlet! s:name s:short[J

Zeile 2983: au BufNewFile,BufRead ?\+.in if expand("<afile>:t") != "configure.in" |   exe "doau filetypedetect BufRead " . fnameescape(expand("<afile>:r")) | endif[J

Zeile 2987: elseif &verbose > 0[J

Zeile 2988:   echomsg "Warning: some filetypes will not be recognized because this version of Vim does not have fnameescape()"[J

Zeile 2989: endif[J

Zeile 2990: [J

Zeile 2991: " Pattern used to match file names which should not be inspected.[J

Zeile 2992: " Currently finds compressed files.[J

Zeile 2993: if !exists("g:ft_ignore_pat")[J

Zeile 2994:   let g:ft_ignore_pat = '\.\(Z\|gz\|bz2\|zip\|tgz\)$'[J

Zeile 2995: endif[J

Zeile 2996: [J

Zeile 2997: " *.cmd is close to a Batch file, but on OS/2 Rexx files also use *.cmd.[J

Zeile 2998: au BufNewFile,BufRead *.cmd if getline(1) =~ '^/\*' | setf rexx | else | setf dosbatch | endif[J

Zeile 3000: [J

Zeile 3001: " Batch file for 4DOS[J

Zeile 3002: au BufNewFile,BufRead *.btm^I^I^Icall polyglot#ft#FTbtm()[J

Zeile 3003: [J

Zeile 3004: " BIND zone[J

Zeile 3005: au BufNewFile,BufRead *.db^I^I^Icall polyglot#ft#BindzoneCheck('')[J

Zeile 3006: [J

Zeile 3007: " C or lpc[J

Zeile 3008: au BufNewFile,BufRead *.c^I^I^Icall polyglot#ft#FTlpc()[J

Zeile 3009: [J

Zeile 3010: " Cynlib[J

Zeile 3011: " .cc and .cpp files can be C++ or Cynlib.[J

Zeile 3012: au BufNewFile,BufRead *.cpp if exists("cynlib_syntax_for_cpp")|setf cynlib|else|setf cpp|endif[J

Zeile 3013: [J

Zeile 3014: au BufNewFile,BufRead *.h^I^I^Icall polyglot#ft#FTheader()[J

Zeile 3015: [J

Zeile 3016: au BufNewFile,BufRead [cC]hange[lL]og  if getline(1) =~ '; urgency='|   setf debchangelog| else|   setf changelog| endif[J

Zeile 3022: [J

Zeile 3023: au BufNewFile,BufRead NEWS  if getline(1) =~ '; urgency='|   setf debchangelog| endif[J

Zeile 3027: [J

Zeile 3028: " Changes for WEB and CWEB or CHILL[J

Zeile 3029: au BufNewFile,BufRead *.ch^I^I^Icall polyglot#ft#FTchange()[J

Zeile 3030: [J

Zeile 3031: " Clever or dtd[J

Zeile 3032: au BufNewFile,BufRead *.ent^I^I^Icall polyglot#ft#FTent()[J

Zeile 3033: [J

Zeile 3034: " Clipper (or FoxPro; could also be eviews)[J

Zeile 3035: au BufNewFile,BufRead *.prg if exists("g:filetype_prg") |   exe "setf " . g:filetype_prg | else |   setf clipper | endif[J

Zeile 3041: [J

Zeile 3042: au BufNewFile,BufRead *.cpy if getline(1) =~ '^##' |   setf python | else |   setf cobol | endif[J

Zeile 3048: [J

Zeile 3049: " Euphoria 3 or 4[J

Zeile 3050: au BufNewFile,BufRead *.eu,*.ew,*.ex,*.exu,*.exw  call polyglot#ft#EuphoriaCheck()[J

Zeile 3051: if has("fname_case")[J

Zeile 3052:    au BufNewFile,BufRead *.EU,*.EW,*.EX,*.EXU,*.EXW  call polyglot#ft#EuphoriaCheck()[J

Zeile 3053: endif[J

Zeile 3054: [J

Zeile 3055: au BufNewFile,BufRead control  if getline(1) =~ '^Source:'|   setf debcontrol| endif[J

Zeile 3059: [J

Zeile 3060: au BufNewFile,BufRead copyright  if getline(1) =~ '^Format:'|   setf debcopyright| endif[J

Zeile 3064: [J

Zeile 3065: " the D language or dtrace[J

Zeile 3066: au BufNewFile,BufRead *.d^I^I^Icall polyglot#ft#DtraceCheck()[J

Zeile 3067: [J

Zeile 3068: au BufNewFile,BufRead *.patch if getline(1) =~ '^From [0-9a-f]\{40\} Mon Sep 17 00:00:00 2001$' |   setf gitsendemail | else |   setf diff | endif[J

Zeile 3074: [J

Zeile 3075: " Diva (with Skill) or InstallShield[J

Zeile 3076: au BufNewFile,BufRead *.rul if getline(1).getline(2).getline(3).getline(4).getline(5).getline(6) =~? 'InstallShield' |   setf ishd | else |   setf diva | endif[J

Zeile 3082: [J

Zeile 3083: " DCL (Digital Command Language - vms) or DNS zone file[J

Zeile 3084: au BufNewFile,BufRead *.com^I^I^Icall polyglot#ft#BindzoneCheck('dcl')[J

Zeile 3085: [J

Zeile 3086: au BufNewFile,BufRead *.edn if getline(1) =~ '^\s*(\s*edif\>' |   setf edif | else |   setf clojure | endif[J

Zeile 3092: [J

Zeile 3093: " Eiffel or Specman or Euphoria[J

Zeile 3094: au BufNewFile,BufRead *.e,*.E^I^I^Icall polyglot#ft#FTe()[J

Zeile 3095: [J

Zeile 3096: if !empty($XDG_CONFIG_HOME)[J

Zeile 3097:   au BufNewFile,BufRead $XDG_CONFIG_HOME/git/config^I^Isetf gitconfig[J

Zeile 3098: endif[J

Zeile 3099: [J

Zeile 3100: au BufNewFile,BufRead .msg.[0-9]* if getline(1) =~ '^From.*# This line is ignored.$' |   setf gitsendemail | endif[J

Zeile 3104: au BufNewFile,BufRead *.git/* if getline(1) =~ '^\x\{40\}\>\|^ref: ' |   setf git | endif[J

Zeile 3108: [J

Zeile 3109: if !empty($GNUPGHOME)[J

Zeile 3110:   au BufNewFile,BufRead $GNUPGHOME/options^Isetf gpg[J

Zeile 3111:   au BufNewFile,BufRead $GNUPGHOME/gpg.conf^Isetf gpg[J

Zeile 3112: endif[J

Zeile 3113: [J

Zeile 3114: " HTML (.shtml and .stm for server side)[J

Zeile 3115: au BufNewFile,BufRead *.html,*.htm,*.shtml,*.stm  call polyglot#ft#FThtml()[J

Zeile 3116: [J

Zeile 3117: " IDL (Interface Description Language)[J

Zeile 3118: au BufNewFile,BufRead *.idl^I^I^Icall polyglot#ft#FTidl()[J

Zeile 3119: [J

Zeile 3120: au BufNewFile,BufRead indent.pro^I^Icall polyglot#ft#ProtoCheck('indent')[J

Zeile 3121: [J

Zeile 3122: " IDL (Interactive Data Language)[J

Zeile 3123: au BufNewFile,BufRead *.pro^I^I^Icall polyglot#ft#ProtoCheck('idlang')[J

Zeile 3124: [J

Zeile 3125: " M4[J

Zeile 3126: au BufNewFile,BufRead *.m4 if expand("<afile>") !~? 'html.m4$\|fvwm2rc' | setf m4 | endif[J

Zeile 3128: [J

Zeile 3129: " Mathematica, Matlab, Murphi or Objective C[J

Zeile 3130: au BufNewFile,BufRead *.m^I^I^Icall polyglot#ft#FTm()[J

Zeile 3131: [J

Zeile 3132: " MMIX or VMS makefile[J

Zeile 3133: au BufNewFile,BufRead *.mms^I^I^Icall polyglot#ft#FTmms()[J

Zeile 3134: [J

Zeile 3135: " Modsim III (or LambdaProlog)[J

Zeile 3136: au BufNewFile,BufRead *.mod if getline(1) =~ '\<module\>' |   setf lprolog | else |   setf modsim3 | endif[J

Zeile 3142: [J

Zeile 3143: " Mutt setup files (must be before catch *.rc)[J

Zeile 3144: au BufNewFile,BufRead */etc/Muttrc.d/*^I^Icall s:StarSetf('muttrc')[J

Zeile 3145: [J

Zeile 3146: " Nroff/Troff (*.ms and *.t are checked below)[J

Zeile 3147: au BufNewFile,BufRead *.me if expand("<afile>") != "read.me" && expand("<afile>") != "click.me" |   setf nroff | endif[J

Zeile 3151: au BufNewFile,BufRead *.[1-9]^I^I^Icall polyglot#ft#FTnroff()[J

Zeile 3152: [J

Zeile 3153: " Nroff or Objective C++[J

Zeile 3154: au BufNewFile,BufRead *.mm^I^I^Icall polyglot#ft#FTmm()[J

Zeile 3155: [J

Zeile 3156: " Pacman hooks[J

Zeile 3157: au BufNewFile,BufRead *.hook if getline(1) == '[Trigger]' |   setf dosini | endif[J

Zeile 3161: [J

Zeile 3162: " Perl[J

Zeile 3163: au BufNewFile,BufRead *.pl^I^I^Icall polyglot#ft#FTpl()[J

Zeile 3164: [J

Zeile 3165: " Perl, XPM or XPM2[J

Zeile 3166: au BufNewFile,BufRead *.pm if getline(1) =~ "XPM2" |   setf xpm2 | elseif getline(1) =~ "XPM" |   setf xpm | else |   setf perl | endif[J

Zeile 3174: [J

Zeile 3175: " Povray, PHP or assembly[J

Zeile 3176: au BufNewFile,BufRead *.inc^I^I^Icall polyglot#ft#FTinc()[J

Zeile 3177: [J

Zeile 3178: " Printcap and Termcap[J

Zeile 3179: au BufNewFile,BufRead *printcap let b:ptcap_type = "print" | setf ptcap[J

Zeile 3181: au BufNewFile,BufRead *termcap let b:ptcap_type = "term" | setf ptcap[J

Zeile 3183: [J

Zeile 3184: " Progress or CWEB[J

Zeile 3185: au BufNewFile,BufRead *.w^I^I^Icall polyglot#ft#FTprogress_cweb()[J

Zeile 3186: [J

Zeile 3187: " Progress or assembly[J

Zeile 3188: au BufNewFile,BufRead *.i^I^I^Icall polyglot#ft#FTprogress_asm()[J

Zeile 3189: [J

Zeile 3190: " Progress or Pascal[J

Zeile 3191: au BufNewFile,BufRead *.p^I^I^Icall polyglot#ft#FTprogress_pascal()[J

Zeile 3192: [J

Zeile 3193: " Software Distributor Product Specification File (POSIX 1387.2-1995)[J

Zeile 3194: au BufNewFile,BufRead INDEX,INFO if getline(1) =~ '^\s*\(distribution\|installed_software\|root\|bundle\|product\)\s*$' |   setf psf | endif[J

Zeile 3198: [J

Zeile 3199: " Registry for MS-Windows[J

Zeile 3200: au BufNewFile,BufRead *.reg if getline(1) =~? '^REGEDIT[0-9]*\s*$\|^Windows Registry Editor Version \d*\.\d*\s*$' | setf registry | endif[J

Zeile 3202: [J

Zeile 3203: " Rexx, Rebol or R[J

Zeile 3204: au BufNewFile,BufRead *.r,*.R^I^I^I^Icall polyglot#ft#FTr()[J

Zeile 3205: [J

Zeile 3206: " Sendmail .mc files are actually m4.  Could also be MS Message text file.[J

Zeile 3207: au BufNewFile,BufRead *.mc^I^I^Icall polyglot#ft#McSetf()[J

Zeile 3208: [J

Zeile 3209: " SGML[J

Zeile 3210: au BufNewFile,BufRead *.sgm,*.sgml if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'linuxdoc' |   setf sgmllnx | elseif getline(1) =~ '<!DOCTYPE.*DocBook' || getline(2) =~ '<!DOCTYPE.*DocBook' |   let b:docbk_type = "sgml" |   let b:docbk_ver = 4 |   setf docbk | else |   setf sgml | endif[J

Zeile 3220: [J

Zeile 3221: " SGMLDECL[J

Zeile 3222: au BufNewFile,BufRead *.decl,*.dcl,*.dec if getline(1).getline(2).getline(3) =~? '^<!SGML' |    setf sgmldecl | endif[J

Zeile 3226: [J

Zeile 3227: " Shell scripts (sh, ksh, bash, bash2, csh); Allow .profile_foo etc.[J

Zeile 3228: " Gentoo ebuilds and Arch Linux PKGBUILDs are actually bash scripts[J

Zeile 3229: " NOTE: Patterns ending in a star are further down, these have lower priority.[J

Zeile 3230: au BufNewFile,BufRead .bashrc,bashrc,bash.bashrc,.bash[_-]profile,.bash[_-]logout,.bash[_-]aliases,bash-fc[-.],*.bash,*/{,.}bash[_-]completion{,.d,.sh}{,/*},*.ebuild,*.eclass,PKGBUILD call polyglot#ft#SetFileTypeSH("bash")[J

Zeile 3231: au BufNewFile,BufRead .kshrc,*.ksh call polyglot#ft#SetFileTypeSH("ksh")[J

Zeile 3232: au BufNewFile,BufRead */etc/profile,.profile,*.sh,*.env call polyglot#ft#SetFileTypeSH(getline(1))[J

Zeile 3233: [J

Zeile 3234: [J

Zeile 3235: " Shell script (Arch Linux) or PHP file (Drupal)[J

Zeile 3236: au BufNewFile,BufRead *.install if getline(1) =~ '<?php' |   setf php | else |   call polyglot#ft#SetFileTypeSH("bash") | endif[J

Zeile 3242: [J

Zeile 3243: " tcsh scripts (patterns ending in a star further below)[J

Zeile 3244: au BufNewFile,BufRead .tcshrc,*.tcsh,tcsh.tcshrc,tcsh.login^Icall polyglot#ft#SetFileTypeShell("tcsh")[J

Zeile 3245: [J

Zeile 3246: " csh scripts, but might also be tcsh scripts (on some systems csh is tcsh)[J

Zeile 3247: " (patterns ending in a start further below)[J

Zeile 3248: au BufNewFile,BufRead .login,.cshrc,csh.cshrc,csh.login,csh.logout,*.csh,.alias  call polyglot#ft#CSH()[J

Zeile 3249: [J

Zeile 3250: au BufNewFile,BufRead *.cls if getline(1) =~ '^%' |  setf tex | elseif getline(1)[0] == '#' && getline(1) =~ 'rexx' |  setf rexx | else |  setf st | endif[J

Zeile 3258: [J

Zeile 3259: " SMIL or XML[J

Zeile 3260: au BufNewFile,BufRead *.smil if getline(1) =~ '<?\s*xml.*?>' |   setf xml | else |   setf smil | endif[J

Zeile 3266: [J

Zeile 3267: " SMIL or SNMP MIB file[J

Zeile 3268: au BufNewFile,BufRead *.smi if getline(1) =~ '\<smil\>' |   setf smil | else |   setf mib | endif[J

Zeile 3274: [J

Zeile 3275: au BufNewFile,BufRead *.rules^I^I^Icall polyglot#ft#FTRules()[J

Zeile 3276: [J

Zeile 3277: " SQL[J

Zeile 3278: au BufNewFile,BufRead *.sql^I^I^Icall polyglot#ft#SQL()[J

Zeile 3279: [J

Zeile 3280: " Also *.class, but not when it's a Java bytecode file[J

Zeile 3281: au BufNewFile,BufRead *.class if getline(1) !~ "^\xca\xfe\xba\xbe" | setf stata | endif[J

Zeile 3283: [J

Zeile 3284: au BufNewFile,BufRead *.tex^I^I^Icall polyglot#ft#FTtex()[J

Zeile 3285: [J

Zeile 3286: " Virata Config Script File or Drupal module[J

Zeile 3287: au BufRead,BufNewFile *.hw,*.module,*.pkg if getline(1) =~ '<?php' |   setf php | else |   setf virata | endif[J

Zeile 3293: [J

Zeile 3294: " Visual Basic (also uses *.bas) or FORM[J

Zeile 3295: au BufNewFile,BufRead *.frm^I^I^Icall polyglot#ft#FTVB("form")[J

Zeile 3296: [J

Zeile 3297: " WEB (*.web is also used for Winbatch: Guess, based on expecting "%" comment[J

Zeile 3298: " lines in a WEB file).[J

Zeile 3299: au BufNewFile,BufRead *.web if getline(1)[0].getline(2)[0].getline(3)[0].getline(4)[0].getline(5)[0] =~ "%" |   setf web | else |   setf winbatch | endif[J

Zeile 3305: [J

Zeile 3306: " X Pixmap (dynamically sets colors, use BufEnter to make it work better)[J

Zeile 3307: au BufEnter *.xpm if getline(1) =~ "XPM2" |   setf xpm2 | else |   setf xpm | endif[J

Zeile 3313: [J

Zeile 3314: " XFree86 config[J

Zeile 3315: au BufNewFile,BufRead XF86Config if getline(1) =~ '\<XConfigurator\>' |   let b:xf86conf_xfree86_version = 3 | endif | setf xf86conf[J

Zeile 3320: au BufNewFile,BufRead */xorg.conf.d/*.conf let b:xf86conf_xfree86_version = 4 | setf xf86conf[J

Zeile 3323: [J

Zeile 3324: " Xorg config[J

Zeile 3325: au BufNewFile,BufRead xorg.conf,xorg.conf-4^Ilet b:xf86conf_xfree86_version = 4 | setf xf86conf[J

Zeile 3326: [J

Zeile 3327: au BufNewFile,BufRead *.ms if !polyglot#ft#FTnroff() | setf xmath | endif[J

Zeile 3329: [J

Zeile 3330: " XML  specific variants: docbk and xbl[J

Zeile 3331: au BufNewFile,BufRead *.xml^I^I^Icall polyglot#ft#FTxml()[J

Zeile 3332: [J

Zeile 3333: " Yacc or racc[J

Zeile 3334: au BufNewFile,BufRead *.y^I^I^Icall polyglot#ft#FTy()[J

Zeile 3335: [J

Zeile 3336: " Zope[J

Zeile 3337: "   dtml (zope dynamic template markup language), pt (zope page template),[J

Zeile 3338: "   cpt (zope form controller page template)[J

Zeile 3339: au BufNewFile,BufRead *.dtml,*.pt,*.cpt^I^Icall polyglot#ft#FThtml()[J

Zeile 3340: "   zsql (zope sql method)[J

Zeile 3341: au BufNewFile,BufRead *.zsql^I^I^Icall polyglot#ft#SQL()[J

Zeile 3342: [J

Zeile 3343: augroup END[J

Zeile 3344: [J

Zeile 3345: [J

Zeile 3346: " Source the user-specified filetype file, for backwards compatibility with[J

Zeile 3347: " Vim 5.x.[J

Zeile 3348: if exists("myfiletypefile") && filereadable(expand(myfiletypefile))[J

Zeile 3349:   execute "source " . myfiletypefile[J

Zeile 3350: endif[J

Zeile 3351: [J

Zeile 3352: [J

Zeile 3353: " Check for "*" after loading myfiletypefile, so that scripts.vim is only used[J

Zeile 3354: " when there are no matching file name extensions.[J

Zeile 3355: " Don't do this for compressed files.[J

Zeile 3356: augroup filetypedetect[J

Zeile 3357: au BufNewFile,BufRead * if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif[J

Zeile 3360: au StdinReadPost * if !did_filetype() | runtime! scripts.vim | endif[J

Zeile 3361: [J

Zeile 3362: [J

Zeile 3363: " Extra checks for when no filetype has been detected now.  Mostly used for[J

Zeile 3364: " patterns that end in "*".  E.g., "zsh*" matches "zsh.vim", but that's a Vim[J

Zeile 3365: " script file.[J

Zeile 3366: " Most of these should call s:StarSetf() to avoid names ending in .gz and the[J

Zeile 3367: " like are used.[J

Zeile 3368: [J

Zeile 3369: " More Apache style config files[J

Zeile 3370: au BufNewFile,BufRead */etc/proftpd/*.conf*,*/etc/proftpd/conf.*/*^Icall s:StarSetf('apachestyle')[J

Zeile 3371: au BufNewFile,BufRead proftpd.conf*^I^I^I^I^Icall s:StarSetf('apachestyle')[J

Zeile 3372: [J

Zeile 3373: " More Apache config files[J

Zeile 3374: au BufNewFile,BufRead access.conf*,apache.conf*,apache2.conf*,httpd.conf*,srm.conf*^Icall s:StarSetf('apache')[J

Zeile 3375: au BufNewFile,BufRead */etc/apache2/*.conf*,*/etc/apache2/conf.*/*,*/etc/apache2/mods-*/*,*/etc/apache2/sites-*/*,*/etc/httpd/conf.d/*.conf*^I^Icall s:StarSetf('apache')[J

Zeile 3376: [J

Zeile 3377: " Asterisk config file[J

Zeile 3378: au BufNewFile,BufRead *asterisk/*.conf*^I^Icall s:StarSetf('asterisk')[J

Zeile 3379: au BufNewFile,BufRead *asterisk*/*voicemail.conf* call s:StarSetf('asteriskvm')[J

Zeile 3380: [J

Zeile 3381: " BIND zone[J

Zeile 3382: au BufNewFile,BufRead */named/db.*,*/bind/db.*^Icall s:StarSetf('bindzone')[J

Zeile 3383: [J

Zeile 3384: " Calendar[J

Zeile 3385: au BufNewFile,BufRead */.calendar/*,*/share/calendar/*/calendar.*,*/share/calendar/calendar.*^I^I^I^I^Icall s:StarSetf('calendar')[J

Zeile 3388: [J

Zeile 3389: " Changelog[J

Zeile 3390: au BufNewFile,BufRead [cC]hange[lL]og* if getline(1) =~ '; urgency='|  call s:StarSetf('debchangelog')|else|  call s:StarSetf('changelog')|endif[J

Zeile 3396: [J

Zeile 3397: " Crontab[J

Zeile 3398: au BufNewFile,BufRead crontab,crontab.*,*/etc/cron.d/*^I^Icall s:StarSetf('crontab')[J

Zeile 3399: [J

Zeile 3400: " dnsmasq(8) configuration[J

Zeile 3401: au BufNewFile,BufRead */etc/dnsmasq.d/*^I^Icall s:StarSetf('dnsmasq')[J

Zeile 3402: [J

Zeile 3403: " Dracula[J

Zeile 3404: au BufNewFile,BufRead drac.*^I^I^Icall s:StarSetf('dracula')[J

Zeile 3405: [J

Zeile 3406: " Fvwm[J

Zeile 3407: au BufNewFile,BufRead */.fvwm/*^I^I^Icall s:StarSetf('fvwm')[J

Zeile 3408: au BufNewFile,BufRead *fvwmrc*,*fvwm95*.hook let b:fvwm_version = 1 | call s:StarSetf('fvwm')[J

Zeile 3410: au BufNewFile,BufRead *fvwm2rc* if expand("<afile>:e") == "m4"|  call s:StarSetf('fvwm2m4')|else|  let b:fvwm_version = 2 | call s:StarSetf('fvwm')|endif[J

Zeile 3416: [J

Zeile 3417: " Gedcom[J

Zeile 3418: au BufNewFile,BufRead */tmp/lltmp*^I^Icall s:StarSetf('gedcom')[J

Zeile 3419: [J

Zeile 3420: " Git[J

Zeile 3421: au BufNewFile,BufRead */.gitconfig.d/*,/etc/gitconfig.d/*^Icall s:StarSetf('gitconfig')[J

Zeile 3422: [J

Zeile 3423: " Gitolite[J

Zeile 3424: au BufNewFile,BufRead */gitolite-admin/conf/*^Icall s:StarSetf('gitolite')[J

Zeile 3425: [J

Zeile 3426: " GTK RC[J

Zeile 3427: au BufNewFile,BufRead .gtkrc*,gtkrc*^I^Icall s:StarSetf('gtkrc')[J

Zeile 3428: [J

Zeile 3429: " Jam[J

Zeile 3430: au BufNewFile,BufRead Prl*.*,JAM*.*^I^Icall s:StarSetf('jam')[J

Zeile 3431: [J

Zeile 3432: " Jargon[J

Zeile 3433: au! BufNewFile,BufRead *jarg* if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'THIS IS THE JARGON FILE'|  call s:StarSetf('jargon')|endif[J

Zeile 3437: [J

Zeile 3438: " Java Properties resource file (note: doesn't catch font.properties.pl)[J

Zeile 3439: au BufNewFile,BufRead *.properties_??_??_*^Icall s:StarSetf('jproperties')[J

Zeile 3440: [J

Zeile 3441: " Kconfig[J

Zeile 3442: au BufNewFile,BufRead Kconfig.*^I^I^Icall s:StarSetf('kconfig')[J

Zeile 3443: [J

Zeile 3444: " Lilo: Linux loader[J

Zeile 3445: au BufNewFile,BufRead lilo.conf*^I^Icall s:StarSetf('lilo')[J

Zeile 3446: [J

Zeile 3447: " Logcheck[J

Zeile 3448: au BufNewFile,BufRead */etc/logcheck/*.d*/*^Icall s:StarSetf('logcheck')[J

Zeile 3449: [J

Zeile 3450: " Makefile[J

Zeile 3451: au BufNewFile,BufRead [mM]akefile*^I^Icall s:StarSetf('make')[J

Zeile 3452: [J

Zeile 3453: " Ruby Makefile[J

Zeile 3454: au BufNewFile,BufRead [rR]akefile*^I^Icall s:StarSetf('ruby')[J

Zeile 3455: [J

Zeile 3456: " Mail (also matches muttrc.vim, so this is below the other checks)[J

Zeile 3457: au BufNewFile,BufRead {neo,}mutt[[:alnum:]._-]\\\{6\}^Isetf mail[J

Zeile 3458: [J

Zeile 3459: au BufNewFile,BufRead reportbug-*^I^Icall s:StarSetf('mail')[J

Zeile 3460: [J

Zeile 3461: " Modconf[J

Zeile 3462: au BufNewFile,BufRead */etc/modutils/* if executable(expand("<afile>")) != 1|  call s:StarSetf('modconf')|endif[J

Zeile 3466: au BufNewFile,BufRead */etc/modprobe.*^I^Icall s:StarSetf('modconf')[J

Zeile 3467: [J

Zeile 3468: " Mutt setup file[J

Zeile 3469: au BufNewFile,BufRead .mutt{ng,}rc*,*/.mutt{ng,}/mutt{ng,}rc*^Icall s:StarSetf('muttrc')[J

Zeile 3470: au BufNewFile,BufRead mutt{ng,}rc*,Mutt{ng,}rc*^I^Icall s:StarSetf('muttrc')[J

Zeile 3471: [J

Zeile 3472: " Neomutt setup file[J

Zeile 3473: au BufNewFile,BufRead .neomuttrc*,*/.neomutt/neomuttrc*^Icall s:StarSetf('neomuttrc')[J

Zeile 3474: au BufNewFile,BufRead neomuttrc*,Neomuttrc*^I^Icall s:StarSetf('neomuttrc')[J

Zeile 3475: [J

Zeile 3476: " Nroff macros[J

Zeile 3477: au BufNewFile,BufRead tmac.*^I^I^Icall s:StarSetf('nroff')[J

Zeile 3478: [J

Zeile 3479: " OpenBSD hostname.if[J

Zeile 3480: au BufNewFile,BufRead /etc/hostname.*^I^Icall s:StarSetf('config')[J

Zeile 3481: [J

Zeile 3482: " Pam conf[J

Zeile 3483: au BufNewFile,BufRead */etc/pam.d/*^I^Icall s:StarSetf('pamconf')[J

Zeile 3484: [J

Zeile 3485: " Printcap and Termcap[J

Zeile 3486: au BufNewFile,BufRead *printcap* if !did_filetype()|  let b:ptcap_type = "print" | call s:StarSetf('ptcap')|endif[J

Zeile 3490: au BufNewFile,BufRead *termcap* if !did_filetype()|  let b:ptcap_type = "term" | call s:StarSetf('ptcap')|endif[J

Zeile 3494: [J

Zeile 3495: " ReDIF[J

Zeile 3496: " Only used when the .rdf file was not detected to be XML.[J

Zeile 3497: au BufRead,BufNewFile *.rdf^I^I^Icall polyglot#ft#Redif()[J

Zeile 3498: [J

Zeile 3499: " Remind[J

Zeile 3500: au BufNewFile,BufRead .reminders*^I^Icall s:StarSetf('remind')[J

Zeile 3501: [J

Zeile 3502: " SGML catalog file[J

Zeile 3503: au BufNewFile,BufRead sgml.catalog*^I^Icall s:StarSetf('catalog')[J

Zeile 3504: [J

Zeile 3505: " Shell scripts ending in a star[J

Zeile 3506: au BufNewFile,BufRead .bashrc*,.bash[_-]profile*,.bash[_-]logout*,.bash[_-]aliases*,bash-fc[-.]*,,PKGBUILD* call polyglot#ft#SetFileTypeSH("bash")[J

Zeile 3507: au BufNewFile,BufRead .kshrc* call polyglot#ft#SetFileTypeSH("ksh")[J

Zeile 3508: au BufNewFile,BufRead .profile* call polyglot#ft#SetFileTypeSH(getline(1))[J

Zeile 3509: [J

Zeile 3510: " tcsh scripts ending in a star[J

Zeile 3511: au BufNewFile,BufRead .tcshrc*^Icall polyglot#ft#SetFileTypeShell("tcsh")[J

Zeile 3512: [J

Zeile 3513: " csh scripts ending in a star[J

Zeile 3514: au BufNewFile,BufRead .login*,.cshrc*  call polyglot#ft#CSH()[J

Zeile 3515: [J

Zeile 3516: " VHDL[J

Zeile 3517: au BufNewFile,BufRead *.vhdl_[0-9]*^I^Icall s:StarSetf('vhdl')[J

Zeile 3518: [J

Zeile 3519: " Vim script[J

Zeile 3520: au BufNewFile,BufRead *vimrc*^I^I^Icall s:StarSetf('vim')[J

Zeile 3521: [J

Zeile 3522: " Subversion commit file[J

Zeile 3523: au BufNewFile,BufRead svn-commit*.tmp^I^Isetf svn[J

Zeile 3524: [J

Zeile 3525: " X resources file[J

Zeile 3526: au BufNewFile,BufRead Xresources*,*/app-defaults/*,*/Xresources/* call s:StarSetf('xdefaults')[J

Zeile 3527: [J

Zeile 3528: " XFree86 config[J

Zeile 3529: au BufNewFile,BufRead XF86Config-4* let b:xf86conf_xfree86_version = 4 | call s:StarSetf('xf86conf')[J

Zeile 3531: au BufNewFile,BufRead XF86Config* if getline(1) =~ '\<XConfigurator\>'|  let b:xf86conf_xfree86_version = 3|endif|call s:StarSetf('xf86conf')[J

Zeile 3536: [J

Zeile 3537: " X11 xmodmap[J

Zeile 3538: au BufNewFile,BufRead *xmodmap*^I^I^Icall s:StarSetf('xmodmap')[J

Zeile 3539: [J

Zeile 3540: " Xinetd conf[J

Zeile 3541: au BufNewFile,BufRead */etc/xinetd.d/*^I^Icall s:StarSetf('xinetd')[J

Zeile 3542: [J

Zeile 3543: " yum conf (close enough to dosini)[J

Zeile 3544: au BufNewFile,BufRead */etc/yum.repos.d/*^Icall s:StarSetf('dosini')[J

Zeile 3545: [J

Zeile 3546: " Z-Shell script ending in a star[J

Zeile 3547: au BufNewFile,BufRead .zsh*,.zlog*,.zcompdump*  call s:StarSetf('zsh')[J

Zeile 3548: au BufNewFile,BufRead zsh*,zlog*^I^Icall s:StarSetf('zsh')[J

Zeile 3549: [J

Zeile 3550: [J

Zeile 3551: " Help files match *.txt but should have a last line that is a modeline.[J

Zeile 3552: au BufNewFile,BufRead *.txt  if getline('$') !~ 'vim:.*ft=help'|   setf text| endif[J

Zeile 3556: [J

Zeile 3557: [J

Zeile 3558: " NOTE: The above command could have ended the filetypedetect autocmd group[J

Zeile 3559: " and started another one. Let's make sure it has ended to get to a consistent[J

Zeile 3560: " state.[J

Zeile 3561: augroup END[J

Zeile 3562: [J

Zeile 3563: " Use the filetype detect plugins.  They may overrule any of the previously[J

Zeile 3564: " detected filetypes. No need to load if everything is enabled[J

Zeile 3565: if exists("did_load_filetypes") && exists("g:polyglot_disabled")[J

Zeile 3566:   unlet did_load_filetypes[J

Zeile 3567:   runtime! extras/filetype.vim[J

Zeile 3568: endif[J

Zeile 3569: [J

Zeile 3570: let s:runtime = resolve($VIMRUNTIME)[J

Zeile 3571: let s:base = resolve(expand('<sfile>:p:h:h:h'))[J

Zeile 3572: [J

Zeile 3573: func! s:process_rtp(rtp)[J

Zeile 3615: [J

Zeile 3616: " We want vim-polyglot files to load only as fallback[J

Zeile 3617: let &rtp = join(s:process_rtp(split(&rtp, ',')), ',')[J

rufe <SNR>6_process_rtp auf[J(['/c/Users/108012516/.vim', '/c/Users/...bundle/vim-colorscheme-switcher/after'])

Zeile 1:   " Remove vim-polyglot from paths and make everything absolute[J

Zeile 2:   let rtp = [][J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 3:   for path in a:rtp[1:-2][J

Zeile 4:     let abspath = resolve(path)[J

Zeile 5:     if stridx(abspath, s:base) != 0[J

Zeile 6:       call add(rtp, abspath)[J

Zeile 7:     endif[J

Zeile 8:   endfor[J

Zeile 9:   let result = [a:rtp[0]][J

Zeile 10:   " Then all other stuff (until vimruntime)[J

Zeile 11:   let i = 0[J

Zeile 12:   for path in rtp[0:len(rtp)-1][J

Zeile 13:     if path == s:runtime[J

Zeile 14:       break[J

Zeile 15:     endif[J

Zeile 16:     call add(result, path)[J

Zeile 17:     let i = i + 1[J

Zeile 18:   endfor[J

Zeile 12:   for path in rtp[0:len(rtp)-1][J

Zeile 13:     if path == s:runtime[J

Zeile 14:       break[J

Zeile 15:     endif[J

Zeile 16:     call add(result, path)[J

Zeile 17:     let i = i + 1[J

Zeile 18:   endfor[J

Zeile 12:   for path in rtp[0:len(rtp)-1][J

Zeile 13:     if path == s:runtime[J

Zeile 14:       break[J

Zeile 15:     endif[J

Zeile 16:     call add(result, path)[J

Zeile 17:     let i = i + 1[J

Zeile 18:   endfor[J

Zeile 12:   for path in rtp[0:len(rtp)-1][J

Zeile 13:     if path == s:runtime[J

Zeile 14:       break[J

Zeile 15:     endif[J

Zeile 16:     call add(result, path)[J

Zeile 17:     let i = i + 1[J

Zeile 18:   endfor[J

Zeile 12:   for path in rtp[0:len(rtp)-1][J

Zeile 13:     if path == s:runtime[J

Zeile 14:       break[J

Zeile 15:     endif[J

Zeile 16:     call add(result, path)[J

Zeile 17:     let i = i + 1[J

Zeile 18:   endfor[J

Zeile 12:   for path in rtp[0:len(rtp)-1][J

Zeile 13:     if path == s:runtime[J

Zeile 14:       break[J

Zeile 15:     endif[J

Zeile 16:     call add(result, path)[J

Zeile 17:     let i = i + 1[J

Zeile 18:   endfor[J

Zeile 12:   for path in rtp[0:len(rtp)-1][J

Zeile 13:     if path == s:runtime[J

Zeile 14:       break[J

Zeile 15:     endif[J

Zeile 16:     call add(result, path)[J

Zeile 17:     let i = i + 1[J

Zeile 18:   endfor[J

Zeile 12:   for path in rtp[0:len(rtp)-1][J

Zeile 13:     if path == s:runtime[J

Zeile 14:       break[J

Zeile 15:     endif[J

Zeile 16:     call add(result, path)[J

Zeile 17:     let i = i + 1[J

Zeile 18:   endfor[J

Zeile 12:   for path in rtp[0:len(rtp)-1][J

Zeile 13:     if path == s:runtime[J

Zeile 14:       break[J

Zeile 15:     endif[J

Zeile 16:     call add(result, path)[J

Zeile 17:     let i = i + 1[J

Zeile 18:   endfor[J

Zeile 12:   for path in rtp[0:len(rtp)-1][J

Zeile 13:     if path == s:runtime[J

Zeile 14:       break[J

Zeile 15:     endif[J

Zeile 16:     call add(result, path)[J

Zeile 17:     let i = i + 1[J

Zeile 18:   endfor[J

Zeile 12:   for path in rtp[0:len(rtp)-1][J

Zeile 13:     if path == s:runtime[J

Zeile 14:       break[J

Zeile 15:     endif[J

Zeile 16:     call add(result, path)[J

Zeile 17:     let i = i + 1[J

Zeile 18:   endfor[J

Zeile 12:   for path in rtp[0:len(rtp)-1][J

Zeile 13:     if path == s:runtime[J

Zeile 14:       break[J

Zeile 15:     endif[J

Zeile 16:     call add(result, path)[J

Zeile 17:     let i = i + 1[J

Zeile 18:   endfor[J

Zeile 12:   for path in rtp[0:len(rtp)-1][J

Zeile 13:     if path == s:runtime[J

Zeile 14:       break[J

Zeile 15:     endif[J

Zeile 16:     call add(result, path)[J

Zeile 17:     let i = i + 1[J

Zeile 18:   endfor[J

Zeile 12:   for path in rtp[0:len(rtp)-1][J

Zeile 13:     if path == s:runtime[J

Zeile 14:       break[J

Zeile 15:     endif[J

Zeile 16:     call add(result, path)[J

Zeile 17:     let i = i + 1[J

Zeile 18:   endfor[J

Zeile 12:   for path in rtp[0:len(rtp)-1][J

Zeile 13:     if path == s:runtime[J

Zeile 14:       break[J

Zeile 15:     endif[J

Zeile 16:     call add(result, path)[J

Zeile 17:     let i = i + 1[J

Zeile 18:   endfor[J

Zeile 12:   for path in rtp[0:len(rtp)-1][J

Zeile 13:     if path == s:runtime[J

Zeile 14:       break[J

Zeile 15:     endif[J

Zeile 16:     call add(result, path)[J

Zeile 17:     let i = i + 1[J

Zeile 18:   endfor[J

Zeile 12:   for path in rtp[0:len(rtp)-1][J

Zeile 13:     if path == s:runtime[J

Zeile 14:       break[J

Zeile 15:     endif[J

Zeile 16:     call add(result, path)[J

Zeile 17:     let i = i + 1[J

Zeile 18:   endfor[J

Zeile 12:   for path in rtp[0:len(rtp)-1][J

Zeile 13:     if path == s:runtime[J

Zeile 14:       break[J

Zeile 15:     endif[J

Zeile 16:     call add(result, path)[J

Zeile 17:     let i = i + 1[J

Zeile 18:   endfor[J

Zeile 12:   for path in rtp[0:len(rtp)-1][J

Zeile 13:     if path == s:runtime[J

Zeile 14:       break[J

Zeile 15:     endif[J

Zeile 16:     call add(result, path)[J

Zeile 17:     let i = i + 1[J

Zeile 18:   endfor[J

Zeile 12:   for path in rtp[0:len(rtp)-1][J

Zeile 13:     if path == s:runtime[J

Zeile 14:       break[J

Zeile 15:     endif[J

Zeile 16:     call add(result, path)[J

Zeile 17:     let i = i + 1[J

Zeile 18:   endfor[J

Zeile 19:   " Then vim-polyglot[J

Zeile 20:   call add(result, s:base)[J

Zeile 21:   " Then all other files, until after-files[J

Zeile 22:   while i < len(rtp)[J

Zeile 23:     let path = rtp[i][J

Zeile 24:     if match(path, '[/\\]after$') > -1[J

Zeile 25:       break[J

Zeile 26:     endif[J

Zeile 27:     call add(result, path)[J

Zeile 28:     let i = i + 1[J

Zeile 29:   endwhile[J

Zeile 22:   while i < len(rtp)[J

Zeile 23:     let path = rtp[i][J

Zeile 24:     if match(path, '[/\\]after$') > -1[J

Zeile 25:       break[J

Zeile 26:     endif[J

Zeile 27:     call add(result, path)[J

Zeile 28:     let i = i + 1[J

Zeile 29:   endwhile[J

Zeile 30:   " Then vim-polyglot after path[J

Zeile 31:   call add(result, s:base . '/after')[J

Zeile 32:   " Then all other after paths[J

Zeile 33:   while i < len(rtp)[J

Zeile 34:     let path = rtp[i][J

Zeile 35:     call add(result, path)[J

Zeile 36:     let i = i + 1[J

Zeile 37:   endwhile[J

Zeile 33:   while i < len(rtp)[J

Zeile 34:     let path = rtp[i][J

Zeile 35:     call add(result, path)[J

Zeile 36:     let i = i + 1[J

Zeile 37:   endwhile[J

Zeile 33:   while i < len(rtp)[J

Zeile 34:     let path = rtp[i][J

Zeile 35:     call add(result, path)[J

Zeile 36:     let i = i + 1[J

Zeile 37:   endwhile[J

Zeile 33:   while i < len(rtp)[J

Zeile 34:     let path = rtp[i][J

Zeile 35:     call add(result, path)[J

Zeile 36:     let i = i + 1[J

Zeile 37:   endwhile[J

Zeile 33:   while i < len(rtp)[J

Zeile 34:     let path = rtp[i][J

Zeile 35:     call add(result, path)[J

Zeile 36:     let i = i + 1[J

Zeile 37:   endwhile[J

Zeile 33:   while i < len(rtp)[J

Zeile 34:     let path = rtp[i][J

Zeile 35:     call add(result, path)[J

Zeile 36:     let i = i + 1[J

Zeile 37:   endwhile[J

Zeile 33:   while i < len(rtp)[J

Zeile 34:     let path = rtp[i][J

Zeile 35:     call add(result, path)[J

Zeile 36:     let i = i + 1[J

Zeile 37:   endwhile[J

Zeile 33:   while i < len(rtp)[J

Zeile 34:     let path = rtp[i][J

Zeile 35:     call add(result, path)[J

Zeile 36:     let i = i + 1[J

Zeile 37:   endwhile[J

Zeile 33:   while i < len(rtp)[J

Zeile 34:     let path = rtp[i][J

Zeile 35:     call add(result, path)[J

Zeile 36:     let i = i + 1[J

Zeile 37:   endwhile[J

Zeile 33:   while i < len(rtp)[J

Zeile 34:     let path = rtp[i][J

Zeile 35:     call add(result, path)[J

Zeile 36:     let i = i + 1[J

Zeile 37:   endwhile[J

Zeile 33:   while i < len(rtp)[J

Zeile 34:     let path = rtp[i][J

Zeile 35:     call add(result, path)[J

Zeile 36:     let i = i + 1[J

Zeile 37:   endwhile[J

Zeile 33:   while i < len(rtp)[J

Zeile 34:     let path = rtp[i][J

Zeile 35:     call add(result, path)[J

Zeile 36:     let i = i + 1[J

Zeile 37:   endwhile[J

Zeile 33:   while i < len(rtp)[J

Zeile 34:     let path = rtp[i][J

Zeile 35:     call add(result, path)[J

Zeile 36:     let i = i + 1[J

Zeile 37:   endwhile[J

Zeile 33:   while i < len(rtp)[J

Zeile 34:     let path = rtp[i][J

Zeile 35:     call add(result, path)[J

Zeile 36:     let i = i + 1[J

Zeile 37:   endwhile[J

Zeile 33:   while i < len(rtp)[J

Zeile 34:     let path = rtp[i][J

Zeile 35:     call add(result, path)[J

Zeile 36:     let i = i + 1[J

Zeile 37:   endwhile[J

Zeile 33:   while i < len(rtp)[J

Zeile 34:     let path = rtp[i][J

Zeile 35:     call add(result, path)[J

Zeile 36:     let i = i + 1[J

Zeile 37:   endwhile[J

Zeile 33:   while i < len(rtp)[J

Zeile 34:     let path = rtp[i][J

Zeile 35:     call add(result, path)[J

Zeile 36:     let i = i + 1[J

Zeile 37:   endwhile[J

Zeile 33:   while i < len(rtp)[J

Zeile 34:     let path = rtp[i][J

Zeile 35:     call add(result, path)[J

Zeile 36:     let i = i + 1[J

Zeile 37:   endwhile[J

Zeile 33:   while i < len(rtp)[J

Zeile 34:     let path = rtp[i][J

Zeile 35:     call add(result, path)[J

Zeile 36:     let i = i + 1[J

Zeile 37:   endwhile[J

Zeile 33:   while i < len(rtp)[J

Zeile 34:     let path = rtp[i][J

Zeile 35:     call add(result, path)[J

Zeile 36:     let i = i + 1[J

Zeile 37:   endwhile[J

Zeile 33:   while i < len(rtp)[J

Zeile 34:     let path = rtp[i][J

Zeile 35:     call add(result, path)[J

Zeile 36:     let i = i + 1[J

Zeile 37:   endwhile[J

Zeile 38:   " User's after directory is always last[J

Zeile 39:   call add(result, a:rtp[len(a:rtp)-1])[J

Zeile 40:   return result[J

<SNR>6_process_rtp lieferte "['/c/Users/108012516/.vim', '/c/Users/...bundle/vim-colorscheme-switcher/after']" zurÃ¼ck[J

weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim[J

Zeile 3618: [J

Zeile 3619: " Restore 'cpoptions'[J

Zeile 3620: let &cpo = s:cpo_save[J

Zeile 3621: unlet s:cpo_save[J

Lesen von /c/Users/108012516/.vim/bundle/vim-polyglot/autoload/polyglot/init.vim beendet[J
weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/filetype.vim[J
rufe polyglot#init#init auf[J()

Zeile 1:   " A no-op as sourcing this file is enough[J

polyglot#init#init lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/.vim/bundle/vim-polyglot/filetype.vim[J

Lesen von /c/Users/108012516/.vim/bundle/vim-polyglot/filetype.vim beendet[J
weiter in /c/Users/108012516/dotfiles/vimConf/vimrc_fzf[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-commentary/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-airline/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-airline-themes/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-rainbow/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-devicons/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-webdevicons/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/awesome-vim-colorschemes/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-misc/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-colorscheme-switcher/filetype.vim"[J
Suche nach "/usr/share/vim/vimfiles/filetype.vim"[J
Suche nach "/usr/share/vim/vim82/filetype.vim"[J
chdir(/usr/share/vim/vim82)[J
fchdir() to previous dir[J
Zeile 115: lese "/usr/share/vim/vim82/filetype.vim"[J
Zeile 1: " Vim support file to detect file types[J

Zeile 2: "[J

Zeile 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

Zeile 4: " Last Change:^I2021 Apr 17[J

Zeile 5: [J

Zeile 6: " Listen very carefully, I will say this only once[J

Zeile 7: if exists("did_load_filetypes")[J

Zeile 8:   finish[J

Lesen von /usr/share/vim/vim82/filetype.vim beendet[J
weiter in /c/Users/108012516/dotfiles/vimConf/vimrc_fzf[J
Suche nach "/usr/share/vim/vimfiles/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/Vundle.vim/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/Vundle.vim/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-fugitive/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-gitgutter/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-cpp-enhanced-highlight/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-bufkill/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/ack.vim/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/fzf.vim/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/fzf/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-rooter/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-polyglot/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-commentary/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-airline/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-airline-themes/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-rainbow/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-devicons/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-webdevicons/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/awesome-vim-colorschemes/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-misc/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-colorscheme-switcher/after/filetype.vim"[J
Suche nach "ftplugin.vim" in "/c/Users/108012516/.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill,/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorscheme[J
Suche nach "/c/Users/108012516/.vim/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-misc/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-colorscheme-switcher/ftplugin.vim"[J
Suche nach "/usr/share/vim/vimfiles/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-polyglot/ftplugin.vim"[J
Suche nach "/usr/share/vim/vim82/ftplugin.vim"[J
chdir(/usr/share/vim/vim82)[J
fchdir() to previous dir[J
Zeile 115: lese "/usr/share/vim/vim82/ftplugin.vim"[J
Zeile 1: " Vim support file to switch on loading plugins for file types[J

Zeile 2: "[J

Zeile 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

Zeile 4: " Last change:^I2006 Apr 30[J

Zeile 5: [J

Zeile 6: if exists("did_load_ftplugin")[J

Zeile 7:   finish[J

Zeile 8: endif[J

Zeile 9: let did_load_ftplugin = 1[J

Zeile 10: [J

Zeile 11: augroup filetypeplugin[J

Zeile 12:   au FileType * call s:LoadFTPlugin()[J

Zeile 13: [J

Zeile 14:   func! s:LoadFTPlugin()[J

Zeile 35: augroup END[J

Lesen von /usr/share/vim/vim82/ftplugin.vim beendet[J
weiter in /c/Users/108012516/dotfiles/vimConf/vimrc_fzf[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-polyglot/after/ftplugin.vim"[J
Suche nach "/usr/share/vim/vimfiles/after/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/after/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/after/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/after/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/after/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight/after/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/after/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim/after/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/after/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf/after/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter/after/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary/after/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/after/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes/after/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow/after/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/after/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons/after/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/after/ftplugin.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-misc/after/ftplugin.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-colorscheme-switcher/after/ftplugin.vim"[J
Suche nach "indent.vim" in "/c/Users/108012516/.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill,/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes,[J
Suche nach "/c/Users/108012516/.vim/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-misc/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-colorscheme-switcher/indent.vim"[J
Suche nach "/usr/share/vim/vimfiles/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-polyglot/indent.vim"[J
Suche nach "/usr/share/vim/vim82/indent.vim"[J
chdir(/usr/share/vim/vim82)[J
fchdir() to previous dir[J
Zeile 115: lese "/usr/share/vim/vim82/indent.vim"[J
Zeile 1: " Vim support file to switch on loading indent files for file types[J

Zeile 2: "[J

Zeile 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

Zeile 4: " Last Change:^I2008 Feb 22[J

Zeile 5: [J

Zeile 6: if exists("did_indent_on")[J

Zeile 7:   finish[J

Zeile 8: endif[J

Zeile 9: let did_indent_on = 1[J

Zeile 10: [J

Zeile 11: augroup filetypeindent[J

Zeile 12:   au FileType * call s:LoadIndent()[J

Zeile 13:   func! s:LoadIndent()[J

Zeile 31: augroup END[J

Lesen von /usr/share/vim/vim82/indent.vim beendet[J
weiter in /c/Users/108012516/dotfiles/vimConf/vimrc_fzf[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-polyglot/after/indent.vim"[J
Suche nach "/usr/share/vim/vimfiles/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-misc/after/indent.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-colorscheme-switcher/after/indent.vim"[J
Zeile 116: " To ignore plugin indent changes, instead use:[J

Zeile 117: [J

Zeile 118: [J

Zeile 119: " show errors in different Colors[J

Zeile 120: highlight Errors ctermbg=green guibg=darkred[J

Zeile 121: [J

Zeile 122: "}}[J

Zeile 123: [J

Zeile 124: set softtabstop=2 " Indent by 2 spaces when hitting tab[J

Zeile 125: set shiftwidth=4 " Indent by 4 spaces when auto-indenting[J

Zeile 126: set tabstop=4 " Show existing tab with 4 spaces width[J

Zeile 127: syntax on " Enable syntax highlighting[J

Zeile 127: so $VIMRUNTIME/syntax/syntax.vim[J

chdir(/usr/share/vim/vim82/syntax)[J
fchdir() to previous dir[J
Zeile 127: lese "/usr/share/vim/vim82/syntax/syntax.vim"[J
Zeile 1: " Vim syntax support file[J

Zeile 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

Zeile 3: " Last Change:^I2001 Sep 04[J

Zeile 4: [J

Zeile 5: " This file is used for ":syntax on".[J

Zeile 6: " It installs the autocommands and starts highlighting for all buffers.[J

Zeile 7: [J

Zeile 8: if !has("syntax")[J

Zeile 9:   finish[J

Zeile 10: endif[J

Zeile 11: [J

Zeile 12: " If Syntax highlighting appears to be on already, turn it off first, so that[J

Zeile 13: " any leftovers are cleared.[J

Zeile 14: if exists("syntax_on") || exists("syntax_manual")[J

Zeile 15:   so <sfile>:p:h/nosyntax.vim[J

Zeile 16: endif[J

Zeile 17: [J

Zeile 18: " Load the Syntax autocommands and set the default methods for highlighting.[J

Zeile 19: runtime syntax/synload.vim[J

Suche nach "syntax/synload.vim" in "/c/Users/108012516/.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill,/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-color[J
Suche nach "/c/Users/108012516/.vim/syntax/synload.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/syntax/synload.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/syntax/synload.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/syntax/synload.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight/syntax/synload.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/syntax/synload.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim/syntax/synload.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/syntax/synload.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf/syntax/synload.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter/syntax/synload.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary/syntax/synload.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/syntax/synload.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes/syntax/synload.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow/syntax/synload.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/syntax/synload.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons/syntax/synload.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/syntax/synload.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-misc/syntax/synload.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-colorscheme-switcher/syntax/synload.vim"[J
Suche nach "/usr/share/vim/vimfiles/syntax/synload.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-polyglot/syntax/synload.vim"[J
Suche nach "/usr/share/vim/vim82/syntax/synload.vim"[J
chdir(/usr/share/vim/vim82/syntax)[J
fchdir() to previous dir[J
Zeile 19: lese "/usr/share/vim/vim82/syntax/synload.vim"[J
Zeile 1: " Vim syntax support file[J

Zeile 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

Zeile 3: " Last Change:^I2020 Apr 13[J

Zeile 4: [J

Zeile 5: " This file sets up for syntax highlighting.[J

Zeile 6: " It is loaded from "syntax.vim" and "manual.vim".[J

Zeile 7: " 1. Set the default highlight groups.[J

Zeile 8: " 2. Install Syntax autocommands for all the available syntax files.[J

Zeile 9: [J

Zeile 10: if !has("syntax")[J

Zeile 11:   finish[J

Zeile 12: endif[J

Zeile 13: [J

Zeile 14: " let others know that syntax has been switched on[J

Zeile 15: let syntax_on = 1[J

Zeile 16: [J

Zeile 17: " Set the default highlighting colors.  Use a color scheme if specified.[J

Zeile 18: if exists("colors_name")[J

Zeile 19:   exe "colors " . colors_name[J

Zeile 20: else[J

Zeile 21:   runtime! syntax/syncolor.vim[J

Suche nach "syntax/syncolor.vim" in "/c/Users/108012516/.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill,/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colo[J
Suche nach "/c/Users/108012516/.vim/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-misc/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-colorscheme-switcher/syntax/syncolor.vim"[J
Suche nach "/usr/share/vim/vimfiles/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-polyglot/syntax/syncolor.vim"[J
Suche nach "/usr/share/vim/vim82/syntax/syncolor.vim"[J
chdir(/usr/share/vim/vim82/syntax)[J
fchdir() to previous dir[J
Zeile 21: lese "/usr/share/vim/vim82/syntax/syncolor.vim"[J
Zeile 1: " Vim syntax support file[J

Zeile 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

Zeile 3: " Last Change:^I2020 Feb 13[J

Zeile 4: [J

Zeile 5: " This file sets up the default methods for highlighting.[J

Zeile 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".[J

Zeile 7: " Also used from init_highlight().[J

Zeile 8: [J

Zeile 9: if !exists("syntax_cmd") || syntax_cmd == "on"[J

Zeile 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links[J

Zeile 11:   command -nargs=* SynColor hi <args>[J

Zeile 12:   command -nargs=* SynLink hi link <args>[J

Zeile 13: else[J

Zeile 14:   if syntax_cmd == "enable"[J

Zeile 15:     " ":syntax enable" keeps any existing colors[J

Zeile 16:     command -nargs=* SynColor hi def <args>[J

Zeile 17:     command -nargs=* SynLink hi def link <args>[J

Zeile 18:   elseif syntax_cmd == "reset"[J

Zeile 19:     " ":syntax reset" resets all colors to the default[J

Zeile 20:     command -nargs=* SynColor hi <args>[J

Zeile 21:     command -nargs=* SynLink hi! link <args>[J

Zeile 22:   else[J

Zeile 23:     " User defined syncolor file has already set the colors.[J

Zeile 24:     finish[J

Zeile 25:   endif[J

Zeile 26: endif[J

Zeile 27: [J

Zeile 28: " Many terminals can only use six different colors (plus black and white).[J

Zeile 29: " Therefore the number of colors used is kept low. It doesn't look nice with[J

Zeile 30: " too many colors anyway.[J

Zeile 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.[J

Zeile 32: " There are two sets of defaults: for a dark and a light background.[J

Zeile 33: if &background == "dark"[J

Zeile 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

Zeile 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

Zeile 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

Zeile 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

Zeile 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

Zeile 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

Zeile 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

Zeile 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

Zeile 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

Zeile 43: else[J

Zeile 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE[J

Zeile 44: hi Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE[J

Zeile 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE[J

Zeile 45: hi Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE[J

Zeile 46:   " #6a5acd is SlateBlue[J

Zeile 47:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=#6a5acd guibg=NONE[J

Zeile 47: hi Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=#6a5acd guibg=NONE[J

Zeile 48:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE[J

Zeile 48: hi Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE[J

Zeile 49:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE[J

Zeile 49: hi Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE[J

Zeile 50:   " #6a0dad is Purple[J

Zeile 51:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=#6a0dad guibg=NONE[J

Zeile 51: hi PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=#6a0dad guibg=NONE[J

Zeile 52:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE[J

Zeile 52: hi Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE[J

Zeile 53:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue[J

Zeile 53: hi Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue[J

Zeile 54:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

Zeile 54: hi Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

Zeile 55: endif[J

Zeile 56: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

Zeile 56: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

Zeile 57: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

Zeile 57: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

Zeile 58: [J

Zeile 59: " Common groups that link to default highlighting.[J

Zeile 60: " You can specify other highlighting easily.[J

Zeile 61: SynLink String^I^IConstant[J

Zeile 61: hi link String^I^IConstant[J

Zeile 62: SynLink Character^IConstant[J

Zeile 62: hi link Character^IConstant[J

Zeile 63: SynLink Number^I^IConstant[J

Zeile 63: hi link Number^I^IConstant[J

Zeile 64: SynLink Boolean^I^IConstant[J

Zeile 64: hi link Boolean^I^IConstant[J

Zeile 65: SynLink Float^I^INumber[J

Zeile 65: hi link Float^I^INumber[J

Zeile 66: SynLink Function^IIdentifier[J

Zeile 66: hi link Function^IIdentifier[J

Zeile 67: SynLink Conditional^IStatement[J

Zeile 67: hi link Conditional^IStatement[J

Zeile 68: SynLink Repeat^I^IStatement[J

Zeile 68: hi link Repeat^I^IStatement[J

Zeile 69: SynLink Label^I^IStatement[J

Zeile 69: hi link Label^I^IStatement[J

Zeile 70: SynLink Operator^IStatement[J

Zeile 70: hi link Operator^IStatement[J

Zeile 71: SynLink Keyword^I^IStatement[J

Zeile 71: hi link Keyword^I^IStatement[J

Zeile 72: SynLink Exception^IStatement[J

Zeile 72: hi link Exception^IStatement[J

Zeile 73: SynLink Include^I^IPreProc[J

Zeile 73: hi link Include^I^IPreProc[J

Zeile 74: SynLink Define^I^IPreProc[J

Zeile 74: hi link Define^I^IPreProc[J

Zeile 75: SynLink Macro^I^IPreProc[J

Zeile 75: hi link Macro^I^IPreProc[J

Zeile 76: SynLink PreCondit^IPreProc[J

Zeile 76: hi link PreCondit^IPreProc[J

Zeile 77: SynLink StorageClass^IType[J

Zeile 77: hi link StorageClass^IType[J

Zeile 78: SynLink Structure^IType[J

Zeile 78: hi link Structure^IType[J

Zeile 79: SynLink Typedef^I^IType[J

Zeile 79: hi link Typedef^I^IType[J

Zeile 80: SynLink Tag^I^ISpecial[J

Zeile 80: hi link Tag^I^ISpecial[J

Zeile 81: SynLink SpecialChar^ISpecial[J

Zeile 81: hi link SpecialChar^ISpecial[J

Zeile 82: SynLink Delimiter^ISpecial[J

Zeile 82: hi link Delimiter^ISpecial[J

Zeile 83: SynLink SpecialComment^ISpecial[J

Zeile 83: hi link SpecialComment^ISpecial[J

Zeile 84: SynLink Debug^I^ISpecial[J

Zeile 84: hi link Debug^I^ISpecial[J

Zeile 85: [J

Zeile 86: delcommand SynColor[J

Zeile 87: delcommand SynLink[J

Lesen von /usr/share/vim/vim82/syntax/syncolor.vim beendet[J
weiter in /usr/share/vim/vim82/syntax/synload.vim[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-polyglot/after/syntax/syncolor.vim"[J
Suche nach "/usr/share/vim/vimfiles/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-misc/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-colorscheme-switcher/after/syntax/syncolor.vim"[J
Zeile 22: endif[J

Zeile 23: [J

Zeile 24: " Line continuation is used here, remove 'C' from 'cpoptions'[J

Zeile 25: let s:cpo_save = &cpo[J

Zeile 26: set cpo&vim[J

Zeile 27: [J

Zeile 28: " First remove all old syntax autocommands.[J

Zeile 29: au! Syntax[J

Zeile 30: [J

Zeile 31: au Syntax *^I^Icall s:SynSet()[J

Zeile 32: [J

Zeile 33: fun! s:SynSet()[J

Zeile 63: [J

Zeile 64: [J

Zeile 65: " Handle adding doxygen to other languages (C, C++, C#, IDL, java, php, DataScript)[J

Zeile 66: au Syntax c,cpp,cs,idl,java,php,datascript if (exists('b:load_doxygen_syntax') && b:load_doxygen_syntax)^I|| (exists('g:load_doxygen_syntax') && g:load_doxygen_syntax)   | runtime! syntax/doxygen.vim | endif[J

Zeile 71: [J

Zeile 72: [J

Zeile 73: " Source the user-specified syntax highlighting file[J

Zeile 74: if exists("mysyntaxfile")[J

Zeile 75:   let s:fname = expand(mysyntaxfile)[J

Zeile 76:   if filereadable(s:fname)[J

Zeile 77:     execute "source " . fnameescape(s:fname)[J

Zeile 78:   endif[J

Zeile 79: endif[J

Zeile 80: [J

Zeile 81: " Restore 'cpoptions'[J

Zeile 82: let &cpo = s:cpo_save[J

Zeile 83: unlet s:cpo_save[J

Lesen von /usr/share/vim/vim82/syntax/synload.vim beendet[J
weiter in /usr/share/vim/vim82/syntax/syntax.vim[J
Zeile 20: [J

Zeile 21: " Load the FileType autocommands if not done yet.[J

Zeile 22: if exists("did_load_filetypes")[J

Zeile 23:   let s:did_ft = 1[J

Zeile 24: else[J

Zeile 25:   filetype on[J

Zeile 26:   let s:did_ft = 0[J

Zeile 27: endif[J

Zeile 28: [J

Zeile 29: " Set up the connection between FileType and Syntax autocommands.[J

Zeile 30: " This makes the syntax automatically set when the file type is detected.[J

Zeile 31: augroup syntaxset[J

Zeile 32:   au! FileType *^Iexe "set syntax=" . expand("<amatch>")[J

Zeile 33: augroup END[J

Zeile 34: [J

Zeile 35: [J

Zeile 36: " Execute the syntax autocommands for the each buffer.[J

Zeile 37: " If the filetype wasn't detected yet, do that now.[J

Zeile 38: " Always do the syntaxset autocommands, for buffers where the 'filetype'[J

Zeile 39: " already was set manually (e.g., help buffers).[J

Zeile 40: doautoall syntaxset FileType[J

AusfÃ¼hrung von FileType Autokommandos fÃ¼r "*"[J
Autokommando exe "set syntax=" . expand("<amatch>")[J

FÃ¼hre aus: exe "set syntax=" . expand("<amatch>")[J

FÃ¼hre aus: set syntax=[J

AusfÃ¼hrung von Syntax Autokommandos fÃ¼r "*"[J
Autokommando call s:SynSet()[J

FÃ¼hre aus: call s:SynSet()[J

rufe <SNR>13_SynSet auf[J()

Zeile 1:   " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist[J

Zeile 2:   syn clear[J

Zeile 3:   if exists("b:current_syntax")[J

Zeile 4:     unlet b:current_syntax[J

Zeile 5:   endif[J

Zeile 6: [J

Zeile 7:   let s = expand("<amatch>")[J

Zeile 8:   if s == "ON"[J

Zeile 9:     " :set syntax=ON[J

Zeile 10:     if &filetype == ""[J

Zeile 11:       echohl ErrorMsg[J

Zeile 12:       echo "filetype unknown"[J

Zeile 13:       echohl None[J

Zeile 14:     endif[J

Zeile 15:     let s = &filetype[J

Zeile 16:   elseif s == "OFF"[J

Zeile 17:     let s = ""[J

Zeile 18:   endif[J

Zeile 19: [J

Zeile 20:   if s != ""[J

Zeile 21:     " Load the syntax file(s).  When there are several, separated by dots,[J

Zeile 22:     " load each in sequence.  Skip empty entries.[J

Zeile 23:     for name in split(s, '\.')[J

Zeile 24:       if !empty(name)[J

Zeile 25: ^Iexe "runtime! syntax/" . name . ".vim syntax/" . name . "/*.vim"[J

Zeile 26:       endif[J

Zeile 27:     endfor[J

Zeile 28:   endif[J

<SNR>13_SynSet lieferte #0 zurÃ¼ck[J

weiter in Syntax Autokommandos fÃ¼r "*"[J

Zeile 41: if !s:did_ft[J

Zeile 42:   doautoall filetypedetect BufRead[J

Zeile 43: endif[J

Lesen von /usr/share/vim/vim82/syntax/syntax.vim beendet[J
weiter in /c/Users/108012516/dotfiles/vimConf/vimrc_fzf[J
Zeile 128: filetype indent on " Enable indenting for files[J

Suche nach "filetype.vim" in "/c/Users/108012516/.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill,/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorscheme[J
Suche nach "/c/Users/108012516/.vim/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-misc/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-colorscheme-switcher/filetype.vim"[J
Suche nach "/usr/share/vim/vimfiles/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-polyglot/filetype.vim"[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-polyglot)[J
fchdir() to previous dir[J
Zeile 128: lese "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-polyglot/filetype.vim"[J
Zeile 1: call polyglot#init#init()[J

rufe polyglot#init#init auf[J()

Zeile 1:   " A no-op as sourcing this file is enough[J

polyglot#init#init lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-polyglot/filetype.vim[J

Lesen von /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-polyglot/filetype.vim beendet[J
weiter in /c/Users/108012516/dotfiles/vimConf/vimrc_fzf[J
Suche nach "/usr/share/vim/vim82/filetype.vim"[J
chdir(/usr/share/vim/vim82)[J
fchdir() to previous dir[J
Zeile 128: lese "/usr/share/vim/vim82/filetype.vim"[J
Zeile 1: " Vim support file to detect file types[J

Zeile 2: "[J

Zeile 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

Zeile 4: " Last Change:^I2021 Apr 17[J

Zeile 5: [J

Zeile 6: " Listen very carefully, I will say this only once[J

Zeile 7: if exists("did_load_filetypes")[J

Zeile 8:   finish[J

Lesen von /usr/share/vim/vim82/filetype.vim beendet[J
weiter in /c/Users/108012516/dotfiles/vimConf/vimrc_fzf[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-polyglot/after/filetype.vim"[J
Suche nach "/usr/share/vim/vimfiles/after/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/after/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/after/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/after/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/after/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight/after/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/after/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim/after/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/after/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf/after/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter/after/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary/after/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/after/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes/after/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow/after/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/after/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons/after/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/after/filetype.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-misc/after/filetype.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-colorscheme-switcher/after/filetype.vim"[J
Suche nach "indent.vim" in "/c/Users/108012516/.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill,/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes,[J
Suche nach "/c/Users/108012516/.vim/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-misc/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-colorscheme-switcher/indent.vim"[J
Suche nach "/usr/share/vim/vimfiles/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-polyglot/indent.vim"[J
Suche nach "/usr/share/vim/vim82/indent.vim"[J
chdir(/usr/share/vim/vim82)[J
fchdir() to previous dir[J
Zeile 128: lese "/usr/share/vim/vim82/indent.vim"[J
Zeile 1: " Vim support file to switch on loading indent files for file types[J

Zeile 2: "[J

Zeile 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

Zeile 4: " Last Change:^I2008 Feb 22[J

Zeile 5: [J

Zeile 6: if exists("did_indent_on")[J

Zeile 7:   finish[J

Lesen von /usr/share/vim/vim82/indent.vim beendet[J
weiter in /c/Users/108012516/dotfiles/vimConf/vimrc_fzf[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-polyglot/after/indent.vim"[J
Suche nach "/usr/share/vim/vimfiles/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/after/indent.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-misc/after/indent.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-colorscheme-switcher/after/indent.vim"[J
Zeile 129: set autoindent " Enable auto indenting[J

Zeile 130: set number " Enable line numbers[J

Zeile 131: "colorscheme desert " Set nice looking colorscheme[J

Zeile 132: "colorscheme herald " Set nice looking colorscheme[J

Zeile 133: "colorscheme oceanic_material[J

Zeile 134: "colorscheme PaperColor[J

Zeile 135: colorscheme OceanicNext[J

Suche nach "colors/OceanicNext.vim" in "/c/Users/108012516/.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill,/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-c[J
Suche nach "/c/Users/108012516/.vim/colors/OceanicNext.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/colors/OceanicNext.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/colors/OceanicNext.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/colors/OceanicNext.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight/colors/OceanicNext.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/colors/OceanicNext.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim/colors/OceanicNext.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/colors/OceanicNext.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf/colors/OceanicNext.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter/colors/OceanicNext.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary/colors/OceanicNext.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/colors/OceanicNext.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes/colors/OceanicNext.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow/colors/OceanicNext.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/colors/OceanicNext.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons/colors/OceanicNext.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim"[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors)[J
fchdir() to previous dir[J
Zeile 135: lese "/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim"[J
Zeile 1: " ===============================================================[J

Zeile 2: " OceanicNext[J

Zeile 3: " Author: Mike Hartington[J

Zeile 4: " ===============================================================[J

Zeile 5: [J

Zeile 6: " {{{ Setup[J

Zeile 7:   set background=dark[J

Suche nach "syntax/syncolor.vim" in "/c/Users/108012516/.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill,/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colo[J
Suche nach "/c/Users/108012516/.vim/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-misc/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-colorscheme-switcher/syntax/syncolor.vim"[J
Suche nach "/usr/share/vim/vimfiles/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-polyglot/syntax/syncolor.vim"[J
Suche nach "/usr/share/vim/vim82/syntax/syncolor.vim"[J
chdir(/usr/share/vim/vim82/syntax)[J
fchdir() to previous dir[J
Zeile 7: lese "/usr/share/vim/vim82/syntax/syncolor.vim"[J
Zeile 1: " Vim syntax support file[J

Zeile 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

Zeile 3: " Last Change:^I2020 Feb 13[J

Zeile 4: [J

Zeile 5: " This file sets up the default methods for highlighting.[J

Zeile 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".[J

Zeile 7: " Also used from init_highlight().[J

Zeile 8: [J

Zeile 9: if !exists("syntax_cmd") || syntax_cmd == "on"[J

Zeile 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links[J

Zeile 11:   command -nargs=* SynColor hi <args>[J

Zeile 12:   command -nargs=* SynLink hi link <args>[J

Zeile 13: else[J

Zeile 14:   if syntax_cmd == "enable"[J

Zeile 15:     " ":syntax enable" keeps any existing colors[J

Zeile 16:     command -nargs=* SynColor hi def <args>[J

Zeile 17:     command -nargs=* SynLink hi def link <args>[J

Zeile 18:   elseif syntax_cmd == "reset"[J

Zeile 19:     " ":syntax reset" resets all colors to the default[J

Zeile 20:     command -nargs=* SynColor hi <args>[J

Zeile 21:     command -nargs=* SynLink hi! link <args>[J

Zeile 22:   else[J

Zeile 23:     " User defined syncolor file has already set the colors.[J

Zeile 24:     finish[J

Zeile 25:   endif[J

Zeile 26: endif[J

Zeile 27: [J

Zeile 28: " Many terminals can only use six different colors (plus black and white).[J

Zeile 29: " Therefore the number of colors used is kept low. It doesn't look nice with[J

Zeile 30: " too many colors anyway.[J

Zeile 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.[J

Zeile 32: " There are two sets of defaults: for a dark and a light background.[J

Zeile 33: if &background == "dark"[J

Zeile 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

Zeile 34: hi Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

Zeile 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

Zeile 35: hi Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

Zeile 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

Zeile 36: hi Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

Zeile 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

Zeile 37: hi Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

Zeile 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

Zeile 38: hi Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

Zeile 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

Zeile 39: hi PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

Zeile 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

Zeile 40: hi Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

Zeile 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

Zeile 41: hi Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

Zeile 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

Zeile 42: hi Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

Zeile 43: else[J

Zeile 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE[J

Zeile 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE[J

Zeile 46:   " #6a5acd is SlateBlue[J

Zeile 47:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=#6a5acd guibg=NONE[J

Zeile 48:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE[J

Zeile 49:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE[J

Zeile 50:   " #6a0dad is Purple[J

Zeile 51:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=#6a0dad guibg=NONE[J

Zeile 52:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE[J

Zeile 53:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue[J

Zeile 54:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

Zeile 55: endif[J

Zeile 56: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

Zeile 56: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

Zeile 57: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

Zeile 57: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

Zeile 58: [J

Zeile 59: " Common groups that link to default highlighting.[J

Zeile 60: " You can specify other highlighting easily.[J

Zeile 61: SynLink String^I^IConstant[J

Zeile 61: hi link String^I^IConstant[J

Zeile 62: SynLink Character^IConstant[J

Zeile 62: hi link Character^IConstant[J

Zeile 63: SynLink Number^I^IConstant[J

Zeile 63: hi link Number^I^IConstant[J

Zeile 64: SynLink Boolean^I^IConstant[J

Zeile 64: hi link Boolean^I^IConstant[J

Zeile 65: SynLink Float^I^INumber[J

Zeile 65: hi link Float^I^INumber[J

Zeile 66: SynLink Function^IIdentifier[J

Zeile 66: hi link Function^IIdentifier[J

Zeile 67: SynLink Conditional^IStatement[J

Zeile 67: hi link Conditional^IStatement[J

Zeile 68: SynLink Repeat^I^IStatement[J

Zeile 68: hi link Repeat^I^IStatement[J

Zeile 69: SynLink Label^I^IStatement[J

Zeile 69: hi link Label^I^IStatement[J

Zeile 70: SynLink Operator^IStatement[J

Zeile 70: hi link Operator^IStatement[J

Zeile 71: SynLink Keyword^I^IStatement[J

Zeile 71: hi link Keyword^I^IStatement[J

Zeile 72: SynLink Exception^IStatement[J

Zeile 72: hi link Exception^IStatement[J

Zeile 73: SynLink Include^I^IPreProc[J

Zeile 73: hi link Include^I^IPreProc[J

Zeile 74: SynLink Define^I^IPreProc[J

Zeile 74: hi link Define^I^IPreProc[J

Zeile 75: SynLink Macro^I^IPreProc[J

Zeile 75: hi link Macro^I^IPreProc[J

Zeile 76: SynLink PreCondit^IPreProc[J

Zeile 76: hi link PreCondit^IPreProc[J

Zeile 77: SynLink StorageClass^IType[J

Zeile 77: hi link StorageClass^IType[J

Zeile 78: SynLink Structure^IType[J

Zeile 78: hi link Structure^IType[J

Zeile 79: SynLink Typedef^I^IType[J

Zeile 79: hi link Typedef^I^IType[J

Zeile 80: SynLink Tag^I^ISpecial[J

Zeile 80: hi link Tag^I^ISpecial[J

Zeile 81: SynLink SpecialChar^ISpecial[J

Zeile 81: hi link SpecialChar^ISpecial[J

Zeile 82: SynLink Delimiter^ISpecial[J

Zeile 82: hi link Delimiter^ISpecial[J

Zeile 83: SynLink SpecialComment^ISpecial[J

Zeile 83: hi link SpecialComment^ISpecial[J

Zeile 84: SynLink Debug^I^ISpecial[J

Zeile 84: hi link Debug^I^ISpecial[J

Zeile 85: [J

Zeile 86: delcommand SynColor[J

Zeile 87: delcommand SynLink[J

Lesen von /usr/share/vim/vim82/syntax/syncolor.vim beendet[J
weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-polyglot/after/syntax/syncolor.vim"[J
Suche nach "/usr/share/vim/vimfiles/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-misc/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-colorscheme-switcher/after/syntax/syncolor.vim"[J
Zeile 8:   hi clear[J

Suche nach "syntax/syncolor.vim" in "/c/Users/108012516/.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill,/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colo[J
Suche nach "/c/Users/108012516/.vim/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-misc/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-colorscheme-switcher/syntax/syncolor.vim"[J
Suche nach "/usr/share/vim/vimfiles/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-polyglot/syntax/syncolor.vim"[J
Suche nach "/usr/share/vim/vim82/syntax/syncolor.vim"[J
chdir(/usr/share/vim/vim82/syntax)[J
fchdir() to previous dir[J
Zeile 8: lese "/usr/share/vim/vim82/syntax/syncolor.vim"[J
Zeile 1: " Vim syntax support file[J

Zeile 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

Zeile 3: " Last Change:^I2020 Feb 13[J

Zeile 4: [J

Zeile 5: " This file sets up the default methods for highlighting.[J

Zeile 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".[J

Zeile 7: " Also used from init_highlight().[J

Zeile 8: [J

Zeile 9: if !exists("syntax_cmd") || syntax_cmd == "on"[J

Zeile 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links[J

Zeile 11:   command -nargs=* SynColor hi <args>[J

Zeile 12:   command -nargs=* SynLink hi link <args>[J

Zeile 13: else[J

Zeile 14:   if syntax_cmd == "enable"[J

Zeile 15:     " ":syntax enable" keeps any existing colors[J

Zeile 16:     command -nargs=* SynColor hi def <args>[J

Zeile 17:     command -nargs=* SynLink hi def link <args>[J

Zeile 18:   elseif syntax_cmd == "reset"[J

Zeile 19:     " ":syntax reset" resets all colors to the default[J

Zeile 20:     command -nargs=* SynColor hi <args>[J

Zeile 21:     command -nargs=* SynLink hi! link <args>[J

Zeile 22:   else[J

Zeile 23:     " User defined syncolor file has already set the colors.[J

Zeile 24:     finish[J

Zeile 25:   endif[J

Zeile 26: endif[J

Zeile 27: [J

Zeile 28: " Many terminals can only use six different colors (plus black and white).[J

Zeile 29: " Therefore the number of colors used is kept low. It doesn't look nice with[J

Zeile 30: " too many colors anyway.[J

Zeile 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.[J

Zeile 32: " There are two sets of defaults: for a dark and a light background.[J

Zeile 33: if &background == "dark"[J

Zeile 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

Zeile 34: hi Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

Zeile 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

Zeile 35: hi Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

Zeile 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

Zeile 36: hi Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

Zeile 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

Zeile 37: hi Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

Zeile 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

Zeile 38: hi Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

Zeile 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

Zeile 39: hi PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

Zeile 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

Zeile 40: hi Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

Zeile 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

Zeile 41: hi Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

Zeile 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

Zeile 42: hi Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

Zeile 43: else[J

Zeile 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE[J

Zeile 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE[J

Zeile 46:   " #6a5acd is SlateBlue[J

Zeile 47:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=#6a5acd guibg=NONE[J

Zeile 48:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE[J

Zeile 49:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE[J

Zeile 50:   " #6a0dad is Purple[J

Zeile 51:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=#6a0dad guibg=NONE[J

Zeile 52:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE[J

Zeile 53:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue[J

Zeile 54:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

Zeile 55: endif[J

Zeile 56: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

Zeile 56: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

Zeile 57: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

Zeile 57: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

Zeile 58: [J

Zeile 59: " Common groups that link to default highlighting.[J

Zeile 60: " You can specify other highlighting easily.[J

Zeile 61: SynLink String^I^IConstant[J

Zeile 61: hi link String^I^IConstant[J

Zeile 62: SynLink Character^IConstant[J

Zeile 62: hi link Character^IConstant[J

Zeile 63: SynLink Number^I^IConstant[J

Zeile 63: hi link Number^I^IConstant[J

Zeile 64: SynLink Boolean^I^IConstant[J

Zeile 64: hi link Boolean^I^IConstant[J

Zeile 65: SynLink Float^I^INumber[J

Zeile 65: hi link Float^I^INumber[J

Zeile 66: SynLink Function^IIdentifier[J

Zeile 66: hi link Function^IIdentifier[J

Zeile 67: SynLink Conditional^IStatement[J

Zeile 67: hi link Conditional^IStatement[J

Zeile 68: SynLink Repeat^I^IStatement[J

Zeile 68: hi link Repeat^I^IStatement[J

Zeile 69: SynLink Label^I^IStatement[J

Zeile 69: hi link Label^I^IStatement[J

Zeile 70: SynLink Operator^IStatement[J

Zeile 70: hi link Operator^IStatement[J

Zeile 71: SynLink Keyword^I^IStatement[J

Zeile 71: hi link Keyword^I^IStatement[J

Zeile 72: SynLink Exception^IStatement[J

Zeile 72: hi link Exception^IStatement[J

Zeile 73: SynLink Include^I^IPreProc[J

Zeile 73: hi link Include^I^IPreProc[J

Zeile 74: SynLink Define^I^IPreProc[J

Zeile 74: hi link Define^I^IPreProc[J

Zeile 75: SynLink Macro^I^IPreProc[J

Zeile 75: hi link Macro^I^IPreProc[J

Zeile 76: SynLink PreCondit^IPreProc[J

Zeile 76: hi link PreCondit^IPreProc[J

Zeile 77: SynLink StorageClass^IType[J

Zeile 77: hi link StorageClass^IType[J

Zeile 78: SynLink Structure^IType[J

Zeile 78: hi link Structure^IType[J

Zeile 79: SynLink Typedef^I^IType[J

Zeile 79: hi link Typedef^I^IType[J

Zeile 80: SynLink Tag^I^ISpecial[J

Zeile 80: hi link Tag^I^ISpecial[J

Zeile 81: SynLink SpecialChar^ISpecial[J

Zeile 81: hi link SpecialChar^ISpecial[J

Zeile 82: SynLink Delimiter^ISpecial[J

Zeile 82: hi link Delimiter^ISpecial[J

Zeile 83: SynLink SpecialComment^ISpecial[J

Zeile 83: hi link SpecialComment^ISpecial[J

Zeile 84: SynLink Debug^I^ISpecial[J

Zeile 84: hi link Debug^I^ISpecial[J

Zeile 85: [J

Zeile 86: delcommand SynColor[J

Zeile 87: delcommand SynLink[J

Lesen von /usr/share/vim/vim82/syntax/syncolor.vim beendet[J
weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-polyglot/after/syntax/syncolor.vim"[J
Suche nach "/usr/share/vim/vimfiles/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-misc/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-colorscheme-switcher/after/syntax/syncolor.vim"[J
Zeile 9:   if exists("syntax_on")[J

Zeile 10:     syntax reset[J

Zeile 10: runtime! syntax/syncolor.vim[J

Suche nach "syntax/syncolor.vim" in "/c/Users/108012516/.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill,/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colo[J
Suche nach "/c/Users/108012516/.vim/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-misc/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-colorscheme-switcher/syntax/syncolor.vim"[J
Suche nach "/usr/share/vim/vimfiles/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-polyglot/syntax/syncolor.vim"[J
Suche nach "/usr/share/vim/vim82/syntax/syncolor.vim"[J
chdir(/usr/share/vim/vim82/syntax)[J
fchdir() to previous dir[J
Zeile 10: lese "/usr/share/vim/vim82/syntax/syncolor.vim"[J
Zeile 1: " Vim syntax support file[J

Zeile 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>[J

Zeile 3: " Last Change:^I2020 Feb 13[J

Zeile 4: [J

Zeile 5: " This file sets up the default methods for highlighting.[J

Zeile 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".[J

Zeile 7: " Also used from init_highlight().[J

Zeile 8: [J

Zeile 9: if !exists("syntax_cmd") || syntax_cmd == "on"[J

Zeile 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links[J

Zeile 11:   command -nargs=* SynColor hi <args>[J

Zeile 12:   command -nargs=* SynLink hi link <args>[J

Zeile 13: else[J

Zeile 14:   if syntax_cmd == "enable"[J

Zeile 15:     " ":syntax enable" keeps any existing colors[J

Zeile 16:     command -nargs=* SynColor hi def <args>[J

Zeile 17:     command -nargs=* SynLink hi def link <args>[J

Zeile 18:   elseif syntax_cmd == "reset"[J

Zeile 19:     " ":syntax reset" resets all colors to the default[J

Zeile 20:     command -nargs=* SynColor hi <args>[J

Zeile 21:     command -nargs=* SynLink hi! link <args>[J

Zeile 22:   else[J

Zeile 23:     " User defined syncolor file has already set the colors.[J

Zeile 24:     finish[J

Zeile 25:   endif[J

Zeile 26: endif[J

Zeile 27: [J

Zeile 28: " Many terminals can only use six different colors (plus black and white).[J

Zeile 29: " Therefore the number of colors used is kept low. It doesn't look nice with[J

Zeile 30: " too many colors anyway.[J

Zeile 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.[J

Zeile 32: " There are two sets of defaults: for a dark and a light background.[J

Zeile 33: if &background == "dark"[J

Zeile 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

Zeile 34: hi Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE[J

Zeile 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

Zeile 35: hi Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE[J

Zeile 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

Zeile 36: hi Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE[J

Zeile 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

Zeile 37: hi Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE[J

Zeile 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

Zeile 38: hi Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE[J

Zeile 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

Zeile 39: hi PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE[J

Zeile 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

Zeile 40: hi Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE[J

Zeile 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

Zeile 41: hi Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff[J

Zeile 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

Zeile 42: hi Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

Zeile 43: else[J

Zeile 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE[J

Zeile 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE[J

Zeile 46:   " #6a5acd is SlateBlue[J

Zeile 47:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=#6a5acd guibg=NONE[J

Zeile 48:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE[J

Zeile 49:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE[J

Zeile 50:   " #6a0dad is Purple[J

Zeile 51:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=#6a0dad guibg=NONE[J

Zeile 52:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE[J

Zeile 53:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue[J

Zeile 54:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE[J

Zeile 55: endif[J

Zeile 56: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

Zeile 56: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red[J

Zeile 57: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

Zeile 57: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow[J

Zeile 58: [J

Zeile 59: " Common groups that link to default highlighting.[J

Zeile 60: " You can specify other highlighting easily.[J

Zeile 61: SynLink String^I^IConstant[J

Zeile 61: hi! link String^I^IConstant[J

Zeile 62: SynLink Character^IConstant[J

Zeile 62: hi! link Character^IConstant[J

Zeile 63: SynLink Number^I^IConstant[J

Zeile 63: hi! link Number^I^IConstant[J

Zeile 64: SynLink Boolean^I^IConstant[J

Zeile 64: hi! link Boolean^I^IConstant[J

Zeile 65: SynLink Float^I^INumber[J

Zeile 65: hi! link Float^I^INumber[J

Zeile 66: SynLink Function^IIdentifier[J

Zeile 66: hi! link Function^IIdentifier[J

Zeile 67: SynLink Conditional^IStatement[J

Zeile 67: hi! link Conditional^IStatement[J

Zeile 68: SynLink Repeat^I^IStatement[J

Zeile 68: hi! link Repeat^I^IStatement[J

Zeile 69: SynLink Label^I^IStatement[J

Zeile 69: hi! link Label^I^IStatement[J

Zeile 70: SynLink Operator^IStatement[J

Zeile 70: hi! link Operator^IStatement[J

Zeile 71: SynLink Keyword^I^IStatement[J

Zeile 71: hi! link Keyword^I^IStatement[J

Zeile 72: SynLink Exception^IStatement[J

Zeile 72: hi! link Exception^IStatement[J

Zeile 73: SynLink Include^I^IPreProc[J

Zeile 73: hi! link Include^I^IPreProc[J

Zeile 74: SynLink Define^I^IPreProc[J

Zeile 74: hi! link Define^I^IPreProc[J

Zeile 75: SynLink Macro^I^IPreProc[J

Zeile 75: hi! link Macro^I^IPreProc[J

Zeile 76: SynLink PreCondit^IPreProc[J

Zeile 76: hi! link PreCondit^IPreProc[J

Zeile 77: SynLink StorageClass^IType[J

Zeile 77: hi! link StorageClass^IType[J

Zeile 78: SynLink Structure^IType[J

Zeile 78: hi! link Structure^IType[J

Zeile 79: SynLink Typedef^I^IType[J

Zeile 79: hi! link Typedef^I^IType[J

Zeile 80: SynLink Tag^I^ISpecial[J

Zeile 80: hi! link Tag^I^ISpecial[J

Zeile 81: SynLink SpecialChar^ISpecial[J

Zeile 81: hi! link SpecialChar^ISpecial[J

Zeile 82: SynLink Delimiter^ISpecial[J

Zeile 82: hi! link Delimiter^ISpecial[J

Zeile 83: SynLink SpecialComment^ISpecial[J

Zeile 83: hi! link SpecialComment^ISpecial[J

Zeile 84: SynLink Debug^I^ISpecial[J

Zeile 84: hi! link Debug^I^ISpecial[J

Zeile 85: [J

Zeile 86: delcommand SynColor[J

Zeile 87: delcommand SynLink[J

Lesen von /usr/share/vim/vim82/syntax/syncolor.vim beendet[J
weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-polyglot/after/syntax/syncolor.vim"[J
Suche nach "/usr/share/vim/vimfiles/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-misc/after/syntax/syncolor.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-colorscheme-switcher/after/syntax/syncolor.vim"[J
Zeile 11:   endif[J

Zeile 12:   let g:colors_name="OceanicNext"[J

Zeile 13: " }}}[J

Zeile 14: " {{{ Italics[J

Zeile 15:   let g:oceanic_next_terminal_italic = get(g:, 'oceanic_next_terminal_italic', 0)[J

Zeile 16:   let s:italic = ""[J

Zeile 17:   if g:oceanic_next_terminal_italic == 1[J

Zeile 18:     let s:italic = "italic"[J

Zeile 19:   endif[J

Zeile 20: "}}}[J

Zeile 21: " {{{ Bold[J

Zeile 22:   let g:oceanic_next_terminal_bold = get(g:, 'oceanic_next_terminal_bold', 0)[J

Zeile 23:   let s:bold = ""[J

Zeile 24:   if g:oceanic_next_terminal_bold == 1[J

Zeile 25:    let s:bold = "bold"[J

Zeile 26:   endif[J

Zeile 27: "}}}[J

Zeile 28: " {{{ Colors[J

Zeile 29:   let s:base00 = ['#1b2b34', '235'][J

Zeile 30:   let s:base01 = ['#343d46', '237'][J

Zeile 31:   let s:base02 = ['#4f5b66', '240'][J

Zeile 32:   let s:base03 = ['#65737e', '243'][J

Zeile 33:   let s:base04 = ['#a7adba', '145'][J

Zeile 34:   let s:base05 = ['#c0c5ce', '251'][J

Zeile 35:   let s:base06 = ['#cdd3de', '252'][J

Zeile 36:   let s:base07 = ['#d8dee9', '253'][J

Zeile 37:   let s:red    = ['#ec5f67', '203'][J

Zeile 38:   let s:orange = ['#f99157', '209'][J

Zeile 39:   let s:yellow = ['#fac863', '221'][J

Zeile 40:   let s:green  = ['#99c794', '114'][J

Zeile 41:   let s:cyan   = ['#62b3b2', '73'][J

Zeile 42:   let s:blue   = ['#6699cc', '68'][J

Zeile 43:   let s:purple = ['#c594c5', '176'][J

Zeile 44:   let s:brown  = ['#ab7967', '137'][J

Zeile 45:   let s:white  = ['#ffffff', '15'][J

Zeile 46:   let s:none   = ['NONE',    'NONE'][J

Zeile 47: [J

Zeile 48: " }}}[J

Zeile 49: " {{{ Highlight function[J

Zeile 50: function! s:hi(group, fg, bg, attr, attrsp)[J

Zeile 68: " }}}[J

Zeile 69: " {{{ call s::hi(group, fg, bg, gui, guisp)[J

Zeile 70:   call s:hi('Bold',                               '',       '',       s:bold,      '')[J

rufe <SNR>16_hi auf[J('Bold', '', '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 71:   call s:hi('Debug',                              s:red,    '',       '',          '')[J

rufe <SNR>16_hi auf[J('Debug', ['#ec5f67', '203'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Debug guifg=#ec5f67[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Debug ctermfg=203[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 72:   call s:hi('Directory',                          s:blue,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('Directory', ['#6699cc', '68'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Directory guifg=#6699cc[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Directory ctermfg=68[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 73:   call s:hi('ErrorMsg',                           s:red,    s:base00, '',          '')[J

rufe <SNR>16_hi auf[J('ErrorMsg', ['#ec5f67', '203'], ['#1b2b34', '235'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi ErrorMsg guifg=#ec5f67[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi ErrorMsg ctermfg=203[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi ErrorMsg guibg=#1b2b34[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi ErrorMsg ctermbg=235[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 74:   call s:hi('Exception',                          s:red,    '',       '',          '')[J

rufe <SNR>16_hi auf[J('Exception', ['#ec5f67', '203'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Exception guifg=#ec5f67[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Exception ctermfg=203[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 75:   call s:hi('FoldColumn',                         s:blue,   s:base00, '',          '')[J

rufe <SNR>16_hi auf[J('FoldColumn', ['#6699cc', '68'], ['#1b2b34', '235'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi FoldColumn guifg=#6699cc[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi FoldColumn ctermfg=68[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi FoldColumn guibg=#1b2b34[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi FoldColumn ctermbg=235[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 76:   call s:hi('Folded',                             s:base03, s:base01, s:italic,    '')[J

rufe <SNR>16_hi auf[J('Folded', ['#65737e', '243'], ['#343d46', '237'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Folded guifg=#65737e[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Folded ctermfg=243[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi Folded guibg=#343d46[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi Folded ctermbg=237[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 77:   call s:hi('IncSearch',                          s:base01, s:orange, 'NONE',      '')[J

rufe <SNR>16_hi auf[J('IncSearch', ['#343d46', '237'], ['#f99157', '209'], 'NONE', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi IncSearch guifg=#343d46[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi IncSearch ctermfg=237[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi IncSearch guibg=#f99157[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi IncSearch ctermbg=209[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 11: hi IncSearch gui=NONE[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 12: hi IncSearch cterm=NONE[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 78:   call s:hi('Italic',                             '',       '',       s:italic,    '')[J

rufe <SNR>16_hi auf[J('Italic', '', '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 79: [J

Zeile 80:   call s:hi('Macro',                              s:red,    '',       '',          '')[J

rufe <SNR>16_hi auf[J('Macro', ['#ec5f67', '203'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Macro guifg=#ec5f67[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Macro ctermfg=203[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 81:   call s:hi('MatchParen',                         s:base05, s:base03, '',          '')[J

rufe <SNR>16_hi auf[J('MatchParen', ['#c0c5ce', '251'], ['#65737e', '243'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi MatchParen guifg=#c0c5ce[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi MatchParen ctermfg=251[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi MatchParen guibg=#65737e[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi MatchParen ctermbg=243[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 82:   call s:hi('ModeMsg',                            s:green,  '',       '',          '')[J

rufe <SNR>16_hi auf[J('ModeMsg', ['#99c794', '114'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi ModeMsg guifg=#99c794[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi ModeMsg ctermfg=114[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 83:   call s:hi('MoreMsg',                            s:green,  '',       '',          '')[J

rufe <SNR>16_hi auf[J('MoreMsg', ['#99c794', '114'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi MoreMsg guifg=#99c794[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi MoreMsg ctermfg=114[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 84:   call s:hi('Question',                           s:blue,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('Question', ['#6699cc', '68'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Question guifg=#6699cc[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Question ctermfg=68[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 85:   call s:hi('Search',                             s:base03, s:yellow, '',          '')[J

rufe <SNR>16_hi auf[J('Search', ['#65737e', '243'], ['#fac863', '221'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Search guifg=#65737e[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Search ctermfg=243[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi Search guibg=#fac863[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi Search ctermbg=221[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 86:   call s:hi('SpecialKey',                         s:base03, '',       '',          '')[J

rufe <SNR>16_hi auf[J('SpecialKey', ['#65737e', '243'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi SpecialKey guifg=#65737e[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi SpecialKey ctermfg=243[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 87:   call s:hi('TooLong',                            s:red,    '',       '',          '')[J

rufe <SNR>16_hi auf[J('TooLong', ['#ec5f67', '203'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi TooLong guifg=#ec5f67[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi TooLong ctermfg=203[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 88:   call s:hi('Underlined',                         s:red,    '',       '',          '')[J

rufe <SNR>16_hi auf[J('Underlined', ['#ec5f67', '203'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Underlined guifg=#ec5f67[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Underlined ctermfg=203[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 89:   call s:hi('Visual',                             '',       s:base02, '',          '')[J

rufe <SNR>16_hi auf[J('Visual', '', ['#4f5b66', '240'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi Visual guibg=#4f5b66[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi Visual ctermbg=240[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 90:   call s:hi('VisualNOS',                          s:red,    '',       '',          '')[J

rufe <SNR>16_hi auf[J('VisualNOS', ['#ec5f67', '203'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi VisualNOS guifg=#ec5f67[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi VisualNOS ctermfg=203[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 91:   call s:hi('WarningMsg',                         s:red,    '',       '',          '')[J

rufe <SNR>16_hi auf[J('WarningMsg', ['#ec5f67', '203'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi WarningMsg guifg=#ec5f67[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi WarningMsg ctermfg=203[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 92:   call s:hi('WildMenu',                           s:base07, s:blue,   '',          '')[J

rufe <SNR>16_hi auf[J('WildMenu', ['#d8dee9', '253'], ['#6699cc', '68'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi WildMenu guifg=#d8dee9[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi WildMenu ctermfg=253[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi WildMenu guibg=#6699cc[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi WildMenu ctermbg=68[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 93:   call s:hi('Title',                              s:blue,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('Title', ['#6699cc', '68'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Title guifg=#6699cc[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Title ctermfg=68[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 94:   call s:hi('Conceal',                            s:blue,   s:base00, '',          '')[J

rufe <SNR>16_hi auf[J('Conceal', ['#6699cc', '68'], ['#1b2b34', '235'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Conceal guifg=#6699cc[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Conceal ctermfg=68[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi Conceal guibg=#1b2b34[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi Conceal ctermbg=235[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 95:   call s:hi('Cursor',                             s:base00, s:base05, '',          '')[J

rufe <SNR>16_hi auf[J('Cursor', ['#1b2b34', '235'], ['#c0c5ce', '251'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Cursor guifg=#1b2b34[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Cursor ctermfg=235[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi Cursor guibg=#c0c5ce[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi Cursor ctermbg=251[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 96:   call s:hi('NonText',                            s:base03, '',       '',          '')[J

rufe <SNR>16_hi auf[J('NonText', ['#65737e', '243'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi NonText guifg=#65737e[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi NonText ctermfg=243[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 97:   call s:hi('Normal',                             s:base07, s:base00, '',          '')[J

rufe <SNR>16_hi auf[J('Normal', ['#d8dee9', '253'], ['#1b2b34', '235'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Normal guifg=#d8dee9[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Normal ctermfg=253[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi Normal guibg=#1b2b34[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi Normal ctermbg=235[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 98:   call s:hi('EndOfBuffer',                        s:base05, s:base00, '',          '')[J

rufe <SNR>16_hi auf[J('EndOfBuffer', ['#c0c5ce', '251'], ['#1b2b34', '235'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi EndOfBuffer guifg=#c0c5ce[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi EndOfBuffer ctermfg=251[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi EndOfBuffer guibg=#1b2b34[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi EndOfBuffer ctermbg=235[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 99:   call s:hi('LineNr',                             s:base03, s:base00, '',          '')[J

rufe <SNR>16_hi auf[J('LineNr', ['#65737e', '243'], ['#1b2b34', '235'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi LineNr guifg=#65737e[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi LineNr ctermfg=243[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi LineNr guibg=#1b2b34[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi LineNr ctermbg=235[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 100:   call s:hi('SignColumn',                         s:base00, s:base00, '',          '')[J

rufe <SNR>16_hi auf[J('SignColumn', ['#1b2b34', '235'], ['#1b2b34', '235'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi SignColumn guifg=#1b2b34[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi SignColumn ctermfg=235[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi SignColumn guibg=#1b2b34[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi SignColumn ctermbg=235[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 101:   call s:hi('StatusLine',                         s:base01, s:base03, '',          '')[J

rufe <SNR>16_hi auf[J('StatusLine', ['#343d46', '237'], ['#65737e', '243'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi StatusLine guifg=#343d46[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi StatusLine ctermfg=237[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi StatusLine guibg=#65737e[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi StatusLine ctermbg=243[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 102:   call s:hi('StatusLineNC',                       s:base03, s:base01, '',          '')[J

rufe <SNR>16_hi auf[J('StatusLineNC', ['#65737e', '243'], ['#343d46', '237'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi StatusLineNC guifg=#65737e[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi StatusLineNC ctermfg=243[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi StatusLineNC guibg=#343d46[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi StatusLineNC ctermbg=237[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 103:   call s:hi('VertSplit',                          s:base00, s:base02, '',          '')[J

rufe <SNR>16_hi auf[J('VertSplit', ['#1b2b34', '235'], ['#4f5b66', '240'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi VertSplit guifg=#1b2b34[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi VertSplit ctermfg=235[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi VertSplit guibg=#4f5b66[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi VertSplit ctermbg=240[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 104:   call s:hi('ColorColumn',                        '',       s:base01, '',          '')[J

rufe <SNR>16_hi auf[J('ColorColumn', '', ['#343d46', '237'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi ColorColumn guibg=#343d46[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi ColorColumn ctermbg=237[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 105:   call s:hi('CursorColumn',                       '',       s:base01, '',          '')[J

rufe <SNR>16_hi auf[J('CursorColumn', '', ['#343d46', '237'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi CursorColumn guibg=#343d46[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi CursorColumn ctermbg=237[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 106:   call s:hi('CursorLine',                         '',       s:base01, 'None',      '')[J

rufe <SNR>16_hi auf[J('CursorLine', '', ['#343d46', '237'], 'None', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi CursorLine guibg=#343d46[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi CursorLine ctermbg=237[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 11: hi CursorLine gui=None[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 12: hi CursorLine cterm=None[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 107:   call s:hi('CursorLineNR',                       s:base00, s:base00, '',          '')[J

rufe <SNR>16_hi auf[J('CursorLineNR', ['#1b2b34', '235'], ['#1b2b34', '235'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi CursorLineNR guifg=#1b2b34[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi CursorLineNR ctermfg=235[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi CursorLineNR guibg=#1b2b34[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi CursorLineNR ctermbg=235[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 108:   call s:hi('CursorLineNr',                       s:base03, s:base01, '',          '')[J

rufe <SNR>16_hi auf[J('CursorLineNr', ['#65737e', '243'], ['#343d46', '237'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi CursorLineNr guifg=#65737e[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi CursorLineNr ctermfg=243[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi CursorLineNr guibg=#343d46[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi CursorLineNr ctermbg=237[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 109:   call s:hi('PMenu',                              s:base04, s:base01, '',          '')[J

rufe <SNR>16_hi auf[J('PMenu', ['#a7adba', '145'], ['#343d46', '237'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi PMenu guifg=#a7adba[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi PMenu ctermfg=145[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi PMenu guibg=#343d46[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi PMenu ctermbg=237[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 110:   call s:hi('PMenuSel',                           s:base07, s:blue,   '',          '')[J

rufe <SNR>16_hi auf[J('PMenuSel', ['#d8dee9', '253'], ['#6699cc', '68'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi PMenuSel guifg=#d8dee9[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi PMenuSel ctermfg=253[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi PMenuSel guibg=#6699cc[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi PMenuSel ctermbg=68[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 111:   call s:hi('PmenuSbar',                          '',       s:base02, '',          '')[J

rufe <SNR>16_hi auf[J('PmenuSbar', '', ['#4f5b66', '240'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi PmenuSbar guibg=#4f5b66[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi PmenuSbar ctermbg=240[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 112:   call s:hi('PmenuThumb',                         '',       s:base07, '',          '')[J

rufe <SNR>16_hi auf[J('PmenuThumb', '', ['#d8dee9', '253'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi PmenuThumb guibg=#d8dee9[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi PmenuThumb ctermbg=253[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 113:   call s:hi('TabLine',                            s:base03, s:base01, '',          '')[J

rufe <SNR>16_hi auf[J('TabLine', ['#65737e', '243'], ['#343d46', '237'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi TabLine guifg=#65737e[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi TabLine ctermfg=243[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi TabLine guibg=#343d46[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi TabLine ctermbg=237[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 114:   call s:hi('TabLineFill',                        s:base03, s:base01, '',          '')[J

rufe <SNR>16_hi auf[J('TabLineFill', ['#65737e', '243'], ['#343d46', '237'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi TabLineFill guifg=#65737e[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi TabLineFill ctermfg=243[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi TabLineFill guibg=#343d46[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi TabLineFill ctermbg=237[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 115:   call s:hi('TabLineSel',                         s:green,  s:base01, '',          '')[J

rufe <SNR>16_hi auf[J('TabLineSel', ['#99c794', '114'], ['#343d46', '237'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi TabLineSel guifg=#99c794[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi TabLineSel ctermfg=114[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi TabLineSel guibg=#343d46[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi TabLineSel ctermbg=237[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 116:   call s:hi('helpExample',                        s:yellow, '',       '',          '')[J

rufe <SNR>16_hi auf[J('helpExample', ['#fac863', '221'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi helpExample guifg=#fac863[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi helpExample ctermfg=221[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 117:   call s:hi('helpCommand',                        s:yellow, '',       '',          '')[J

rufe <SNR>16_hi auf[J('helpCommand', ['#fac863', '221'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi helpCommand guifg=#fac863[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi helpCommand ctermfg=221[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 118: [J

Zeile 119:   " Standard syntax highlighting[J

Zeile 120:   call s:hi('Boolean',                            s:orange, '',       '',          '')[J

rufe <SNR>16_hi auf[J('Boolean', ['#f99157', '209'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Boolean guifg=#f99157[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Boolean ctermfg=209[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 121:   call s:hi('Character',                          s:red,    '',       '',          '')[J

rufe <SNR>16_hi auf[J('Character', ['#ec5f67', '203'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Character guifg=#ec5f67[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Character ctermfg=203[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 122:   call s:hi('Comment',                            s:base03, '',       s:italic,    '')[J

rufe <SNR>16_hi auf[J('Comment', ['#65737e', '243'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Comment guifg=#65737e[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Comment ctermfg=243[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 123:   call s:hi('Conditional',                        s:purple, '',       '',          '')[J

rufe <SNR>16_hi auf[J('Conditional', ['#c594c5', '176'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Conditional guifg=#c594c5[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Conditional ctermfg=176[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 124:   call s:hi('Constant',                           s:orange, '',       '',          '')[J

rufe <SNR>16_hi auf[J('Constant', ['#f99157', '209'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Constant guifg=#f99157[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Constant ctermfg=209[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 125:   call s:hi('Define',                             s:purple, '',       '',          '')[J

rufe <SNR>16_hi auf[J('Define', ['#c594c5', '176'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Define guifg=#c594c5[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Define ctermfg=176[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 126:   call s:hi('Delimiter',                          s:brown,  '',       '',          '')[J

rufe <SNR>16_hi auf[J('Delimiter', ['#ab7967', '137'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Delimiter guifg=#ab7967[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Delimiter ctermfg=137[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 127:   call s:hi('Float',                              s:orange, '',       '',          '')[J

rufe <SNR>16_hi auf[J('Float', ['#f99157', '209'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Float guifg=#f99157[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Float ctermfg=209[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 128:   call s:hi('Function',                           s:blue,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('Function', ['#6699cc', '68'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Function guifg=#6699cc[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Function ctermfg=68[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 129: [J

Zeile 130:   call s:hi('Identifier',                         s:cyan,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('Identifier', ['#62b3b2', '73'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Identifier guifg=#62b3b2[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Identifier ctermfg=73[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 131:   call s:hi('Include',                            s:blue,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('Include', ['#6699cc', '68'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Include guifg=#6699cc[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Include ctermfg=68[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 132:   call s:hi('Keyword',                            s:purple, '',       '',          '')[J

rufe <SNR>16_hi auf[J('Keyword', ['#c594c5', '176'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Keyword guifg=#c594c5[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Keyword ctermfg=176[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 133: [J

Zeile 134:   call s:hi('Label',                              s:yellow, '',       '',          '')[J

rufe <SNR>16_hi auf[J('Label', ['#fac863', '221'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Label guifg=#fac863[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Label ctermfg=221[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 135:   call s:hi('Number',                             s:orange, '',       '',          '')[J

rufe <SNR>16_hi auf[J('Number', ['#f99157', '209'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Number guifg=#f99157[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Number ctermfg=209[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 136:   call s:hi('Operator',                           s:base05, '',       '',          '')[J

rufe <SNR>16_hi auf[J('Operator', ['#c0c5ce', '251'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Operator guifg=#c0c5ce[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Operator ctermfg=251[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 137:   call s:hi('PreProc',                            s:yellow, '',       '',          '')[J

rufe <SNR>16_hi auf[J('PreProc', ['#fac863', '221'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi PreProc guifg=#fac863[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi PreProc ctermfg=221[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 138:   call s:hi('Repeat',                             s:yellow, '',       '',          '')[J

rufe <SNR>16_hi auf[J('Repeat', ['#fac863', '221'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Repeat guifg=#fac863[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Repeat ctermfg=221[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 139:   call s:hi('Special',                            s:cyan,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('Special', ['#62b3b2', '73'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Special guifg=#62b3b2[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Special ctermfg=73[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 140:   call s:hi('SpecialChar',                        s:brown,  '',       '',          '')[J

rufe <SNR>16_hi auf[J('SpecialChar', ['#ab7967', '137'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi SpecialChar guifg=#ab7967[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi SpecialChar ctermfg=137[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 141:   call s:hi('Statement',                          s:red,    '',       '',          '')[J

rufe <SNR>16_hi auf[J('Statement', ['#ec5f67', '203'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Statement guifg=#ec5f67[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Statement ctermfg=203[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 142:   call s:hi('StorageClass',                       s:yellow, '',       '',          '')[J

rufe <SNR>16_hi auf[J('StorageClass', ['#fac863', '221'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi StorageClass guifg=#fac863[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi StorageClass ctermfg=221[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 143:   call s:hi('String',                             s:green,  '',       '',          '')[J

rufe <SNR>16_hi auf[J('String', ['#99c794', '114'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi String guifg=#99c794[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi String ctermfg=114[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 144:   call s:hi('Structure',                          s:purple, '',       '',          '')[J

rufe <SNR>16_hi auf[J('Structure', ['#c594c5', '176'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Structure guifg=#c594c5[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Structure ctermfg=176[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 145:   call s:hi('Tag',                                s:yellow, '',       '',          '')[J

rufe <SNR>16_hi auf[J('Tag', ['#fac863', '221'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Tag guifg=#fac863[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Tag ctermfg=221[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 146:   call s:hi('Todo',                               s:yellow, s:base01, '',          '')[J

rufe <SNR>16_hi auf[J('Todo', ['#fac863', '221'], ['#343d46', '237'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Todo guifg=#fac863[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Todo ctermfg=221[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi Todo guibg=#343d46[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi Todo ctermbg=237[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 147:   call s:hi('Type',                               s:yellow, '',       '',          '')[J

rufe <SNR>16_hi auf[J('Type', ['#fac863', '221'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Type guifg=#fac863[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Type ctermfg=221[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 148:   call s:hi('Typedef',                            s:yellow, '',       '',          '')[J

rufe <SNR>16_hi auf[J('Typedef', ['#fac863', '221'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Typedef guifg=#fac863[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Typedef ctermfg=221[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 149: [J

Zeile 150:   " LSP[J

Zeile 151:   call s:hi('LspDiagnosticsDefaultError',         '',       '',       '',          '')[J

rufe <SNR>16_hi auf[J('LspDiagnosticsDefaultError', '', '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 152:   call s:hi('LspDiagnosticsSignError',            s:red,    '',       '',          '')[J

rufe <SNR>16_hi auf[J('LspDiagnosticsSignError', ['#ec5f67', '203'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi LspDiagnosticsSignError guifg=#ec5f67[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi LspDiagnosticsSignError ctermfg=203[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 153:   call s:hi('LspDiagnosticsUnderlineError',       '',       '',       'undercurl', '')[J

rufe <SNR>16_hi auf[J('LspDiagnosticsUnderlineError', '', '', 'undercurl', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 11: hi LspDiagnosticsUnderlineError gui=undercurl[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 12: hi LspDiagnosticsUnderlineError cterm=undercurl[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 154: [J

Zeile 155:   call s:hi('LspDiagnosticsDefaultWarning',       '',       '',       '',          '')[J

rufe <SNR>16_hi auf[J('LspDiagnosticsDefaultWarning', '', '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 156:   call s:hi('LspDiagnosticsSignWarning',          s:yellow, '',       '',          '')[J

rufe <SNR>16_hi auf[J('LspDiagnosticsSignWarning', ['#fac863', '221'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi LspDiagnosticsSignWarning guifg=#fac863[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi LspDiagnosticsSignWarning ctermfg=221[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 157:   call s:hi('LspDiagnosticsUnderlineWarning',     '',       '',       'undercurl', '')[J

rufe <SNR>16_hi auf[J('LspDiagnosticsUnderlineWarning', '', '', 'undercurl', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 11: hi LspDiagnosticsUnderlineWarning gui=undercurl[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 12: hi LspDiagnosticsUnderlineWarning cterm=undercurl[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 158: [J

Zeile 159:   call s:hi('LspDiagnosticsDefaultInformation',   '',       '',       '',          '')[J

rufe <SNR>16_hi auf[J('LspDiagnosticsDefaultInformation', '', '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 160:   call s:hi('LspDiagnosticsSignInformation',      s:blue,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('LspDiagnosticsSignInformation', ['#6699cc', '68'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi LspDiagnosticsSignInformation guifg=#6699cc[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi LspDiagnosticsSignInformation ctermfg=68[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 161:   call s:hi('LspDiagnosticsUnderlineInformation', '',       '',       'undercurl', '')[J

rufe <SNR>16_hi auf[J('LspDiagnosticsUnderlineInformation', '', '', 'undercurl', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 11: hi LspDiagnosticsUnderlineInformation gui=undercurl[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 12: hi LspDiagnosticsUnderlineInformation cterm=undercurl[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 162: [J

Zeile 163:   call s:hi('LspDiagnosticsDefaultHint',          '',       '',       '',          '')[J

rufe <SNR>16_hi auf[J('LspDiagnosticsDefaultHint', '', '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 164:   call s:hi('LspDiagnosticsSignHint',             s:cyan,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('LspDiagnosticsSignHint', ['#62b3b2', '73'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi LspDiagnosticsSignHint guifg=#62b3b2[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi LspDiagnosticsSignHint ctermfg=73[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 165:   call s:hi('LspDiagnosticsUnderlineHint',        '',       '',       'undercurl', '')[J

rufe <SNR>16_hi auf[J('LspDiagnosticsUnderlineHint', '', '', 'undercurl', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 11: hi LspDiagnosticsUnderlineHint gui=undercurl[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 12: hi LspDiagnosticsUnderlineHint cterm=undercurl[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 166: [J

Zeile 167: [J

Zeile 168:   " TreeSitter stuff[J

Zeile 169:   call s:hi('TSInclude',                          s:cyan,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('TSInclude', ['#62b3b2', '73'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi TSInclude guifg=#62b3b2[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi TSInclude ctermfg=73[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 170:   call s:hi('TSPunctBracket',                     s:cyan,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('TSPunctBracket', ['#62b3b2', '73'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi TSPunctBracket guifg=#62b3b2[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi TSPunctBracket ctermfg=73[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 171:   call s:hi('TSPunctDelimiter',                   s:base07, '',       '',          '')[J

rufe <SNR>16_hi auf[J('TSPunctDelimiter', ['#d8dee9', '253'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi TSPunctDelimiter guifg=#d8dee9[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi TSPunctDelimiter ctermfg=253[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 172:   call s:hi('TSParameter',                        s:base07, '',       '',          '')[J

rufe <SNR>16_hi auf[J('TSParameter', ['#d8dee9', '253'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi TSParameter guifg=#d8dee9[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi TSParameter ctermfg=253[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 173:   call s:hi('TSType',                             s:blue,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('TSType', ['#6699cc', '68'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi TSType guifg=#6699cc[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi TSType ctermfg=68[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 174:   call s:hi('TSFunction',                         s:cyan,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('TSFunction', ['#62b3b2', '73'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi TSFunction guifg=#62b3b2[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi TSFunction ctermfg=73[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 175: [J

Zeile 176:   call s:hi('TSTagDelimiter',                     s:cyan,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('TSTagDelimiter', ['#62b3b2', '73'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi TSTagDelimiter guifg=#62b3b2[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi TSTagDelimiter ctermfg=73[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 177:   call s:hi('TSProperty',                         s:yellow, '',       '',          '')[J

rufe <SNR>16_hi auf[J('TSProperty', ['#fac863', '221'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi TSProperty guifg=#fac863[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi TSProperty ctermfg=221[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 178:   call s:hi('TSMethod',                           s:blue,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('TSMethod', ['#6699cc', '68'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi TSMethod guifg=#6699cc[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi TSMethod ctermfg=68[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 179:   call s:hi('TSParameter',                        s:yellow, '',       '',          '')[J

rufe <SNR>16_hi auf[J('TSParameter', ['#fac863', '221'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi TSParameter guifg=#fac863[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi TSParameter ctermfg=221[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 180:   call s:hi('TSConstructor',                      s:base07, '',       '',          '')[J

rufe <SNR>16_hi auf[J('TSConstructor', ['#d8dee9', '253'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi TSConstructor guifg=#d8dee9[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi TSConstructor ctermfg=253[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 181:   call s:hi('TSVariable',                         s:base07, '',       '',          '')[J

rufe <SNR>16_hi auf[J('TSVariable', ['#d8dee9', '253'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi TSVariable guifg=#d8dee9[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi TSVariable ctermfg=253[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 182:   call s:hi('TSOperator',                         s:base07, '',       '',          '')[J

rufe <SNR>16_hi auf[J('TSOperator', ['#d8dee9', '253'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi TSOperator guifg=#d8dee9[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi TSOperator ctermfg=253[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 183:   call s:hi('TSTag',                              s:base07, '',       '',          '')[J

rufe <SNR>16_hi auf[J('TSTag', ['#d8dee9', '253'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi TSTag guifg=#d8dee9[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi TSTag ctermfg=253[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 184:   call s:hi('TSKeyword',                          s:purple, '',       '',          '')[J

rufe <SNR>16_hi auf[J('TSKeyword', ['#c594c5', '176'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi TSKeyword guifg=#c594c5[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi TSKeyword ctermfg=176[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 185:   call s:hi('TSKeywordOperator',                  s:purple, '',       '',          '')[J

rufe <SNR>16_hi auf[J('TSKeywordOperator', ['#c594c5', '176'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi TSKeywordOperator guifg=#c594c5[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi TSKeywordOperator ctermfg=176[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 186:   call s:hi('TSVariableBuiltin',                  s:red,    '',       '',          '')[J

rufe <SNR>16_hi auf[J('TSVariableBuiltin', ['#ec5f67', '203'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi TSVariableBuiltin guifg=#ec5f67[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi TSVariableBuiltin ctermfg=203[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 187:   call s:hi('TSLabel',                            s:cyan,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('TSLabel', ['#62b3b2', '73'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi TSLabel guifg=#62b3b2[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi TSLabel ctermfg=73[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 188: [J

Zeile 189:   call s:hi('SpellBad',                           '',       '',       'undercurl', '')[J

rufe <SNR>16_hi auf[J('SpellBad', '', '', 'undercurl', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 11: hi SpellBad gui=undercurl[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 12: hi SpellBad cterm=undercurl[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 190:   call s:hi('SpellLocal',                         '',       '',       'undercurl', '')[J

rufe <SNR>16_hi auf[J('SpellLocal', '', '', 'undercurl', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 11: hi SpellLocal gui=undercurl[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 12: hi SpellLocal cterm=undercurl[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 191:   call s:hi('SpellCap',                           '',       '',       'undercurl', '')[J

rufe <SNR>16_hi auf[J('SpellCap', '', '', 'undercurl', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 11: hi SpellCap gui=undercurl[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 12: hi SpellCap cterm=undercurl[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 192:   call s:hi('SpellRare',                          '',       '',       'undercurl', '')[J

rufe <SNR>16_hi auf[J('SpellRare', '', '', 'undercurl', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 11: hi SpellRare gui=undercurl[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 12: hi SpellRare cterm=undercurl[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 193: [J

Zeile 194:   call s:hi('csClass',                            s:yellow, '',       '',          '')[J

rufe <SNR>16_hi auf[J('csClass', ['#fac863', '221'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi csClass guifg=#fac863[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi csClass ctermfg=221[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 195:   call s:hi('csAttribute',                        s:yellow, '',       '',          '')[J

rufe <SNR>16_hi auf[J('csAttribute', ['#fac863', '221'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi csAttribute guifg=#fac863[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi csAttribute ctermfg=221[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 196:   call s:hi('csModifier',                         s:purple, '',       '',          '')[J

rufe <SNR>16_hi auf[J('csModifier', ['#c594c5', '176'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi csModifier guifg=#c594c5[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi csModifier ctermfg=176[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 197:   call s:hi('csType',                             s:red,    '',       '',          '')[J

rufe <SNR>16_hi auf[J('csType', ['#ec5f67', '203'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi csType guifg=#ec5f67[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi csType ctermfg=203[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 198:   call s:hi('csUnspecifiedStatement',             s:blue,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('csUnspecifiedStatement', ['#6699cc', '68'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi csUnspecifiedStatement guifg=#6699cc[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi csUnspecifiedStatement ctermfg=68[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 199:   call s:hi('csContextualStatement',              s:purple, '',       '',          '')[J

rufe <SNR>16_hi auf[J('csContextualStatement', ['#c594c5', '176'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi csContextualStatement guifg=#c594c5[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi csContextualStatement ctermfg=176[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 200:   call s:hi('csNewDecleration',                   s:red,    '',       '',          '')[J

rufe <SNR>16_hi auf[J('csNewDecleration', ['#ec5f67', '203'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi csNewDecleration guifg=#ec5f67[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi csNewDecleration ctermfg=203[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 201:   call s:hi('cOperator',                          s:cyan,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('cOperator', ['#62b3b2', '73'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi cOperator guifg=#62b3b2[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi cOperator ctermfg=73[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 202:   call s:hi('cPreCondit',                         s:purple, '',       '',          '')[J

rufe <SNR>16_hi auf[J('cPreCondit', ['#c594c5', '176'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi cPreCondit guifg=#c594c5[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi cPreCondit ctermfg=176[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 203: [J

Zeile 204:   call s:hi('cssColor',                           s:cyan,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('cssColor', ['#62b3b2', '73'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi cssColor guifg=#62b3b2[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi cssColor ctermfg=73[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 205:   call s:hi('cssBraces',                          s:base05, '',       '',          '')[J

rufe <SNR>16_hi auf[J('cssBraces', ['#c0c5ce', '251'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi cssBraces guifg=#c0c5ce[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi cssBraces ctermfg=251[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 206:   call s:hi('cssClassName',                       s:purple, '',       '',          '')[J

rufe <SNR>16_hi auf[J('cssClassName', ['#c594c5', '176'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi cssClassName guifg=#c594c5[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi cssClassName ctermfg=176[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 207: [J

Zeile 208: [J

Zeile 209:   call s:hi('DiffAdd',                            s:green,  s:base01, s:bold,      '')[J

rufe <SNR>16_hi auf[J('DiffAdd', ['#99c794', '114'], ['#343d46', '237'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi DiffAdd guifg=#99c794[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi DiffAdd ctermfg=114[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi DiffAdd guibg=#343d46[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi DiffAdd ctermbg=237[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 210:   call s:hi('DiffChange',                         s:base03, s:base01, '',          '')[J

rufe <SNR>16_hi auf[J('DiffChange', ['#65737e', '243'], ['#343d46', '237'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi DiffChange guifg=#65737e[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi DiffChange ctermfg=243[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi DiffChange guibg=#343d46[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi DiffChange ctermbg=237[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 211:   call s:hi('DiffDelete',                         s:red,    s:base01, '',          '')[J

rufe <SNR>16_hi auf[J('DiffDelete', ['#ec5f67', '203'], ['#343d46', '237'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi DiffDelete guifg=#ec5f67[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi DiffDelete ctermfg=203[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi DiffDelete guibg=#343d46[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi DiffDelete ctermbg=237[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 212:   call s:hi('DiffText',                           s:blue,   s:base01, '',          '')[J

rufe <SNR>16_hi auf[J('DiffText', ['#6699cc', '68'], ['#343d46', '237'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi DiffText guifg=#6699cc[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi DiffText ctermfg=68[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi DiffText guibg=#343d46[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi DiffText ctermbg=237[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 213:   call s:hi('DiffAdded',                          s:base07, s:green,  s:bold,      '')[J

rufe <SNR>16_hi auf[J('DiffAdded', ['#d8dee9', '253'], ['#99c794', '114'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi DiffAdded guifg=#d8dee9[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi DiffAdded ctermfg=253[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi DiffAdded guibg=#99c794[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi DiffAdded ctermbg=114[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 214:   call s:hi('DiffFile',                           s:red,    s:base00, '',          '')[J

rufe <SNR>16_hi auf[J('DiffFile', ['#ec5f67', '203'], ['#1b2b34', '235'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi DiffFile guifg=#ec5f67[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi DiffFile ctermfg=203[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi DiffFile guibg=#1b2b34[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi DiffFile ctermbg=235[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 215:   call s:hi('DiffNewFile',                        s:green,  s:base00, '',          '')[J

rufe <SNR>16_hi auf[J('DiffNewFile', ['#99c794', '114'], ['#1b2b34', '235'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi DiffNewFile guifg=#99c794[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi DiffNewFile ctermfg=114[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi DiffNewFile guibg=#1b2b34[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi DiffNewFile ctermbg=235[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 216:   call s:hi('DiffLine',                           s:blue,   s:base00, '',          '')[J

rufe <SNR>16_hi auf[J('DiffLine', ['#6699cc', '68'], ['#1b2b34', '235'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi DiffLine guifg=#6699cc[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi DiffLine ctermfg=68[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi DiffLine guibg=#1b2b34[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi DiffLine ctermbg=235[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 217:   call s:hi('DiffRemoved',                        s:base07, s:red,    s:bold,      '')[J

rufe <SNR>16_hi auf[J('DiffRemoved', ['#d8dee9', '253'], ['#ec5f67', '203'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi DiffRemoved guifg=#d8dee9[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi DiffRemoved ctermfg=253[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi DiffRemoved guibg=#ec5f67[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi DiffRemoved ctermbg=203[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 218: [J

Zeile 219:   call s:hi('gitCommitOverflow',                  s:red,    '',       '',          '')[J

rufe <SNR>16_hi auf[J('gitCommitOverflow', ['#ec5f67', '203'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi gitCommitOverflow guifg=#ec5f67[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi gitCommitOverflow ctermfg=203[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 220:   call s:hi('gitCommitSummary',                   s:green,  '',       '',          '')[J

rufe <SNR>16_hi auf[J('gitCommitSummary', ['#99c794', '114'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi gitCommitSummary guifg=#99c794[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi gitCommitSummary ctermfg=114[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 221: [J

Zeile 222:   call s:hi('htmlBold',                           s:yellow, '',       '',          '')[J

rufe <SNR>16_hi auf[J('htmlBold', ['#fac863', '221'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi htmlBold guifg=#fac863[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi htmlBold ctermfg=221[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 223:   call s:hi('htmlItalic',                         s:purple, '',       '',          '')[J

rufe <SNR>16_hi auf[J('htmlItalic', ['#c594c5', '176'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi htmlItalic guifg=#c594c5[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi htmlItalic ctermfg=176[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 224:   call s:hi('htmlTag',                            s:cyan,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('htmlTag', ['#62b3b2', '73'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi htmlTag guifg=#62b3b2[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi htmlTag ctermfg=73[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 225:   call s:hi('htmlEndTag',                         s:cyan,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('htmlEndTag', ['#62b3b2', '73'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi htmlEndTag guifg=#62b3b2[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi htmlEndTag ctermfg=73[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 226:   call s:hi('htmlArg',                            s:yellow, '',       '',          '')[J

rufe <SNR>16_hi auf[J('htmlArg', ['#fac863', '221'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi htmlArg guifg=#fac863[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi htmlArg ctermfg=221[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 227:   call s:hi('htmlTagName',                        s:base07, '',       '',          '')[J

rufe <SNR>16_hi auf[J('htmlTagName', ['#d8dee9', '253'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi htmlTagName guifg=#d8dee9[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi htmlTagName ctermfg=253[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 228: [J

Zeile 229:   call s:hi('javaScript',                         s:base05, '',       '',          '')[J

rufe <SNR>16_hi auf[J('javaScript', ['#c0c5ce', '251'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi javaScript guifg=#c0c5ce[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi javaScript ctermfg=251[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 230:   call s:hi('javaScriptNumber',                   s:orange, '',       '',          '')[J

rufe <SNR>16_hi auf[J('javaScriptNumber', ['#f99157', '209'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi javaScriptNumber guifg=#f99157[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi javaScriptNumber ctermfg=209[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 231:   call s:hi('javaScriptBraces',                   s:base05, '',       '',          '')[J

rufe <SNR>16_hi auf[J('javaScriptBraces', ['#c0c5ce', '251'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi javaScriptBraces guifg=#c0c5ce[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi javaScriptBraces ctermfg=251[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 232: [J

Zeile 233:   call s:hi('jsonKeyword',                        s:green,  '',       '',          '')[J

rufe <SNR>16_hi auf[J('jsonKeyword', ['#99c794', '114'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi jsonKeyword guifg=#99c794[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi jsonKeyword ctermfg=114[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 234:   call s:hi('jsonQuote',                          s:green,  '',       '',          '')[J

rufe <SNR>16_hi auf[J('jsonQuote', ['#99c794', '114'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi jsonQuote guifg=#99c794[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi jsonQuote ctermfg=114[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 235: [J

Zeile 236:   call s:hi('markdownCode',                       s:green,  '',       '',          '')[J

rufe <SNR>16_hi auf[J('markdownCode', ['#99c794', '114'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi markdownCode guifg=#99c794[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi markdownCode ctermfg=114[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 237:   call s:hi('markdownCodeBlock',                  s:green,  '',       '',          '')[J

rufe <SNR>16_hi auf[J('markdownCodeBlock', ['#99c794', '114'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi markdownCodeBlock guifg=#99c794[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi markdownCodeBlock ctermfg=114[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 238:   call s:hi('markdownHeadingDelimiter',           s:blue,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('markdownHeadingDelimiter', ['#6699cc', '68'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi markdownHeadingDelimiter guifg=#6699cc[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi markdownHeadingDelimiter ctermfg=68[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 239:   call s:hi('markdownItalic',                     s:purple, '',       s:italic,    '')[J

rufe <SNR>16_hi auf[J('markdownItalic', ['#c594c5', '176'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi markdownItalic guifg=#c594c5[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi markdownItalic ctermfg=176[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 240:   call s:hi('markdownBold',                       s:yellow, '',       s:bold,      '')[J

rufe <SNR>16_hi auf[J('markdownBold', ['#fac863', '221'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi markdownBold guifg=#fac863[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi markdownBold ctermfg=221[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 241:   call s:hi('markdownCodeDelimiter',              s:brown,  '',       s:italic,    '')[J

rufe <SNR>16_hi auf[J('markdownCodeDelimiter', ['#ab7967', '137'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi markdownCodeDelimiter guifg=#ab7967[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi markdownCodeDelimiter ctermfg=137[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 242:   call s:hi('markdownError',                      s:base05, s:base00, '',          '')[J

rufe <SNR>16_hi auf[J('markdownError', ['#c0c5ce', '251'], ['#1b2b34', '235'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi markdownError guifg=#c0c5ce[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi markdownError ctermfg=251[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi markdownError guibg=#1b2b34[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi markdownError ctermbg=235[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 243: [J

Zeile 244:   call s:hi('typescriptParens',                   s:base05, s:none,   '',          '')[J

rufe <SNR>16_hi auf[J('typescriptParens', ['#c0c5ce', '251'], ['NONE', 'NONE'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi typescriptParens guifg=#c0c5ce[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi typescriptParens ctermfg=251[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi typescriptParens guibg=NONE[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi typescriptParens ctermbg=NONE[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 245: [J

Zeile 246:   call s:hi('NeomakeErrorSign',                   s:red,    s:base00, '',          '')[J

rufe <SNR>16_hi auf[J('NeomakeErrorSign', ['#ec5f67', '203'], ['#1b2b34', '235'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi NeomakeErrorSign guifg=#ec5f67[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi NeomakeErrorSign ctermfg=203[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi NeomakeErrorSign guibg=#1b2b34[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi NeomakeErrorSign ctermbg=235[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 247:   call s:hi('NeomakeWarningSign',                 s:yellow, s:base00, '',          '')[J

rufe <SNR>16_hi auf[J('NeomakeWarningSign', ['#fac863', '221'], ['#1b2b34', '235'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi NeomakeWarningSign guifg=#fac863[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi NeomakeWarningSign ctermfg=221[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi NeomakeWarningSign guibg=#1b2b34[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi NeomakeWarningSign ctermbg=235[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 248:   call s:hi('NeomakeInfoSign',                    s:white,  s:base00, '',          '')[J

rufe <SNR>16_hi auf[J('NeomakeInfoSign', ['#ffffff', '15'], ['#1b2b34', '235'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi NeomakeInfoSign guifg=#ffffff[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi NeomakeInfoSign ctermfg=15[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi NeomakeInfoSign guibg=#1b2b34[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi NeomakeInfoSign ctermbg=235[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 249:   call s:hi('NeomakeError',                       s:red,    '',       'underline', s:red)[J

rufe <SNR>16_hi auf[J('NeomakeError', ['#ec5f67', '203'], '', 'underline', ['#ec5f67', '203'])

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi NeomakeError guifg=#ec5f67[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi NeomakeError ctermfg=203[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 11: hi NeomakeError gui=underline[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 12: hi NeomakeError cterm=underline[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 15: hi NeomakeError guisp=#ec5f67[J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 250:   call s:hi('NeomakeWarning',                     s:red,    '',       'underline', s:red)[J

rufe <SNR>16_hi auf[J('NeomakeWarning', ['#ec5f67', '203'], '', 'underline', ['#ec5f67', '203'])

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi NeomakeWarning guifg=#ec5f67[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi NeomakeWarning ctermfg=203[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 11: hi NeomakeWarning gui=underline[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 12: hi NeomakeWarning cterm=underline[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 15: hi NeomakeWarning guisp=#ec5f67[J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 251: [J

Zeile 252:   call s:hi('ALEErrorSign',                       s:red,    s:base00, s:bold,      '')[J

rufe <SNR>16_hi auf[J('ALEErrorSign', ['#ec5f67', '203'], ['#1b2b34', '235'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi ALEErrorSign guifg=#ec5f67[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi ALEErrorSign ctermfg=203[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi ALEErrorSign guibg=#1b2b34[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi ALEErrorSign ctermbg=235[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 253:   call s:hi('ALEWarningSign',                     s:yellow, s:base00, s:bold,      '')[J

rufe <SNR>16_hi auf[J('ALEWarningSign', ['#fac863', '221'], ['#1b2b34', '235'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi ALEWarningSign guifg=#fac863[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi ALEWarningSign ctermfg=221[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi ALEWarningSign guibg=#1b2b34[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi ALEWarningSign ctermbg=235[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 254:   call s:hi('ALEInfoSign',                        s:white,  s:base00, s:bold,      '')[J

rufe <SNR>16_hi auf[J('ALEInfoSign', ['#ffffff', '15'], ['#1b2b34', '235'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi ALEInfoSign guifg=#ffffff[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi ALEInfoSign ctermfg=15[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi ALEInfoSign guibg=#1b2b34[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi ALEInfoSign ctermbg=235[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 255: [J

Zeile 256:   call s:hi('NERDTreeExecFile',                   s:base05, '',       '',          '')[J

rufe <SNR>16_hi auf[J('NERDTreeExecFile', ['#c0c5ce', '251'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi NERDTreeExecFile guifg=#c0c5ce[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi NERDTreeExecFile ctermfg=251[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 257:   call s:hi('NERDTreeDirSlash',                   s:blue,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('NERDTreeDirSlash', ['#6699cc', '68'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi NERDTreeDirSlash guifg=#6699cc[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi NERDTreeDirSlash ctermfg=68[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 258:   call s:hi('NERDTreeOpenable',                   s:blue,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('NERDTreeOpenable', ['#6699cc', '68'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi NERDTreeOpenable guifg=#6699cc[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi NERDTreeOpenable ctermfg=68[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 259:   call s:hi('NERDTreeFile',                       '',       s:none,   '',          '')[J

rufe <SNR>16_hi auf[J('NERDTreeFile', '', ['NONE', 'NONE'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi NERDTreeFile guibg=NONE[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi NERDTreeFile ctermbg=NONE[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 260:   call s:hi('NERDTreeFlags',                      s:blue,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('NERDTreeFlags', ['#6699cc', '68'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi NERDTreeFlags guifg=#6699cc[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi NERDTreeFlags ctermfg=68[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 261: [J

Zeile 262:   call s:hi('phpComparison',                      s:base05, '',       '',          '')[J

rufe <SNR>16_hi auf[J('phpComparison', ['#c0c5ce', '251'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi phpComparison guifg=#c0c5ce[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi phpComparison ctermfg=251[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 263:   call s:hi('phpParent',                          s:base05, '',       '',          '')[J

rufe <SNR>16_hi auf[J('phpParent', ['#c0c5ce', '251'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi phpParent guifg=#c0c5ce[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi phpParent ctermfg=251[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 264:   call s:hi('phpMemberSelector',                  s:base05, '',       '',          '')[J

rufe <SNR>16_hi auf[J('phpMemberSelector', ['#c0c5ce', '251'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi phpMemberSelector guifg=#c0c5ce[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi phpMemberSelector ctermfg=251[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 265: [J

Zeile 266:   call s:hi('pythonRepeat',                       s:purple, '',       '',          '')[J

rufe <SNR>16_hi auf[J('pythonRepeat', ['#c594c5', '176'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi pythonRepeat guifg=#c594c5[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi pythonRepeat ctermfg=176[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 267:   call s:hi('pythonOperator',                     s:purple, '',       '',          '')[J

rufe <SNR>16_hi auf[J('pythonOperator', ['#c594c5', '176'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi pythonOperator guifg=#c594c5[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi pythonOperator ctermfg=176[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 268: [J

Zeile 269:   call s:hi('rubyConstant',                       s:yellow, '',       '',          '')[J

rufe <SNR>16_hi auf[J('rubyConstant', ['#fac863', '221'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi rubyConstant guifg=#fac863[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi rubyConstant ctermfg=221[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 270:   call s:hi('rubySymbol',                         s:green,  '',       '',          '')[J

rufe <SNR>16_hi auf[J('rubySymbol', ['#99c794', '114'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi rubySymbol guifg=#99c794[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi rubySymbol ctermfg=114[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 271:   call s:hi('rubyAttribute',                      s:blue,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('rubyAttribute', ['#6699cc', '68'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi rubyAttribute guifg=#6699cc[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi rubyAttribute ctermfg=68[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 272:   call s:hi('rubyInterpolation',                  s:green,  '',       '',          '')[J

rufe <SNR>16_hi auf[J('rubyInterpolation', ['#99c794', '114'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi rubyInterpolation guifg=#99c794[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi rubyInterpolation ctermfg=114[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 273:   call s:hi('rubyInterpolationDelimiter',         s:brown,  '',       '',          '')[J

rufe <SNR>16_hi auf[J('rubyInterpolationDelimiter', ['#ab7967', '137'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi rubyInterpolationDelimiter guifg=#ab7967[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi rubyInterpolationDelimiter ctermfg=137[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 274:   call s:hi('rubyStringDelimiter',                s:green,  '',       '',          '')[J

rufe <SNR>16_hi auf[J('rubyStringDelimiter', ['#99c794', '114'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi rubyStringDelimiter guifg=#99c794[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi rubyStringDelimiter ctermfg=114[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 275:   call s:hi('rubyRegexp',                         s:cyan,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('rubyRegexp', ['#62b3b2', '73'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi rubyRegexp guifg=#62b3b2[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi rubyRegexp ctermfg=73[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 276: [J

Zeile 277:   call s:hi('sassidChar',                         s:red,    '',       '',          '')[J

rufe <SNR>16_hi auf[J('sassidChar', ['#ec5f67', '203'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi sassidChar guifg=#ec5f67[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi sassidChar ctermfg=203[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 278:   call s:hi('sassClassChar',                      s:orange, '',       '',          '')[J

rufe <SNR>16_hi auf[J('sassClassChar', ['#f99157', '209'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi sassClassChar guifg=#f99157[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi sassClassChar ctermfg=209[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 279:   call s:hi('sassInclude',                        s:purple, '',       '',          '')[J

rufe <SNR>16_hi auf[J('sassInclude', ['#c594c5', '176'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi sassInclude guifg=#c594c5[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi sassInclude ctermfg=176[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 280:   call s:hi('sassMixing',                         s:purple, '',       '',          '')[J

rufe <SNR>16_hi auf[J('sassMixing', ['#c594c5', '176'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi sassMixing guifg=#c594c5[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi sassMixing ctermfg=176[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 281:   call s:hi('sassMixinName',                      s:blue,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('sassMixinName', ['#6699cc', '68'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi sassMixinName guifg=#6699cc[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi sassMixinName ctermfg=68[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 282: [J

Zeile 283:   call s:hi('vimfilerLeaf',                       s:base05, '',       '',          '')[J

rufe <SNR>16_hi auf[J('vimfilerLeaf', ['#c0c5ce', '251'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi vimfilerLeaf guifg=#c0c5ce[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi vimfilerLeaf ctermfg=251[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 284:   call s:hi('vimfilerNormalFile',                 s:base05, s:base00, '',          '')[J

rufe <SNR>16_hi auf[J('vimfilerNormalFile', ['#c0c5ce', '251'], ['#1b2b34', '235'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi vimfilerNormalFile guifg=#c0c5ce[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi vimfilerNormalFile ctermfg=251[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi vimfilerNormalFile guibg=#1b2b34[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi vimfilerNormalFile ctermbg=235[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 285:   call s:hi('vimfilerOpenedFile',                 s:blue,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('vimfilerOpenedFile', ['#6699cc', '68'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi vimfilerOpenedFile guifg=#6699cc[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi vimfilerOpenedFile ctermfg=68[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 286:   call s:hi('vimfilerClosedFile',                 s:blue,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('vimfilerClosedFile', ['#6699cc', '68'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi vimfilerClosedFile guifg=#6699cc[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi vimfilerClosedFile ctermfg=68[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 287: [J

Zeile 288:   call s:hi('GitGutterAdd',                       s:green,  s:base00, s:bold,      '')[J

rufe <SNR>16_hi auf[J('GitGutterAdd', ['#99c794', '114'], ['#1b2b34', '235'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi GitGutterAdd guifg=#99c794[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi GitGutterAdd ctermfg=114[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi GitGutterAdd guibg=#1b2b34[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi GitGutterAdd ctermbg=235[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 289:   call s:hi('GitGutterChange',                    s:blue,   s:base00, s:bold,      '')[J

rufe <SNR>16_hi auf[J('GitGutterChange', ['#6699cc', '68'], ['#1b2b34', '235'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi GitGutterChange guifg=#6699cc[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi GitGutterChange ctermfg=68[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi GitGutterChange guibg=#1b2b34[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi GitGutterChange ctermbg=235[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 290:   call s:hi('GitGutterDelete',                    s:red,    s:base00, s:bold,      '')[J

rufe <SNR>16_hi auf[J('GitGutterDelete', ['#ec5f67', '203'], ['#1b2b34', '235'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi GitGutterDelete guifg=#ec5f67[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi GitGutterDelete ctermfg=203[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi GitGutterDelete guibg=#1b2b34[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi GitGutterDelete ctermbg=235[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 291:   call s:hi('GitGutterChangeDelete',              s:purple, s:base00, s:bold,      '')[J

rufe <SNR>16_hi auf[J('GitGutterChangeDelete', ['#c594c5', '176'], ['#1b2b34', '235'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi GitGutterChangeDelete guifg=#c594c5[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi GitGutterChangeDelete ctermfg=176[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi GitGutterChangeDelete guibg=#1b2b34[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi GitGutterChangeDelete ctermbg=235[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 292: [J

Zeile 293:   call s:hi('SignifySignAdd',                     s:green,  s:base00, s:bold,      '')[J

rufe <SNR>16_hi auf[J('SignifySignAdd', ['#99c794', '114'], ['#1b2b34', '235'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi SignifySignAdd guifg=#99c794[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi SignifySignAdd ctermfg=114[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi SignifySignAdd guibg=#1b2b34[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi SignifySignAdd ctermbg=235[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 294:   call s:hi('SignifySignChange',                  s:blue,   s:base00, s:bold,      '')[J

rufe <SNR>16_hi auf[J('SignifySignChange', ['#6699cc', '68'], ['#1b2b34', '235'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi SignifySignChange guifg=#6699cc[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi SignifySignChange ctermfg=68[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi SignifySignChange guibg=#1b2b34[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi SignifySignChange ctermbg=235[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 295:   call s:hi('SignifySignDelete',                  s:red,    s:base00, s:bold,      '')[J

rufe <SNR>16_hi auf[J('SignifySignDelete', ['#ec5f67', '203'], ['#1b2b34', '235'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi SignifySignDelete guifg=#ec5f67[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi SignifySignDelete ctermfg=203[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi SignifySignDelete guibg=#1b2b34[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi SignifySignDelete ctermbg=235[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 296:   call s:hi('SignifySignChangeDelete',            s:purple, s:base00, s:bold,      '')[J

rufe <SNR>16_hi auf[J('SignifySignChangeDelete', ['#c594c5', '176'], ['#1b2b34', '235'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi SignifySignChangeDelete guifg=#c594c5[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi SignifySignChangeDelete ctermfg=176[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi SignifySignChangeDelete guibg=#1b2b34[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi SignifySignChangeDelete ctermbg=235[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 297:   call s:hi('SignifySignDeleteFirstLine',         s:red,    s:base00, s:bold,      '')[J

rufe <SNR>16_hi auf[J('SignifySignDeleteFirstLine', ['#ec5f67', '203'], ['#1b2b34', '235'], '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi SignifySignDeleteFirstLine guifg=#ec5f67[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi SignifySignDeleteFirstLine ctermfg=203[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 7: hi SignifySignDeleteFirstLine guibg=#1b2b34[J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 8: hi SignifySignDeleteFirstLine ctermbg=235[J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 298: [J

Zeile 299:   call s:hi('xmlTag',                             s:cyan,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('xmlTag', ['#62b3b2', '73'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi xmlTag guifg=#62b3b2[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi xmlTag ctermfg=73[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 300:   call s:hi('xmlTagName',                         s:base05, '',       '',          '')[J

rufe <SNR>16_hi auf[J('xmlTagName', ['#c0c5ce', '251'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi xmlTagName guifg=#c0c5ce[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi xmlTagName ctermfg=251[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 301:   call s:hi('xmlEndTag',                          s:cyan,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('xmlEndTag', ['#62b3b2', '73'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi xmlEndTag guifg=#62b3b2[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi xmlEndTag ctermfg=73[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 302:   call s:hi('Defx_filename_directory',            s:blue,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('Defx_filename_directory', ['#6699cc', '68'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi Defx_filename_directory guifg=#6699cc[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi Defx_filename_directory ctermfg=68[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 303: [J

Zeile 304:   call s:hi('CocErrorSign',                       s:red,    '',       '',          '')[J

rufe <SNR>16_hi auf[J('CocErrorSign', ['#ec5f67', '203'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi CocErrorSign guifg=#ec5f67[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi CocErrorSign ctermfg=203[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 305:   call s:hi('CocWarningSign',                     s:yellow, '',       '',          '')[J

rufe <SNR>16_hi auf[J('CocWarningSign', ['#fac863', '221'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi CocWarningSign guifg=#fac863[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi CocWarningSign ctermfg=221[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 306:   call s:hi('CocInfoSign',                        s:blue,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('CocInfoSign', ['#6699cc', '68'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi CocInfoSign guifg=#6699cc[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi CocInfoSign ctermfg=68[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 307:   call s:hi('CocHintSign',                        s:cyan,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('CocHintSign', ['#62b3b2', '73'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi CocHintSign guifg=#62b3b2[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi CocHintSign ctermfg=73[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 308:   call s:hi('CocErrorFloat',                      s:red,    '',       '',          '')[J

rufe <SNR>16_hi auf[J('CocErrorFloat', ['#ec5f67', '203'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi CocErrorFloat guifg=#ec5f67[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi CocErrorFloat ctermfg=203[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 309:   call s:hi('CocWarningFloat',                    s:yellow, '',       '',          '')[J

rufe <SNR>16_hi auf[J('CocWarningFloat', ['#fac863', '221'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi CocWarningFloat guifg=#fac863[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi CocWarningFloat ctermfg=221[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 310:   call s:hi('CocInfoFloat',                       s:blue,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('CocInfoFloat', ['#6699cc', '68'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi CocInfoFloat guifg=#6699cc[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi CocInfoFloat ctermfg=68[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 311:   call s:hi('CocHintFloat',                       s:cyan,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('CocHintFloat', ['#62b3b2', '73'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi CocHintFloat guifg=#62b3b2[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi CocHintFloat ctermfg=73[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 312:   call s:hi('CocDiagnosticsError',                s:red,    '',       '',          '')[J

rufe <SNR>16_hi auf[J('CocDiagnosticsError', ['#ec5f67', '203'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi CocDiagnosticsError guifg=#ec5f67[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi CocDiagnosticsError ctermfg=203[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 313:   call s:hi('CocDiagnosticsWarning',              s:yellow, '',       '',          '')[J

rufe <SNR>16_hi auf[J('CocDiagnosticsWarning', ['#fac863', '221'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi CocDiagnosticsWarning guifg=#fac863[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi CocDiagnosticsWarning ctermfg=221[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 314:   call s:hi('CocDiagnosticsInfo',                 s:blue,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('CocDiagnosticsInfo', ['#6699cc', '68'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi CocDiagnosticsInfo guifg=#6699cc[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi CocDiagnosticsInfo ctermfg=68[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 315:   call s:hi('CocDiagnosticsHint',                 s:cyan,   '',       '',          '')[J

rufe <SNR>16_hi auf[J('CocDiagnosticsHint', ['#62b3b2', '73'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi CocDiagnosticsHint guifg=#62b3b2[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi CocDiagnosticsHint ctermfg=73[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 316:   call s:hi('CocSelectedText',                    s:purple, '',       '',          '')[J

rufe <SNR>16_hi auf[J('CocSelectedText', ['#c594c5', '176'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi CocSelectedText guifg=#c594c5[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi CocSelectedText ctermfg=176[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 317:   call s:hi('CocCodeLens',                        s:base04, '',       '',          '')[J

rufe <SNR>16_hi auf[J('CocCodeLens', ['#a7adba', '145'], '', '', '')

Zeile 1:   " fg, bg, attr, attrsp[J

Zeile 2:   if !empty(a:fg)[J

Zeile 3:     exec "hi " . a:group . " guifg=" .  a:fg[0][J

Zeile 3: hi CocCodeLens guifg=#a7adba[J

Zeile 4:     exec "hi " . a:group . " ctermfg=" . a:fg[1][J

Zeile 4: hi CocCodeLens ctermfg=145[J

Zeile 5:   endif[J

Zeile 6:   if !empty(a:bg)[J

Zeile 7:     exec "hi " . a:group . " guibg=" .  a:bg[0][J

Zeile 8:     exec "hi " . a:group . " ctermbg=" . a:bg[1][J

Zeile 9:   endif[J

Zeile 10:   if a:attr != ""[J

Zeile 11:     exec "hi " . a:group . " gui=" .   a:attr[J

Zeile 12:     exec "hi " . a:group . " cterm=" . a:attr[J

Zeile 13:   endif[J

Zeile 14:   if !empty(a:attrsp)[J

Zeile 15:     exec "hi " . a:group . " guisp=" . a:attrsp[0][J

Zeile 16:   endif[J

<SNR>16_hi lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim[J

Zeile 318: " }}}[J

Zeile 319: " {{{ Terminal[J

Zeile 320: if has('nvim')[J

Zeile 321:   let g:terminal_color_0=s:base00[0][J

Zeile 322:   let g:terminal_color_8=s:base03[0][J

Zeile 323: [J

Zeile 324:   let g:terminal_color_1=s:red[0][J

Zeile 325:   let g:terminal_color_9=s:red[0][J

Zeile 326: [J

Zeile 327:   let g:terminal_color_2=s:green[0][J

Zeile 328:   let g:terminal_color_10=s:green[0][J

Zeile 329: [J

Zeile 330:   let g:terminal_color_3=s:yellow[0][J

Zeile 331:   let g:terminal_color_11=s:yellow[0][J

Zeile 332: [J

Zeile 333:   let g:terminal_color_4=s:blue[0][J

Zeile 334:   let g:terminal_color_12=s:blue[0][J

Zeile 335: [J

Zeile 336:   let g:terminal_color_5=s:purple[0][J

Zeile 337:   let g:terminal_color_13=s:purple[0][J

Zeile 338: [J

Zeile 339:   let g:terminal_color_6=s:cyan[0][J

Zeile 340:   let g:terminal_color_14=s:cyan[0][J

Zeile 341: [J

Zeile 342:   let g:terminal_color_7=s:base05[0][J

Zeile 343:   let g:terminal_color_15=s:base05[0][J

Zeile 344: [J

Zeile 345:   let g:terminal_color_background=s:base00[0][J

Zeile 346:   let g:terminal_color_foreground=s:white[0][J

Zeile 347: else[J

Zeile 348:   let g:terminal_ansi_colors = [ s:base00[0], s:red[0], s:green[0], s:yellow[0], s:blue[0], s:purple[0], s:cyan[0], s:white[0], s:base03[0], s:red[0], s:green[0], s:yellow[0], s:blue[0], s:purple[0], s:cyan[0], s:white[0],][J

Zeile 366: [J

Zeile 367: endif[J

Zeile 368: [J

Lesen von /c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/colors/OceanicNext.vim beendet[J
weiter in /c/Users/108012516/dotfiles/vimConf/vimrc_fzf[J
Zeile 136: set nobackup " Disable backup files[J

Zeile 137: set laststatus=2 "show status line[J

Zeile 138: set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)\[J

Zeile 139: set wildmenu " Display command line's tab complete options as a menu.[J

Zeile 140: [J

Zeile 141: [J

Zeile 142: "- Allow backspacing over indention, line breaks and insertion start.[J

Zeile 143: set backspace=indent,eol,start[J

Zeile 144: "- Set bigger history of executed commands.[J

Zeile 145: set history=1000[J

Zeile 146: "- Show incomplete commands at the bottom.[J

Zeile 147: set showcmd[J

Zeile 148: "- Show current mode at the bottom.[J

Zeile 149: set showmode[J

Zeile 150: "- Automatically re-read files if unmodified inside Vim.[J

Zeile 151: set autoread[J

Zeile 152: [J

Zeile 153: "- Manage multiple buffers effectively: the current buffer can be 'sent' to the background without writing to disk. When a background buffer becomes current again, marks and undo-history are remembered. See chapter Buffers to understand this better.[J

Zeile 154: set showcmd[J

Zeile 155: [J

Zeile 156: [J

Zeile 157: " Indentation settings for using 4 spaces instead of tabs.[J

Zeile 158: " Do not change 'tabstop' from its default value of 8 with this setup.[J

Zeile 159: set shiftwidth=4[J

Zeile 160: set softtabstop=4[J

Zeile 161: set expandtab[J

Zeile 162: [J

Zeile 163: [J

Zeile 164: set switchbuf=useopen " reveal already opened files from the quickfix window[J

Zeile 165: " instead of opening new buffers[J

Zeile 166: [J

Zeile 167: [J

Zeile 168: " Very magic by default[J

Zeile 169: nnoremap ? ?\v[J

Zeile 170: nnoremap / /\v[J

Zeile 171: cnoremap %s/ %sm/[J

Zeile 172: " Proper search[J

Zeile 173: set incsearch[J

Zeile 174: set ignorecase[J

Zeile 175: set smartcase[J

Zeile 176: [J

Zeile 177: [J

Zeile 178: let $LANG='en'[J

Zeile 179: set langmenu=en[J

Zeile 180: set mouse=a[J

Zeile 181: [J

Zeile 182: "{{{ Gui Running config[J

Zeile 183: if has("gui_running")[J

Zeile 184: [J

Zeile 185:     echo "sourcing from Gui"[J

Zeile 186:     set encoding=utf-8[J

Zeile 187:     " Always show cursor[J

Zeile 188:     set ruler[J

Zeile 189:     " Highlight the current line[J

Zeile 190:     set cursorline[J

Zeile 191: [J

Zeile 192:     " Hide the toolbar[J

Zeile 193:     set guioptions-=T[J

Zeile 194:     "set guioptions-=m  "remove menu bar[J

Zeile 195:     set guioptions-=T  "remove toolbar[J

Zeile 196:     set guioptions-=r  "remove right-hand,scroll bar[J

Zeile 197:     set guioptions-=L  "remove left-hand scroll bar[J

Zeile 198: [J

Zeile 199:     if hostname() == "BHI4PCH7D3"[J

Zeile 200:         set lines=70 columns=230[J

Zeile 201:     else[J

Zeile 202:         "autocmd GUIEnter * simalt ~x[J

Zeile 203:     endif[J

Zeile 204:     if g:is_win[J

Zeile 205:         "set guifont=FiraCode_Nerd_Font_Mono:h10:style=Medium [J

Zeile 206:         " set guifont=FiraCode_Nerd_Font_Mono:h10[J

Zeile 207:         " set guifont=FiraCode\ Nerd\ Font\ Mono:h10[J

Zeile 208:         " set guifont=FiraCode\ Nerd\ Font\ Mono:h12:style=Retina[J

Zeile 209:         set guifont=FiraCode\ Nerd\ Font\ Mono:h13[J

Zeile 210:         if has('gui_win32')[J

Zeile 211:             "set guifont=FiraCode_Nerd_Font_Mono:h13:cANSI[J

Zeile 212:             set guifont=FiraCode_Nerd_Font_Mono:h11:W500:cANSI:qDRAFT[J

Zeile 213:             "set guifont=Hack_Nerd_Font_Mono:h10:cANSI:qDRAFT  [J

Zeile 214:         else[J

Zeile 215:             set guifont=DejaVu\ Sans\ Mono\ 13[J

Zeile 216:         endif[J

Zeile 217: [J

Zeile 218:         "au GUIEnter * simalt ~x[J

Zeile 219: [J

Zeile 220:     elseif g:is_linux[J

Zeile 221:         "set guifont=Ubuntu\ Mono\ Regular\ 13[J

Zeile 222:         set guifont=Fira\ Code\ 13[J

Zeile 223:     endif[J

Zeile 224: [J

Zeile 225:     nnoremap <A-n>  :confirm enew<CR>[J

Zeile 226:     inoremap <A-n>  :confirm enew<CR>[J

Zeile 227: [J

Zeile 228:     " Open the GUI file browser.[J

Zeile 229:     " CTRL-O is Quickopen file[J

Zeile 230:     noremap <A-o> :browse confirm e<CR>[J

Zeile 231:     vnoremap <A-o> :browse confirm e<CR>[J

Zeile 232:     inoremap <A-o> :browse confirm e<CR>[J

Zeile 233: [J

Zeile 234:     " CTRL-W is Quicksave as.. file[J

Zeile 235:     noremap <A-w> :browse confirm saveas<CR>[J

Zeile 236:     vnoremap <A-w> :browse confirm saveas<CR>[J

Zeile 237:     inoremap <A-w> :browse confirm saveas<CR>[J

Zeile 238:     "Useful to find out how the font is set in guifont :set guifont?[J

Zeile 239:     map <F3> <Esc>:set guifont=*<CR> [J

Zeile 240: else[J

Zeile 241:     echo "sourcing from Terminal "[J

sourcing from Terminal [J
Zeile 242:     set t_Co=256[J

Zeile 243: [J

Zeile 244:     set nocursorline  [J

Zeile 245: [J

Zeile 246:     if g:is_win[J

Zeile 247: [J

Zeile 248: [J

Zeile 249:     elseif g:is_linux[J

Zeile 250:         set term=xterm-256color[J
[29m[m[38;5;253m[48;5;235m[39;49m
Zeile 251: [J

Zeile 252:     endif[J

Zeile 253: endif[J

Zeile 254: "}}}[J

Zeile 255: [J

Zeile 256: " Mappings {{{[J

Zeile 257: " Useful mappings[J

Zeile 258: ""nnoremap <Leader>r  :source ~/dotfiles/vimConf/vimrc_fzf <CR>:echo "Reloaded: " . ~/dotfiles/vimConf/vimrc_fzf<CR>[J

Zeile 259: nnoremap <leader>et :exec ":vsp $HOME/notes/" . strftime('%m-%d-%y') . ".md"<CR>[J

Zeile 260: [J

Zeile 261: " Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,[J

Zeile 262: " which is the default[J

Zeile 263: "map Y y$[J

Zeile 264: [J

Zeile 265: [J

Zeile 266: " Double tap s to save the buffer contents, more convienent than keep the pressure on the modifier keys to be CUA compatible.[J

Zeile 267: nnoremap <silent> ss :update<CR>[J

Zeile 268: [J

Zeile 269: [J

Zeile 270: "{{{  Documentation Link here[J

Zeile 271: "Good FZF Option here[J

Zeile 272: "https://github.com/samoshkin/dotfiles/tree/f330daaf3544184c197ae541b9893304c3adf327[J

Zeile 273: [J

Zeile 274: "}}}[J

Zeile 275: [J

Zeile 276: [J

Zeile 277: [J

Zeile 278: ""https://github.com/jwbat/dotfiles/blob/4fc36a3eda20ed4467b21dd863507fa2c31b80d5/.vimrc#L131[J

Zeile 279: "Good Register paste example in this link[J

Zeile 280: "[J

Zeile 281: " yank to system clipboard[J

Zeile 282: xnoremap <leader>c "+y[J

Zeile 283: nnoremap <leader>c "+y[J

Zeile 284: " paste from system clipboard and go end of the paste[J

Zeile 285: nnoremap <leader>v "+p`][J

Zeile 286: " cut line(s) into system clipboard[J

Zeile 287: xnoremap <leader>x"+d[J

Kein Mapping gefunden[J
Zeile 288: [J

Zeile 289: " yank whole file into system clipboard[J

Zeile 290: nnoremap <leader><leader>' gg0"+yG[J

Zeile 291: "}}}[J

Zeile 292: [J

Zeile 293: [J

Zeile 294: [J

Zeile 295: "{{{ Mappings Movement [J

Zeile 296: [J

Zeile 297: " remap movement keys so that up-down work over visual lines rather than [J

Zeile 298: " actual lines[J

Zeile 299: noremap j gj[J

Zeile 300: noremap k gk[J

Zeile 301: [J

Zeile 302: "remap jk/kj to escape[J

Zeile 303: inoremap jk <Esc>[J

Zeile 304: inoremap kj <Esc>[J

Zeile 305: [J

Zeile 306: [J

Zeile 307: "Faster navigation[J

Zeile 308: nnoremap J <C-d>[J

Zeile 309: nnoremap K <C-u[J

Zeile 310: [J

Zeile 311: "Start and End of the line Maing[J

Zeile 312: noremap H 0[J

Zeile 313: noremap L $[J

Zeile 314: [J

Zeile 315: " Backspace in normal mode[J

Zeile 316: nnoremap <bs> d1<Left>[J

Zeile 317: " CTRL-D to delete line[J

Zeile 318: inoremap <C-D> <Esc>dd<Insert>[J

Zeile 319: nnoremap <C-D> dd[J

Zeile 320: " CTRL-Z to undo[J

Zeile 321: inoremap <C-Z> <Esc>u<Insert>[J

Zeile 322: nnoremap <C-Z> u[J

Zeile 323: " CTRL-Y to redo[J

Zeile 324: inoremap <C-Y> <Esc><C-R><Insert>[J

Zeile 325: nnoremap <C-Y> <C-R>[J

Zeile 326: " CTRL-S to save[J

Zeile 327: inoremap <C-S> <Esc>:w<Enter><Insert>[J

Zeile 328: nnoremap <C-S> :w<Enter>[J

Zeile 329: [J

Zeile 330: " [COMMAND+INSERT+VISUAL] CTRL-S Save file[J

Zeile 331: nnoremap <C-s> :w!<CR>[J

Zeile 332: inoremap <C-s> <esc>:w!<CR>gi[J

Zeile 333: vnoremap <C-s> <esc>:w!<CR>gv=gv[J

Zeile 334: [J

Zeile 335: " [COMMAND] TAB go to next tab[J

Zeile 336: "nnoremap <TAB> gt[J

Zeile 337: [J

Zeile 338: " [COMMAND] SHIFT-TAB go to previous tab[J

Zeile 339: nnoremap <S-TAB> gT[J

Zeile 340: [J

Zeile 341: " [INSERT+VISUAL] SHIFT-TAB remove indent/tab[J

Zeile 342: inoremap <S-TAB> <C-d>[J

Zeile 343: vnoremap <S-TAB> <gv[J

Zeile 344: [J

Zeile 345: " [COMMAND] CTRL-N new tab[J

Zeile 346: nnoremap <C-n> :tabnew<CR>[J

Zeile 347: [J

Zeile 348: [J

Zeile 349: ""Should find another mapper for this w. mgt[J

Zeile 350: nnoremap <c-Down>  <c-w>-[J

Zeile 351: nnoremap <c-Right> <c-w><[J

Zeile 352: nnoremap <c-Up>    <c-w>+[J

Zeile 353: nnoremap <c-Left>  <c-w>>[J

Zeile 354: [J

Zeile 355: "Split window resize[J

Zeile 356: nnoremap <leader>j :resize +5<CR>[J

Zeile 357: nnoremap <leader>k :resize -5<CR>[J

Zeile 358: nnoremap <leader>h :vertical resize +5<CR>[J

Zeile 359: nnoremap <leader>l :vertical resize -5<CR>[J

Zeile 360: [J

Zeile 361: nnoremap <C-Insert> "*y[J

Zeile 362: nnoremap <S-Insert> "*p[J

Zeile 363: vnoremap <C-Insert> "*y[J

Zeile 364: vnoremap <S-Insert> "*p[J

Zeile 365: [J

Zeile 366: [J

Zeile 367: " Move Line Up and Dow in all Tree main Mode [J

Zeile 368: nnoremap <C-j> :m .+1<CR>==[J

Zeile 369: nnoremap <C-k> :m .-2<CR>==[J

Zeile 370: inoremap <C-j> <Esc>:m .+1<CR>==gi[J

Zeile 371: inoremap <C-k> <Esc>:m .-2<CR>==gi[J

Zeile 372: vnoremap <C-j> :m '>+1<CR>gv=gv[J

Zeile 373: vnoremap <C-k> :m '<-2<CR>gv=gv[J

Zeile 374: [J

Zeile 375: [J

Zeile 376: " [EDIT+VISUAL+COMMAND] CTRL-K UP Split above[J

Zeile 377: nnoremap <C-S-Up> :above split<CR>[J

Zeile 378: inoremap <C-S-Up> <ESC>:above split<CR>gi[J

Zeile 379: vnoremap <C-S-Up> <ESC>:above split<CR>gv=gv[J

Zeile 380: [J

Zeile 381: " [EDIT+VISUAL+COMMAND] CTRL-K DOWN Split below[J

Zeile 382: nnoremap <C-S-Down> :below split<CR>[J

Zeile 383: inoremap <C-S-Down> <ESC>:below split<CR>gi[J

Zeile 384: vnoremap <C-S-Down> <ESC>:below split<CR>gv=gv[J

Zeile 385: [J

Zeile 386: " [EDIT+VISUAL+COMMAND] CTRL-K LEFT Split left[J

Zeile 387: nnoremap <C-S-Left> :vsplit<CR>[J

Zeile 388: inoremap <C-S-Left> <ESC>:vsplit<CR>gi[J

Zeile 389: vnoremap <C-S-Left> <ESC>:vsplit<CR>gv=gv[J

Zeile 390: [J

Zeile 391: " [EDIT+VISUAkL+COMMAND] CTRL-K RIGHT Split right[J

Zeile 392: nnoremap <C-S-Right> :botright vsplit<CR>[J

Zeile 393: inoremap <C-S-Right> <ESC>:botright vsplit<CR>gi[J

Zeile 394: vnoremap <C-S-Right> <ESC>:botright vsplit<CR>gv=gv[J

Zeile 395: [J

Zeile 396: [J

Zeile 397: [J

Zeile 398: " [EDIT+VISUAL+COMMAND] ALT-LEFT switch to left or next window[J

Zeile 399: nnoremap <M-Right> :wincmd l<CR>[J

Zeile 400: inoremap <M-Right> <ESC>:wincmd l<CR>gi[J

Zeile 401: vnoremap <M-Right> <ESC>:wincmd l<CR>gv=gv[J

Zeile 402: [J

Zeile 403: " [EDIT+VISUAL+COMMAND] ALT-RIGHT switch to right previous window[J

Zeile 404: nnoremap <M-Left> :wincmd h<CR>[J

Zeile 405: inoremap <M-Left> <ESC>:wincmd h<CR>gi[J

Zeile 406: vnoremap <M-Left> <ESC>:wincmd h<CR>gv=gv[J

Zeile 407: [J

Zeile 408: " [EDIT+VISUAL+COMMAND] ALT-UP switch to window above current[J

Zeile 409: nnoremap <M-Up> :wincmd k<CR>[J

Zeile 410: inoremap <M-Up> <ESC>:wincmd k<CR>gi[J

Zeile 411: vnoremap <M-Up> <ESC>:wincmd k<CR>gv=gv[J

Zeile 412: [J

Zeile 413: " [EDIT+VISUAL+COMMAND] ALT-DOWN switch to window below current[J

Zeile 414: nnoremap <M-Down> :wincmd j<CR>[J

Zeile 415: inoremap <M-Down> <ESC>:wincmd j<CR>gi[J

Zeile 416: vnoremap <M-Down> <ESC>:wincmd j<CR>gv=g[J

Zeile 417: "}}}[J

Zeile 418: [J

Zeile 419: [J

Zeile 420: "Switch buffers[J

Zeile 421: nnoremap Ã¼ :bnext<CR>[J

Zeile 422: nnoremap Ã¶ :bprevious<CR>[J

Zeile 423: [J

Zeile 424: "{{{ Comment text[J

Zeile 425: nmap <leader>cc :Commentary<CR>[J

Zeile 426: vmap <leader>cc :Commentary<CR>[J

Zeile 427: "}}}"[J

Zeile 428: [J

Zeile 429: " Reindent file and return to current line[J

Zeile 430: map <leader>i mmgg=G`m<cr>[J

Zeile 431: [J

Zeile 432: [J

Zeile 433: " Strip all trailing whitespace from a file, using ,W[J

Zeile 434: nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>[J

Zeile 435: [J

Zeile 436: "{{{[J

Zeile 437: if has ('autocmd') " Remain compatible with earlier versaons[J

Zeile 438:     " automatically rebalance windows on vim resize[J

Zeile 439:     autocmd VimResized * :wincmd =[J

Zeile 440:     [J

Zeile 441:     " " Enable marker folds for .vimrc files and shell files[J

Zeile 442:     " autocmd FileType vim,sh setlocal foldmethod=marker[J

Zeile 443:     " autocmd BufRead * normal zM[J

Zeile 444: [J

Zeile 445:     "Changing number base on the mode we are in[J

Zeile 446:     augroup toggle_relative_number[J

Zeile 447:         autocmd InsertEnter * :setlocal relativenumber " norelativenumber[J

Zeile 448:         autocmd InsertLeave * :setlocal norelativenumber " relativenumber[J

Zeile 449:     augroup END[J

Zeile 450: [J

Zeile 451:     augroup CursorLineOnlyInActiveWindow[J

Zeile 452:         autocmd![J

Zeile 453:         autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline[J

Zeile 454:         autocmd WinLeave * setlocal nocursorline[J

Zeile 455:     augroup END[J

Zeile 456: [J

Zeile 457: endif " has autocmd[J

Zeile 458: [J

Zeile 459: source $HOME/$VIMFILE_DIR/settings/settings_cpp.vim[J

chdir(/c/Users/108012516/.vim/settings)[J
fchdir() to previous dir[J
Zeile 459: lese "/c/Users/108012516/.vim/settings/settings_cpp.vim"[J
Zeile 1: "https://github.com/jwbat/dotfiles/blob/4fc36a3eda20ed4467b21dd863507fa2c31b80d5/.vimrc[J

Zeile 2: ""cpp[J

Zeile 3: au BufEnter,BufNewFile,BufRead *.cpp,*.h,*.c setl filetype=cpp[J

Zeile 4: augroup filetype_cpp[J

Zeile 5:     autocmd![J

Zeile 6:     au FileType cpp colorscheme PaperColor[J

Zeile 7:     au FileType cpp hi statusline none[J

Zeile 8:     au FileType cpp nnoremap <buffer> <leader>c :norm 0i//<cr>j[J

Zeile 9:     au FileType cpp nnoremap <buffer> <leader>u :norm 0xx<cr>j[J

Zeile 10:     au FileType cpp nnoremap <buffer> <leader>bc O<esc>i/*<cr>*/<esc>hd0[J

Zeile 11:     au FileType cpp nnoremap <buffer> <leader>[ A {<cr>}<esc>[J

Zeile 12:     au FileType cpp nnoremap <buffer> <leader>; A;<esc>:w<cr>[J

Zeile 13:     au FileType cpp nnoremap <buffer> <leader>rms :%s/std:://g<cr>[J

Zeile 14:     au FileType cpp nnoremap <buffer> m. a-><esc>a[J

Zeile 15:     au FileType cpp nnoremap <buffer> <leader><leader>y :-1read ~/.vim/.boiler.cpp<cr> [J

Zeile 16: [J

Zeile 17:     au FileType cpp inoreabb <buffer> doth <esc>:-1read ~/.vim/.h_starter.cpp<cr>[J

Zeile 18:     au FileType cpp inoreabb <buffer> prarr <esc>:-1read ~/.vim/.print_array.cpp<cr>[J

Zeile 19:     au FileType cpp inoreabb <buffer> sep <esc>:-1read ~/.vim/.separator.cpp<cr>[J

Zeile 20: [J

Zeile 21:     au FileType cpp inoreabb <buffer> inclcr #include <coroutine><esc>[J

Zeile 22:     au FileType cpp inoreabb <buffer> inclrng #include <ranges><esc>[J

Zeile 23:     au FileType cpp inoreabb <buffer> inclalg #include <algorithm><esc>[J

Zeile 24:     au FileType cpp inoreabb <buffer> incls #include <string><esc>[J

Zeile 25:     au FileType cpp inoreabb <buffer> inclf #include <functional><esc>[J

Zeile 26:     au FileType cpp inoreabb <buffer> inclio #include <iostream><esc>[J

Zeile 27:     au FileType cpp inoreabb <buffer> inclsv #include <string_view><esc>[J

Zeile 28:     au FileType cpp inoreabb <buffer> inclcon #include <concepts><esc>[J

Zeile 29:     au FileType cpp inoreabb <buffer> inclchr #include <chrono><esc>[J

Zeile 30:     au FileType cpp inoreabb <buffer> inclthr #include <thread><esc>[J

Zeile 31:     au FileType cpp inoreabb <buffer> inclmem #include <memory><esc>[J

Zeile 32:     au FileType cpp inoreabb <buffer> inclios #include <ios><esc>[J

Zeile 33:     au FileType cpp inoreabb <buffer> inclsio #include <cstdio><esc>[J

Zeile 34:     au FileType cpp inoreabb <buffer> incldef #include <cstddef><esc>[J

Zeile 35:     au FileType cpp inoreabb <buffer> inclsl #include <cstdlib><esc>[J

Zeile 36:     au FileType cpp inoreabb <buffer> inclfs #include <fstream><esc>[J

Zeile 37:     au FileType cpp inoreabb <buffer> incliom #include <iomanip><esc>[J

Zeile 38:     au FileType cpp inoreabb <buffer> inclcs #include <cstring><esc>[J

Zeile 39:     au FileType cpp inoreabb <buffer> inclsig #include <csignal><esc>[J

Zeile 40:     au FileType cpp inoreabb <buffer> inclt #include <ctime><esc>[J

Zeile 41:     au FileType cpp inoreabb <buffer> inclct #include <cctype><esc>[J

Zeile 42:     au FileType cpp inoreabb <buffer> inclm #include <cmath><esc>[J

Zeile 43:     au FileType cpp inoreabb <buffer> incll #include <limits><esc>[J

Zeile 44:     au FileType cpp inoreabb <buffer> inclmem #include <memory><esc>[J

Zeile 45:     au FileType cpp inoreabb <buffer> incln #include <numbers><esc>[J

Zeile 46:     au FileType cpp inoreabb <buffer> incla #include <array><esc>[J

Zeile 47:     au FileType cpp inoreabb <buffer> inclv #include <vector><esc>[J

Zeile 48:     au FileType cpp inoreabb <buffer> incldq #include <deque><esc>[J

Zeile 49:     au FileType cpp inoreabb <buffer> incllst #include <list><esc>[J

Zeile 50:     au FileType cpp inoreabb <buffer> inclflst #include <forward_list><esc>[J

Zeile 51:     au FileType cpp inoreabb <buffer> inclu #include <utility><esc>[J

Zeile 52:     au FileType cpp inoreabb <buffer> inclmap #include <map><esc>[J

Zeile 53:     au FileType cpp inoreabb <buffer> inclset #include <set><esc>[J

Zeile 54:     au FileType cpp inoreabb <buffer> inclq #include <queue><esc>[J

Zeile 55:     au FileType cpp inoreabb <buffer> inclstk #include <stack><esc>[J

Zeile 56:     au FileType cpp inoreabb <buffer> inclx #include <exception><esc>[J

Zeile 57:     au FileType cpp inoreabb <buffer> inclsx #include <stdexcept><esc>[J

Zeile 58:     au FileType cpp inoreabb <buffer> inclass #include <cassert><esc>[J

Zeile 59:     au FileType cpp inoreabb <buffer> inclb #include <bitset><esc>[J

Zeile 60:     au FileType cpp inoreabb <buffer> incltt #include <type_traits><esc>[J

Zeile 61:     au FileType cpp inoreabb <buffer> inclh #include ".h"<esc>F.h[J

Zeile 62:     au FileType cpp inoreabb <buffer> uns using namespace std;<esc>Fsh[J

Zeile 63:     au FileType cpp inoreabb <buffer> in cin >>[J

Zeile 64:     au FileType cpp inoreabb <buffer> gl getline(cin, )<esc>F,l[J

Zeile 65:     au FileType cpp inoreabb <buffer> out cout <<  << "\n";<esc>Ft4l[J

Zeile 66:     au FileType cpp inoreabb <buffer> onl cout << "\n";<esc>Fnh[J

Zeile 67:     au FileType cpp inoreabb <buffer> ot cout << "\t";<esc>[J

Zeile 68:     au FileType cpp inoreabb <buffer> sw setw(5)<esc>F5h[J

Zeile 69:     au FileType cpp inoreabb <buffer> odnl cout << "\n\n";<esc>Fnh[J

Zeile 70:     au FileType cpp inoreabb <buffer> ba boolalpha[J

Zeile 71:     au FileType cpp inoreabb <buffer> str string[J

Zeile 72:     au FileType cpp inoreabb <buffer> dbl double[J

Zeile 73:     au FileType cpp inoreabb <buffer> tstr to_string()<esc>Fgl[J

Zeile 74:     au FileType cpp inoreabb <buffer> im int main() {<cr>}<esc>Oreturn 0;<esc>kh[J

Zeile 75:     au FileType cpp inoreabb <buffer> rtn return[J

Zeile 76:     au FileType cpp inoreabb <buffer> co const[J

Zeile 77:     au FileType cpp inoreabb <buffer> ce constexpr[J

Zeile 78:     au FileType cpp inoreabb <buffer> ci constinit[J

Zeile 79:     au FileType cpp inoreabb <buffer> cev consteval[J

Zeile 80:     au FileType cpp inoreabb <buffer> fl for (size_t i{ 0 }; i < x; ++i) {<cr>}<esc>k0fx<left>[J

Zeile 81:     au FileType cpp inoreabb <buffer> flj for (int j = 0; j < x; j++) {<cr>}<esc>k0fx<left>[J

Zeile 82:     au FileType cpp inoreabb <buffer> pb push_back();<esc>Fkl[J

Zeile 83:     au FileType cpp inoreabb <buffer> ch <<[J

Zeile 84:     au FileType cpp inoreabb <buffer> hc >>[J

Zeile 85:     au FileType cpp inoreabb <buffer> che << endl;<esc>[J

Zeile 86:     au FileType cpp inoreabb <buffer> th this-><esc>F-[J

Zeile 87:     au FileType cpp inoreabb <buffer> ppd #ifndef<cr>#define<cr><cr>#endif<esc>[J

Zeile 88:     au FileType cpp inoreabb <buffer> ew err.what()<esc>[J

Zeile 89:     au FileType cpp inoreabb <buffer> rerr runtime_error[J

Zeile 90:     au FileType cpp inoreabb <buffer> np nullptr[J

Zeile 91:     au FileType cpp inoreabb <buffer> qp unique_ptr<double><esc>Fdh[J

Zeile 92:     au FileType cpp inoreabb <buffer> shp shared_ptr<int><esc>Fih[J

Zeile 93:     au FileType cpp inoreabb <buffer> mq make_unique<double>();<esc>Fdh[J

Zeile 94:     au FileType cpp inoreabb <buffer> msh make_shared<double>();<esc>Fdh[J

Zeile 95:     au FileType cpp inoreabb <buffer> sc static_cast<>()<esc>Ftl[J

Zeile 96:     au FileType cpp inoreabb <buffer> dc dynamic_cast<>()<esc>Ftl[J

Zeile 97:     au FileType cpp inoreabb <buffer> pf printf("")<esc>Ffll[J

Zeile 98:     au FileType cpp inoreabb <buffer> wh while () {<cr>}<esc>k02w[J

Zeile 99:     au FileType cpp inoreabb <buffer> ne !=[J

Zeile 100:     au FileType cpp inoreabb <buffer> sr srand(time(nullptr));<esc>0h[J

Zeile 101:     au FileType cpp inoreabb <buffer> st size_t[J

Zeile 102:     au FileType cpp inoreabb <buffer> pd ptrdiff_t[J

Zeile 103:     au FileType cpp inoreabb <buffer> strv string_view[J

Zeile 104:     au FileType cpp inoreabb <buffer> lam [](){<cr>}<esc>k0f][J

Zeile 105:     au FileType cpp inoreabb <buffer> ttt template <typename T><esc>[J

Zeile 106:     au FileType cpp inoreabb <buffer> tct template <class T><esc>[J

Zeile 107:     au FileType cpp inoreabb <buffer> tn typename[J

Zeile 108: [J

Zeile 109: ""    concepts[J

Zeile 110:     au FileType cpp inoreabb <buffer> rq requires[J

Zeile 111:     au FileType cpp inoreabb <buffer> tti is_integral_v<T>[J

Zeile 112:     au FileType cpp inoreabb <buffer> ttfp is_floating_point_v<T>[J

Zeile 113:     au FileType cpp inoreabb <buffer> ttf is_function_v<T>[J

Zeile 114:     au FileType cpp inoreabb <buffer> ttcls is_class_v<T>[J

Zeile 115:     au FileType cpp inoreabb <buffer> ttp is_pointer_v<T>[J

Zeile 116:     au FileType cpp inoreabb <buffer> tta is_array_v<T>[J

Zeile 117:     au FileType cpp inoreabb <buffer> ttv is_void_v<T>[J

Zeile 118:     au FileType cpp inoreabb <buffer> ttc is_default_constructible_v<T>[J

Zeile 119: [J

Zeile 120:     au FileType cpp inoreabb <buffer> thp this->[J

Zeile 121:     au FileType cpp inoreabb <buffer> il initializer_list<double><esc>Fdh[J

Zeile 122:     au FileType cpp inoreabb <buffer> op operator[J

Zeile 123:     au FileType cpp inoreabb <buffer> df default[J

Zeile 124:     au FileType cpp inoreabb <buffer> ss <=>[J

Zeile 125:     au FileType cpp inoreabb <buffer> po partial_ordering[J

Zeile 126:     au FileType cpp inoreabb <buffer> so string_ordering[J

Zeile 127:     au FileType cpp inoreabb <buffer> wo weak_ordering[J

Zeile 128:     au FileType cpp inoreabb <buffer> vr virtual[J

Zeile 129:     au FileType cpp inoreabb <buffer> sa static_assert();<esc>Ftl[J

Zeile 130:     au FileType cpp inoreabb <buffer> fcn function[J

Zeile 131:     au FileType cpp inoreabb <buffer> prq priority_queue<int><esc>Fih[J

Zeile 132:     au FileType cpp inoreabb <buffer> fe for_each(begin(), end());<esc>Fill[J

Zeile 133:     au FileType cpp inoreabb <buffer> lf [] () { }<esc>6h[J

Zeile 134:     au FileType cpp inoreabb <buffer> nx noexcept[J

Zeile 135: [J

Zeile 136: ""  coroutines    [J

Zeile 137:     au FileType cpp inoreabb <buffer> gn generator<int><esc>Fih[J

Zeile 138:     au FileType cpp inoreabb <buffer> coy co_yield[J

Zeile 139:     au FileType cpp inoreabb <buffer> cor co_return[J

Zeile 140:     au FileType cpp inoreabb <buffer> coa co_await[J

Zeile 141: [J

Zeile 142: [J

Zeile 143: [J

Zeile 144: augroup END[J

Lesen von /c/Users/108012516/.vim/settings/settings_cpp.vim beendet[J
weiter in /c/Users/108012516/dotfiles/vimConf/vimrc_fzf[J
Zeile 460: "}}}[J

Zeile 461: [J

Lesen von vimrc_fzf beendet[J
Suche nach "pack/*/start/*" in "/c/Users/108012516/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim82,/usr/share/vim/vimfiles/after,/c/Users/108012516/.vim/after"[J
Suche nach "/c/Users/108012516/.vim/pack/*/start/*"[J
Suche nach "/usr/share/vim/vimfiles/pack/*/start/*"[J
Suche nach "/usr/share/vim/vim82/pack/*/start/*"[J
Suche nach "/usr/share/vim/vimfiles/after/pack/*/start/*"[J
Suche nach "/c/Users/108012516/.vim/after/pack/*/start/*"[J
in 'packpath' nicht gefunden: "pack/*/start/*"[J
Suche nach "plugin/**/*.vim" in "/c/Users/108012516/.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill,/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorsch[J
Suche nach "/c/Users/108012516/.vim/plugin/**/*.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/plugin/**/*.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/plugin/**/*.vim"[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/plugin)[J
fchdir() to previous dir[J
lese "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/plugin/fugitive.vim"[J
Zeile 1: " fugitive.vim - A Git wrapper so awesome, it should be illegal[J

Zeile 2: " Maintainer:   Tim Pope <http://tpo.pe/>[J

Zeile 3: " Version:      3.4[J

Zeile 4: " GetLatestVimScripts: 2975 1 :AutoInstall: fugitive.vim[J

Zeile 5: [J

Zeile 6: if exists('g:loaded_fugitive')[J

Zeile 7:   finish[J

Zeile 8: endif[J

Zeile 9: let g:loaded_fugitive = 1[J

Zeile 10: [J

Zeile 11: let s:bad_git_dir = '/$\|^fugitive:'[J

Zeile 12: [J

Zeile 13: " FugitiveGitDir() returns the detected Git dir for the given buffer number,[J

Zeile 14: " or the current buffer if no argument is passed.  This will be an empty[J

Zeile 15: " string if no Git dir was found.  Use !empty(FugitiveGitDir()) to check if[J

Zeile 16: " Fugitive is active in the current buffer.  Do not rely on this for direct[J

Zeile 17: " filesystem access; use FugitiveFind('.git/whatever') instead.[J

Zeile 18: function! FugitiveGitDir(...) abort[J

Zeile 47: [J

Zeile 48: " FugitiveReal() takes a fugitive:// URL and returns the corresponding path in[J

Zeile 49: " the work tree.  This may be useful to get a cleaner path for inclusion in[J

Zeile 50: " the statusline, for example.  Note that the file and its parent directories[J

Zeile 51: " are not guaranteed to exist.[J

Zeile 52: "[J

Zeile 53: " This is intended as an abstract API to be used on any "virtual" path.  For a[J

Zeile 54: " buffer named foo://bar, check for a function named FooReal(), and if it[J

Zeile 55: " exists, call FooReal("foo://bar").[J

Zeile 56: function! FugitiveReal(...) abort[J

Zeile 70: [J

Zeile 71: " FugitiveFind() takes a Fugitive object and returns the appropriate Vim[J

Zeile 72: " buffer name.  You can use this to generate Fugitive URLs ("HEAD:README") or[J

Zeile 73: " to get the absolute path to a file in the Git dir (".git/HEAD"), the common[J

Zeile 74: " dir (".git/config"), or the work tree (":(top)Makefile").[J

Zeile 75: "[J

Zeile 76: " An optional second argument provides the Git dir, or the buffer number of a[J

Zeile 77: " buffer with a Git dir.  The default is the current buffer.[J

Zeile 78: function! FugitiveFind(...) abort[J

Zeile 85: [J

Zeile 86: " FugitiveParse() takes a fugitive:// URL and returns a 2 element list[J

Zeile 87: " containing an object name ("commit:file") and the Git dir.  It's effectively[J

Zeile 88: " the inverse of FugitiveFind().[J

Zeile 89: function! FugitiveParse(...) abort[J

Zeile 101: [J

Zeile 102: " FugitiveGitVersion() queries the version of Git in use.  Pass up to 3[J

Zeile 103: " arguments to return a Boolean of whether a certain minimum version is[J

Zeile 104: " available (FugitiveGitVersion(2,3,4) checks for 2.3.4 or higher) or no[J

Zeile 105: " arguments to get a raw string.[J

Zeile 106: function! FugitiveGitVersion(...) abort[J

Zeile 109: [J

Zeile 110: " FugitiveResult() returns an object encapsulating the result of the most[J

Zeile 111: " recent :Git command.  Will be empty if no result is available.  During a[J

Zeile 112: " User FugitiveChanged event, this is guaranteed to correspond to the :Git[J

Zeile 113: " command that triggered the event, or be empty if :Git was not the trigger.[J

Zeile 114: " Pass in the name of a temp buffer to get the result object for that command[J

Zeile 115: " instead.  Contains the following keys:[J

Zeile 116: "[J

Zeile 117: " * "args": List of command arguments, starting with the subcommand.  Will be[J

Zeile 118: "   empty for usages like :Git --help.[J

Zeile 119: " * "git_dir": Git dir of the relevant repository.[J

Zeile 120: " * "exit_status": The integer exit code of the process.[J

Zeile 121: " * "flags": Flags passed directly to Git, like -c and --help.[J

Zeile 122: " * "file": Path to file containing command output.  Not guaranteed to exist,[J

Zeile 123: "   so verify with filereadable() before trying to access it.[J

Zeile 124: function! FugitiveResult(...) abort[J

Zeile 127: [J

Zeile 128: " FugitiveExecute() runs Git with a list of arguments and returns a dictionary[J

Zeile 129: " with the following keys:[J

Zeile 130: "[J

Zeile 131: " * "exit_status": The integer exit code of the process.[J

Zeile 132: " * "stdout": The stdout produced by the process, as a list of lines.[J

Zeile 133: " * "stderr": The stdout produced by the process, as a list of lines.[J

Zeile 134: "[J

Zeile 135: " An optional second argument provides the Git dir, or the buffer number of a[J

Zeile 136: " buffer with a Git dir.  The default is the current buffer.[J

Zeile 137: "[J

Zeile 138: " An optional final argument is a callback Funcref, for asynchronous[J

Zeile 139: " execution.[J

Zeile 140: function! FugitiveExecute(args, ...) abort[J

Zeile 143: [J

Zeile 144: " FugitiveShellCommand() turns an array of arugments into a Git command string[J

Zeile 145: " which can be executed with functions like system() and commands like :!.[J

Zeile 146: " Integer arguments will be treated as buffer numbers, and the appropriate[J

Zeile 147: " relative path inserted in their place.[J

Zeile 148: "[J

Zeile 149: " An optional second argument provides the Git dir, or the buffer number of a[J

Zeile 150: " buffer with a Git dir.  The default is the current buffer.[J

Zeile 151: function! FugitiveShellCommand(...) abort[J

Zeile 154: [J

Zeile 155: " FugitivePrepare() is a deprecated alias for FugitiveShellCommand().  If you[J

Zeile 156: " are using this in conjunction with system(), consider using[J

Zeile 157: " FugitiveExecute() instead.[J

Zeile 158: function! FugitivePrepare(...) abort[J

Zeile 167: [J

Zeile 168: " FugitiveConfig() get returns an opaque structure that can be passed to other[J

Zeile 169: " FugitiveConfig functions in lieu of a Git directory.  This can be faster[J

Zeile 170: " when performing multiple config queries.  Do not rely on the internal[J

Zeile 171: " structure of the return value as it is not guaranteed.  If you want a full[J

Zeile 172: " dictionary of every config value, use FugitiveConfigGetRegexp('.*').[J

Zeile 173: "[J

Zeile 174: " An optional argument provides the Git dir, or the buffer number of a[J

Zeile 175: " buffer with a Git dir.  The default is the current buffer.  Pass a blank[J

Zeile 176: " string to limit to the global config.[J

Zeile 177: function! FugitiveConfig(...) abort[J

Zeile 180: [J

Zeile 181: " FugitiveConfigGet() retrieves a Git configuration value.  An optional second[J

Zeile 182: " argument can be either the object returned by FugitiveConfig(), or a Git[J

Zeile 183: " dir or buffer number to be passed along to FugitiveConfig().[J

Zeile 184: function! FugitiveConfigGet(name, ...) abort[J

Zeile 187: [J

Zeile 188: " FugitiveConfigGetAll() is like FugitiveConfigGet() but returns a list of[J

Zeile 189: " all values.[J

Zeile 190: function! FugitiveConfigGetAll(name, ...) abort[J

Zeile 193: [J

Zeile 194: " FugitiveConfigGetRegexp() retrieves a dictionary of all configuration values[J

Zeile 195: " with a key matching the given pattern.  Like git config --get-regexp, but[J

Zeile 196: " using a Vim regexp.  Second argument has same semantics as[J

Zeile 197: " FugitiveConfigGet().[J

Zeile 198: function! FugitiveConfigGetRegexp(pattern, ...) abort[J

Zeile 201: [J

Zeile 202: " FugitiveRemoteUrl() retrieves the remote URL for the given remote name,[J

Zeile 203: " defaulting to the current branch's remote or "origin" if no argument is[J

Zeile 204: " given.  Similar to `git remote get-url`, but also attempts to resolve HTTP[J

Zeile 205: " redirects and SSH host aliases.[J

Zeile 206: "[J

Zeile 207: " An optional second argument provides the Git dir, or the buffer number of a[J

Zeile 208: " buffer with a Git dir.  The default is the current buffer.[J

Zeile 209: function! FugitiveRemoteUrl(...) abort[J

Zeile 212: [J

Zeile 213: " FugitiveDidChange() triggers a FugitiveChanged event and reloads the summary[J

Zeile 214: " buffer for the current or given buffer number's repository.  You can also[J

Zeile 215: " give the result of a FugitiveExecute() and that context will be made[J

Zeile 216: " available inside the FugitiveChanged() event.[J

Zeile 217: "[J

Zeile 218: " Passing the special argument 0 (the number zero) softly expires summary[J

Zeile 219: " buffers for all repositories.  This can be used after a call to system()[J

Zeile 220: " with unclear implications.[J

Zeile 221: function! FugitiveDidChange(...) abort[J

Zeile 224: [J

Zeile 225: " FugitiveHead() retrieves the name of the current branch. If the current HEAD[J

Zeile 226: " is detached, FugitiveHead() will return the empty string, unless the[J

Zeile 227: " optional argument is given, in which case the hash of the current commit[J

Zeile 228: " will be truncated to the given number of characters.[J

Zeile 229: "[J

Zeile 230: " An optional second argument provides the Git dir, or the buffer number of a[J

Zeile 231: " buffer with a Git dir.  The default is the current buffer.[J

Zeile 232: function! FugitiveHead(...) abort[J

Zeile 248: [J

Zeile 249: function! FugitivePath(...) abort[J

Zeile 260: [J

Zeile 261: function! FugitiveStatusline(...) abort[J

Zeile 267: [J

Zeile 268: function! FugitiveCommonDir(...) abort[J

Zeile 275: [J

Zeile 276: function! FugitiveWorkTree(...) abort[J

Zeile 284: [J

Zeile 285: function! FugitiveIsGitDir(...) abort[J

Zeile 294: [J

Zeile 295: let s:worktree_for_dir = {}[J

Zeile 296: let s:dir_for_worktree = {}[J

Zeile 297: function! s:Tree(path) abort[J

Zeile 335: [J

Zeile 336: function! s:CeilingDirectories() abort[J

Zeile 352: [J

Zeile 353: function! FugitiveExtractGitDir(path) abort[J

Zeile 415: [J

Zeile 416: function! FugitiveDetect(...) abort[J

Zeile 447: [J

Zeile 448: function! FugitiveVimPath(path) abort[J

Zeile 455: [J

Zeile 456: function! FugitiveGitPath(path) abort[J

Zeile 459: [J

Zeile 460: if exists('+shellslash')[J

Zeile 461:   function! s:Slash(path) abort[J

Zeile 464: else[J

Zeile 465:   function! s:Slash(path) abort[J

Zeile 468: endif[J

Zeile 469: [J

Zeile 470: function! s:ProjectionistDetect() abort[J

Zeile 487: [J

Zeile 488: let s:addr_other = has('patch-8.1.560') || has('nvim-0.5.0') ? '-addr=other' : ''[J

Zeile 489: let s:addr_tabs  = has('patch-7.4.542') ? '-addr=tabs' : ''[J

Zeile 490: let s:addr_wins  = has('patch-7.4.542') ? '-addr=windows' : ''[J

Zeile 491: [J

Zeile 492: if exists(':G') != 2[J

Zeile 493:   command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#Complete G   exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)[J

Zeile 494: endif[J

Zeile 495: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#Complete Git exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)[J

Zeile 496: [J

Zeile 497: if exists(':Gstatus') != 2 && get(g:, 'fugitive_legacy_commands', 0)[J

Zeile 498:   exe 'command! -bang -bar     -range=-1' s:addr_other 'Gstatus exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)' '|echohl WarningMSG|echomsg ":Gstatus is deprecated in favor of :Git (with no arguments)"|echohl NONE'[J

Zeile 500: elseif exists(':Gstatus') != 2 && !exists('g:fugitive_legacy_commands')[J

Zeile 501:   exe 'command! -bang -bar     -range=-1' s:addr_other 'Gstatus' ' echoerr ":Gstatus has been removed in favor of :Git (with no arguments)"'[J

Zeile 501: command! -bang -bar     -range=-1 -addr=other Gstatus  echoerr ":Gstatus has been removed in favor of :Git (with no arguments)"[J

Zeile 503: endif[J

Zeile 504: [J

Zeile 505: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame'][J

Zeile 506:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)[J

Zeile 507:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'[J

Zeile 510:   elseif exists(':G' . tolower(s:cmd)) != 2 && !exists('g:fugitive_legacy_commands')[J

Zeile 511:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echoerr ":G' . tolower(s:cmd) . ' has been removed in favor of :Git ' . tolower(s:cmd) . '"'[J

Zeile 511: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#CommitComplete Gcommit echoerr ":Gcommit has been removed in favor of :Git commit"[J

Zeile 513:   endif[J

Zeile 514: endfor[J

Zeile 505: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame'][J

Zeile 506:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)[J

Zeile 507:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'[J

Zeile 510:   elseif exists(':G' . tolower(s:cmd)) != 2 && !exists('g:fugitive_legacy_commands')[J

Zeile 511:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echoerr ":G' . tolower(s:cmd) . ' has been removed in favor of :Git ' . tolower(s:cmd) . '"'[J

Zeile 511: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#RevertComplete Grevert echoerr ":Grevert has been removed in favor of :Git revert"[J

Zeile 513:   endif[J

Zeile 514: endfor[J

Zeile 505: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame'][J

Zeile 506:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)[J

Zeile 507:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'[J

Zeile 510:   elseif exists(':G' . tolower(s:cmd)) != 2 && !exists('g:fugitive_legacy_commands')[J

Zeile 511:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echoerr ":G' . tolower(s:cmd) . ' has been removed in favor of :Git ' . tolower(s:cmd) . '"'[J

Zeile 511: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#MergeComplete Gmerge echoerr ":Gmerge has been removed in favor of :Git merge"[J

Zeile 513:   endif[J

Zeile 514: endfor[J

Zeile 505: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame'][J

Zeile 506:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)[J

Zeile 507:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'[J

Zeile 510:   elseif exists(':G' . tolower(s:cmd)) != 2 && !exists('g:fugitive_legacy_commands')[J

Zeile 511:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echoerr ":G' . tolower(s:cmd) . ' has been removed in favor of :Git ' . tolower(s:cmd) . '"'[J

Zeile 511: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#RebaseComplete Grebase echoerr ":Grebase has been removed in favor of :Git rebase"[J

Zeile 513:   endif[J

Zeile 514: endfor[J

Zeile 505: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame'][J

Zeile 506:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)[J

Zeile 507:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'[J

Zeile 510:   elseif exists(':G' . tolower(s:cmd)) != 2 && !exists('g:fugitive_legacy_commands')[J

Zeile 511:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echoerr ":G' . tolower(s:cmd) . ' has been removed in favor of :Git ' . tolower(s:cmd) . '"'[J

Zeile 511: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#PullComplete Gpull echoerr ":Gpull has been removed in favor of :Git pull"[J

Zeile 513:   endif[J

Zeile 514: endfor[J

Zeile 505: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame'][J

Zeile 506:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)[J

Zeile 507:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'[J

Zeile 510:   elseif exists(':G' . tolower(s:cmd)) != 2 && !exists('g:fugitive_legacy_commands')[J

Zeile 511:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echoerr ":G' . tolower(s:cmd) . ' has been removed in favor of :Git ' . tolower(s:cmd) . '"'[J

Zeile 511: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#PushComplete Gpush echoerr ":Gpush has been removed in favor of :Git push"[J

Zeile 513:   endif[J

Zeile 514: endfor[J

Zeile 505: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame'][J

Zeile 506:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)[J

Zeile 507:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'[J

Zeile 510:   elseif exists(':G' . tolower(s:cmd)) != 2 && !exists('g:fugitive_legacy_commands')[J

Zeile 511:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echoerr ":G' . tolower(s:cmd) . ' has been removed in favor of :Git ' . tolower(s:cmd) . '"'[J

Zeile 511: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#FetchComplete Gfetch echoerr ":Gfetch has been removed in favor of :Git fetch"[J

Zeile 513:   endif[J

Zeile 514: endfor[J

Zeile 505: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame'][J

Zeile 506:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)[J

Zeile 507:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'[J

Zeile 510:   elseif exists(':G' . tolower(s:cmd)) != 2 && !exists('g:fugitive_legacy_commands')[J

Zeile 511:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echoerr ":G' . tolower(s:cmd) . ' has been removed in favor of :Git ' . tolower(s:cmd) . '"'[J

Zeile 511: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#BlameComplete Gblame echoerr ":Gblame has been removed in favor of :Git blame"[J

Zeile 513:   endif[J

Zeile 514: endfor[J

Zeile 505: for s:cmd in ['Commit', 'Revert', 'Merge', 'Rebase', 'Pull', 'Push', 'Fetch', 'Blame'][J

Zeile 506:   if exists(':G' . tolower(s:cmd)) != 2 && get(g:, 'fugitive_legacy_commands', 0)[J

Zeile 507:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echohl WarningMSG|echomsg ":G' . tolower(s:cmd) . ' is deprecated in favor of :Git ' . tolower(s:cmd) . '"|echohl NONE|' 'exe fugitive#Command(<line1>, <count>, +"<range>", <bang>0, "<mods>", "' . tolower(s:cmd) . ' " . <q-args>)'[J

Zeile 510:   elseif exists(':G' . tolower(s:cmd)) != 2 && !exists('g:fugitive_legacy_commands')[J

Zeile 511:     exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#' . s:cmd . 'Complete G' . tolower(s:cmd) 'echoerr ":G' . tolower(s:cmd) . ' has been removed in favor of :Git ' . tolower(s:cmd) . '"'[J

Zeile 513:   endif[J

Zeile 514: endfor[J

Zeile 515: unlet s:cmd[J

Zeile 516: [J

Zeile 517: exe "command! -bar -bang -nargs=? -complete=customlist,fugitive#CdComplete Gcd  exe fugitive#Cd(<q-args>, 0)"[J

Zeile 517: command! -bar -bang -nargs=? -complete=customlist,fugitive#CdComplete Gcd  exe fugitive#Cd(<q-args>, 0)[J

Zeile 518: exe "command! -bar -bang -nargs=? -complete=customlist,fugitive#CdComplete Glcd exe fugitive#Cd(<q-args>, 1)"[J

Zeile 518: command! -bar -bang -nargs=? -complete=customlist,fugitive#CdComplete Glcd exe fugitive#Cd(<q-args>, 1)[J

Zeile 519: [J

Zeile 520: exe 'command! -bang -nargs=? -range=-1' s:addr_wins '-complete=customlist,fugitive#GrepComplete Ggrep  exe fugitive#GrepCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'[J

Zeile 520: command! -bang -nargs=? -range=-1 -addr=windows -complete=customlist,fugitive#GrepComplete Ggrep  exe fugitive#GrepCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)[J

Zeile 521: exe 'command! -bang -nargs=? -range=-1' s:addr_wins '-complete=customlist,fugitive#GrepComplete Glgrep exe fugitive#GrepCommand(0, <count> > 0 ? <count> : 0, +"<range>", <bang>0, "<mods>", <q-args>)'[J

Zeile 521: command! -bang -nargs=? -range=-1 -addr=windows -complete=customlist,fugitive#GrepComplete Glgrep exe fugitive#GrepCommand(0, <count> > 0 ? <count> : 0, +"<range>", <bang>0, "<mods>", <q-args>)[J

Zeile 522: [J

Zeile 523: if exists(':Glog') != 2 && get(g:, 'fugitive_legacy_commands', 0)[J

Zeile 524:   exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete Glog  :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "")' '|echohl WarningMSG|echomsg ":Glog is deprecated in favor of :Gclog"|echohl NONE'[J

Zeile 526: elseif exists(':Glog') != 2 && !exists('g:fugitive_legacy_commands')[J

Zeile 527:   exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete Glog' ' echoerr ":Glog has been removed in favor of :Gclog"'[J

Zeile 527: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete Glog  echoerr ":Glog has been removed in favor of :Gclog"[J

Zeile 529: endif[J

Zeile 530: exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete Gclog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "c")'[J

Zeile 530: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete Gclog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "c")[J

Zeile 531: exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete GcLog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "c")'[J

Zeile 531: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete GcLog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "c")[J

Zeile 532: exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete Gllog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "l")'[J

Zeile 532: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete Gllog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "l")[J

Zeile 533: exe 'command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete GlLog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "l")'[J

Zeile 533: command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#LogComplete GlLog :exe fugitive#LogCommand(<line1>,<count>,+"<range>",<bang>0,"<mods>",<q-args>, "l")[J

Zeile 534: [J

Zeile 535: exe 'command! -bar -bang -nargs=*                          -complete=customlist,fugitive#EditComplete   Ge       exe fugitive#Open("edit<bang>", 0, "<mods>", <q-args>)'[J

Zeile 535: command! -bar -bang -nargs=*                          -complete=customlist,fugitive#EditComplete   Ge       exe fugitive#Open("edit<bang>", 0, "<mods>", <q-args>)[J

Zeile 536: exe 'command! -bar -bang -nargs=*                          -complete=customlist,fugitive#EditComplete   Gedit    exe fugitive#Open("edit<bang>", 0, "<mods>", <q-args>)'[J

Zeile 536: command! -bar -bang -nargs=*                          -complete=customlist,fugitive#EditComplete   Gedit    exe fugitive#Open("edit<bang>", 0, "<mods>", <q-args>)[J

Zeile 537: exe 'command! -bar -bang -nargs=*                          -complete=customlist,fugitive#ReadComplete   Gpedit   exe fugitive#Open("pedit", <bang>0, "<mods>", <q-args>)'[J

Zeile 537: command! -bar -bang -nargs=*                          -complete=customlist,fugitive#ReadComplete   Gpedit   exe fugitive#Open("pedit", <bang>0, "<mods>", <q-args>)[J

Zeile 538: exe 'command! -bar -bang -nargs=* -range=-1' s:addr_other '-complete=customlist,fugitive#ReadComplete   Gsplit   exe fugitive#Open((<count> > 0 ? <count> : "").(<count> ? "split" : "edit"), <bang>0, "<mods>", <q-args>)'[J

Zeile 538: command! -bar -bang -nargs=* -range=-1 -addr=other -complete=customlist,fugitive#ReadComplete   Gsplit   exe fugitive#Open((<count> > 0 ? <count> : "").(<count> ? "split" : "edit"), <bang>0, "<mods>", <q-args>)[J

Zeile 539: exe 'command! -bar -bang -nargs=* -range=-1' s:addr_other '-complete=customlist,fugitive#ReadComplete   Gvsplit  exe fugitive#Open((<count> > 0 ? <count> : "").(<count> ? "vsplit" : "edit!"), <bang>0, "<mods>", <q-args>)'[J

Zeile 539: command! -bar -bang -nargs=* -range=-1 -addr=other -complete=customlist,fugitive#ReadComplete   Gvsplit  exe fugitive#Open((<count> > 0 ? <count> : "").(<count> ? "vsplit" : "edit!"), <bang>0, "<mods>", <q-args>)[J

Zeile 540: exe 'command! -bar -bang -nargs=* -range=-1' s:addr_tabs  '-complete=customlist,fugitive#ReadComplete   Gtabedit exe fugitive#Open((<count> >= 0 ? <count> : "")."tabedit", <bang>0, "<mods>", <q-args>)'[J

Zeile 540: command! -bar -bang -nargs=* -range=-1 -addr=tabs -complete=customlist,fugitive#ReadComplete   Gtabedit exe fugitive#Open((<count> >= 0 ? <count> : "")."tabedit", <bang>0, "<mods>", <q-args>)[J

Zeile 541: [J

Zeile 542: if exists(':Gr') != 2[J

Zeile 543:   exe 'command! -bar -bang -nargs=* -range=-1                -complete=customlist,fugitive#ReadComplete   Gr     exe fugitive#ReadCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'[J

Zeile 543: command! -bar -bang -nargs=* -range=-1                -complete=customlist,fugitive#ReadComplete   Gr     exe fugitive#ReadCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)[J

Zeile 544: endif[J

Zeile 545: exe 'command! -bar -bang -nargs=* -range=-1                -complete=customlist,fugitive#ReadComplete   Gread    exe fugitive#ReadCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'[J

Zeile 545: command! -bar -bang -nargs=* -range=-1                -complete=customlist,fugitive#ReadComplete   Gread    exe fugitive#ReadCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)[J

Zeile 546: [J

Zeile 547: exe 'command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gdiffsplit  exe fugitive#Diffsplit(1, <bang>0, "<mods>", <q-args>)'[J

Zeile 547: command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gdiffsplit  exe fugitive#Diffsplit(1, <bang>0, "<mods>", <q-args>)[J

Zeile 548: exe 'command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Ghdiffsplit exe fugitive#Diffsplit(0, <bang>0, "<mods>", <q-args>)'[J

Zeile 548: command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Ghdiffsplit exe fugitive#Diffsplit(0, <bang>0, "<mods>", <q-args>)[J

Zeile 549: exe 'command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gvdiffsplit exe fugitive#Diffsplit(0, <bang>0, "vertical <mods>", <q-args>)'[J

Zeile 549: command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gvdiffsplit exe fugitive#Diffsplit(0, <bang>0, "vertical <mods>", <q-args>)[J

Zeile 550: [J

Zeile 551: exe 'command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gw     exe fugitive#WriteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'[J

Zeile 551: command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gw     exe fugitive#WriteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)[J

Zeile 552: exe 'command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gwrite exe fugitive#WriteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'[J

Zeile 552: command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gwrite exe fugitive#WriteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)[J

Zeile 553: exe 'command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gwq    exe fugitive#WqCommand(   <line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'[J

Zeile 553: command! -bar -bang -nargs=* -complete=customlist,fugitive#EditComplete Gwq    exe fugitive#WqCommand(   <line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)[J

Zeile 554: [J

Zeile 555: exe 'command! -bar -bang -nargs=0 GRemove exe fugitive#RemoveCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'[J

Zeile 555: command! -bar -bang -nargs=0 GRemove exe fugitive#RemoveCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)[J

Zeile 556: exe 'command! -bar -bang -nargs=0 GDelete exe fugitive#DeleteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'[J

Zeile 556: command! -bar -bang -nargs=0 GDelete exe fugitive#DeleteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)[J

Zeile 557: exe 'command! -bar -bang -nargs=1 -complete=customlist,fugitive#CompleteObject GMove   exe fugitive#MoveCommand(  <line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'[J

Zeile 557: command! -bar -bang -nargs=1 -complete=customlist,fugitive#CompleteObject GMove   exe fugitive#MoveCommand(  <line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)[J

Zeile 558: exe 'command! -bar -bang -nargs=1 -complete=customlist,fugitive#RenameComplete GRename exe fugitive#RenameCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'[J

Zeile 558: command! -bar -bang -nargs=1 -complete=customlist,fugitive#RenameComplete GRename exe fugitive#RenameCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)[J

Zeile 559: if exists(':Gremove') != 2 && get(g:, 'fugitive_legacy_commands', 1)[J

Zeile 560:   exe 'command! -bar -bang -nargs=0 Gremove exe fugitive#RemoveCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)' '|echohl WarningMSG|echomsg ":Gremove is deprecated in favor of :GRemove"|echohl NONE'[J

Zeile 560: command! -bar -bang -nargs=0 Gremove exe fugitive#RemoveCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>) |echohl WarningMSG|echomsg ":Gremove is deprecated in favor of :GRemove"|echohl NONE[J

Zeile 562: endif[J

Zeile 563: if exists(':Gdelete') != 2 && get(g:, 'fugitive_legacy_commands', 1)[J

Zeile 564:   exe 'command! -bar -bang -nargs=0 Gdelete exe fugitive#DeleteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)' '|echohl WarningMSG|echomsg ":Gdelete is deprecated in favor of :GDelete"|echohl NONE'[J

Zeile 564: command! -bar -bang -nargs=0 Gdelete exe fugitive#DeleteCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>) |echohl WarningMSG|echomsg ":Gdelete is deprecated in favor of :GDelete"|echohl NONE[J

Zeile 566: endif[J

Zeile 567: if exists(':Gmove') != 2 && get(g:, 'fugitive_legacy_commands', 1)[J

Zeile 568:   exe 'command! -bar -bang -nargs=1 -complete=customlist,fugitive#CompleteObject Gmove   exe fugitive#MoveCommand(  <line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)' '|echohl WarningMSG|echomsg ":Gmove is deprecated in favor of :GMove"|echohl NONE'[J

Zeile 568: command! -bar -bang -nargs=1 -complete=customlist,fugitive#CompleteObject Gmove   exe fugitive#MoveCommand(  <line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>) |echohl WarningMSG|echomsg ":Gmove is deprecated in favor of :GMove"|echohl NONE[J

Zeile 570: endif[J

Zeile 571: if exists(':Grename') != 2 && get(g:, 'fugitive_legacy_commands', 1)[J

Zeile 572:   exe 'command! -bar -bang -nargs=1 -complete=customlist,fugitive#RenameComplete Grename exe fugitive#RenameCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)' '|echohl WarningMSG|echomsg ":Grename is deprecated in favor of :GRename"|echohl NONE'[J

Zeile 572: command! -bar -bang -nargs=1 -complete=customlist,fugitive#RenameComplete Grename exe fugitive#RenameCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>) |echohl WarningMSG|echomsg ":Grename is deprecated in favor of :GRename"|echohl NONE[J

Zeile 574: endif[J

Zeile 575: [J

Zeile 576: exe 'command! -bar -bang -range=-1 -nargs=* -complete=customlist,fugitive#CompleteObject GBrowse exe fugitive#BrowseCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)'[J

Zeile 576: command! -bar -bang -range=-1 -nargs=* -complete=customlist,fugitive#CompleteObject GBrowse exe fugitive#BrowseCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)[J

Zeile 577: if exists(':Gbrowse') != 2 && get(g:, 'fugitive_legacy_commands', 1)[J

Zeile 578:   exe 'command! -bar -bang -range=-1 -nargs=* -complete=customlist,fugitive#CompleteObject Gbrowse exe fugitive#BrowseCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>)' '|if <bang>1|redraw!|endif|echohl WarningMSG|echomsg ":Gbrowse is deprecated in favor of :GBrowse"|echohl NONE'[J

Zeile 578: command! -bar -bang -range=-1 -nargs=* -complete=customlist,fugitive#CompleteObject Gbrowse exe fugitive#BrowseCommand(<line1>, <count>, +"<range>", <bang>0, "<mods>", <q-args>) |if <bang>1|redraw!|endif|echohl WarningMSG|echomsg ":Gbrowse is deprecated in favor of :GBrowse"|echohl NONE[J

Zeile 580: endif[J

Zeile 581: [J

Zeile 582: if v:version < 703[J

Zeile 583:   finish[J

Zeile 584: endif[J

Zeile 585: [J

Zeile 586: let g:io_fugitive = { 'simplify': function('fugitive#simplify'), 'resolve': function('fugitive#resolve'), 'getftime': function('fugitive#getftime'), 'getfsize': function('fugitive#getfsize'), 'getftype': function('fugitive#getftype'), 'filereadable': function('fugitive#filereadable'), 'filewritable': function('fugitive#filewritable'), 'isdirectory': function('fugitive#isdirectory'), 'getfperm': function('fugitive#getfperm'), 'setfperm': function('fugitive#setfperm'), 'readfile': function('fugitive#readfile'), 'writefile': function('fugitive#writefile'), 'glob': function('fugitive#glob'), 'delete': function('fugitive#delete'), 'Real': function('FugitiveReal')}[J

Zeile 602: [J

Zeile 603: augroup fugitive[J

Zeile 604:   autocmd![J

Zeile 605: [J

Zeile 606:   autocmd BufNewFile,BufReadPost *    call FugitiveDetect(expand('<amatch>:p'), 0)[J

Zeile 608:   autocmd FileType           netrw call FugitiveDetect(fnamemodify(get(b:, 'netrw_curdir', expand('<afile>:p')), ':p'), 1)[J

Zeile 609: [J

Zeile 610:   autocmd FileType git call fugitive#MapCfile()[J

Zeile 612:   autocmd FileType gitcommit call fugitive#MapCfile('fugitive#MessageCfile()')[J

Zeile 614:   autocmd FileType git,gitcommit if &foldtext ==# 'foldtext()' |    setlocal foldtext=fugitive#Foldtext() | endif[J

Zeile 618:   autocmd FileType fugitive call fugitive#MapCfile('fugitive#PorcelainCfile()')[J

Zeile 620:   autocmd FileType gitrebase let &l:include = '^\%(pick\|squash\|edit\|reword\|fixup\|drop\|[pserfd]\)\>' | if &l:includeexpr !~# 'Fugitive' |   let &l:includeexpr = 'v:fname =~# ''^\x\{4,\}$'' && len(FugitiveGitDir()) ? FugitiveFind(v:fname) : ' .     (len(&l:includeexpr) ? &l:includeexpr : 'v:fname') | endif | let b:undo_ftplugin = get(b:, 'undo_ftplugin', 'exe') . '|setl inex= inc='[J

Zeile 627: [J

Zeile 628:   autocmd BufReadCmd index{,.lock} if FugitiveIsGitDir(expand('<amatch>:p:h')) |   let b:git_dir = s:Slash(expand('<amatch>:p:h')) |   exe fugitive#BufReadStatus(v:cmdbang) | elseif filereadable(expand('<amatch>')) |   silent doautocmd BufReadPre |   keepalt read <amatch> |   1delete_ |   silent doautocmd BufReadPost | else |   silent doautocmd BufNewFile | endif[J

Zeile 640: [J

Zeile 641:   autocmd BufReadCmd    fugitive://*//*             exe fugitive#BufReadCmd() | if &path =~# '^\.\%(,\|$\)' |   let &l:path = substitute(&path, '^\.,\=', '', '') | endif[J

Zeile 645:   autocmd BufWriteCmd   fugitive://*//[0-3]/*       exe fugitive#BufWriteCmd()[J

Zeile 646:   autocmd FileReadCmd   fugitive://*//*             exe fugitive#FileReadCmd()[J

Zeile 647:   autocmd FileWriteCmd  fugitive://*//[0-3]/*       exe fugitive#FileWriteCmd()[J

Zeile 648:   if exists('##SourceCmd')[J

Zeile 649:     autocmd SourceCmd     fugitive://*//*    nested exe fugitive#SourceCmd()[J

Zeile 650:   endif[J

Zeile 651: [J

Zeile 652:   autocmd User Flags call Hoist('buffer', function('FugitiveStatusline'))[J

Zeile 653: [J

Zeile 654:   autocmd User ProjectionistDetect call s:ProjectionistDetect()[J

Zeile 655: augroup END[J

Zeile 656: [J

Zeile 657: if get(g:, 'fugitive_no_maps')[J

Zeile 658:   finish[J

Zeile 659: endif[J

Zeile 660: [J

Zeile 661: let s:nowait = v:version >= 704 ? '<nowait>' : ''[J

Zeile 662: [J

Zeile 663: function! s:Map(mode, lhs, rhs, flags) abort[J

Zeile 685: [J

Zeile 686: call s:Map('c', '<C-R><C-G>', 'fnameescape(fugitive#Object(@%))', '<expr>')[J

rufe <SNR>18_Map auf[J('c', '<C-R><C-G>', 'fnameescape(fugitive#Object(@%))', '<expr>')

Zeile 1:   let flags = a:flags . (a:rhs =~# '<Plug>' ? '' : '<script>')[J

Zeile 2:   let head = a:lhs[J

Zeile 3:   let tail = ''[J

Zeile 4:   let keys = get(g:, a:mode.'remap', {})[J

Zeile 5:   if len(keys) && type(keys) == type({})[J

Zeile 6:     while !empty(head)[J

Zeile 7:       if has_key(keys, head)[J

Zeile 8:         let head = keys[head][J

Zeile 9:         if empty(head)[J

Zeile 10:           return[J

Zeile 11:         endif[J

Zeile 12:         break[J

Zeile 13:       endif[J

Zeile 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail[J

Zeile 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')[J

Zeile 16:     endwhile[J

Zeile 17:   endif[J

Zeile 18:   if flags !~# '<unique>' || empty(mapcheck(head.tail, a:mode))[J

Zeile 19:     exe a:mode.'map' s:nowait flags head.tail a:rhs[J

Zeile 19: cmap <nowait> <expr><script> <C-R><C-G> fnameescape(fugitive#Object(@%))[J

Zeile 20:   endif[J

<SNR>18_Map lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/plugin/fugitive.vim[J

Zeile 687: call s:Map('n', 'y<C-G>', ':<C-U>call setreg(v:register, fugitive#Object(@%))<CR>', '<silent>')[J

rufe <SNR>18_Map auf[J('n', 'y<C-G>', ':<C-U>call setreg(v:register, fugitive#Object(@%))<CR>', '<silent>')

Zeile 1:   let flags = a:flags . (a:rhs =~# '<Plug>' ? '' : '<script>')[J

Zeile 2:   let head = a:lhs[J

Zeile 3:   let tail = ''[J

Zeile 4:   let keys = get(g:, a:mode.'remap', {})[J

Zeile 5:   if len(keys) && type(keys) == type({})[J

Zeile 6:     while !empty(head)[J

Zeile 7:       if has_key(keys, head)[J

Zeile 8:         let head = keys[head][J

Zeile 9:         if empty(head)[J

Zeile 10:           return[J

Zeile 11:         endif[J

Zeile 12:         break[J

Zeile 13:       endif[J

Zeile 14:       let tail = matchstr(head, '<[^<>]*>$\|.$') . tail[J

Zeile 15:       let head = substitute(head, '<[^<>]*>$\|.$', '', '')[J

Zeile 16:     endwhile[J

Zeile 17:   endif[J

Zeile 18:   if flags !~# '<unique>' || empty(mapcheck(head.tail, a:mode))[J

Zeile 19:     exe a:mode.'map' s:nowait flags head.tail a:rhs[J

Zeile 19: nmap <nowait> <silent><script> y<C-G> :<C-U>call setreg(v:register, fugitive#Object(@%))<CR>[J

Zeile 20:   endif[J

<SNR>18_Map lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/plugin/fugitive.vim[J

Lesen von /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/plugin/fugitive.vim beendet[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/plugin/**/*.vim"[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/plugin)[J
fchdir() to previous dir[J
lese "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/plugin/gitgutter.vim"[J
Zeile 1: scriptencoding utf-8[J

Zeile 2: [J

Zeile 3: if exists('g:loaded_gitgutter') || !has('signs') || &cp[J

Zeile 4:   finish[J

Zeile 5: endif[J

Zeile 6: let g:loaded_gitgutter = 1[J

Zeile 7: [J

Zeile 8: " Initialisation {{{[J

Zeile 9: [J

Zeile 10: if v:version < 703 || (v:version == 703 && !has("patch105"))[J

Zeile 11:   call gitgutter#utility#warn('Requires Vim 7.3.105')[J

Zeile 12:   finish[J

Zeile 13: endif[J

Zeile 14: [J

Zeile 15: let s:nomodeline = (v:version > 703 || (v:version == 703 && has('patch442'))) ? '<nomodeline>' : ''[J

Zeile 16: [J

Zeile 17: function! s:obsolete(var)[J

Zeile 22: [J

Zeile 23: [J

Zeile 24: let g:gitgutter_preview_win_location = get(g:, 'gitgutter_preview_win_location', 'bo')[J

Zeile 25: if exists('*nvim_open_win')[J

Zeile 26:   let g:gitgutter_preview_win_floating = get(g:, 'gitgutter_preview_win_floating', 1)[J

Zeile 27: else[J

Zeile 28:   let default = exists('&previewpopup') ? !empty(&previewpopup) : 0[J

Zeile 29:   let g:gitgutter_preview_win_floating = get(g:, 'gitgutter_preview_win_floating', default)[J

Zeile 30: endif[J

Zeile 31: let g:gitgutter_enabled = get(g:, 'gitgutter_enabled', 1)[J

Zeile 32: if exists('*sign_unplace')[J

Zeile 33:   let g:gitgutter_max_signs = get(g:, 'gitgutter_max_signs', -1)[J

Zeile 34: else[J

Zeile 35:   let g:gitgutter_max_signs = get(g:, 'gitgutter_max_signs', 500)[J

Zeile 36: endif[J

Zeile 37: let g:gitgutter_signs             = get(g:, 'gitgutter_signs', 1)[J

Zeile 38: let g:gitgutter_highlight_lines   = get(g:, 'gitgutter_highlight_lines', 0)[J

Zeile 39: let g:gitgutter_highlight_linenrs = get(g:, 'gitgutter_highlight_linenrs', 0)[J

Zeile 40: let g:gitgutter_sign_priority     = get(g:, 'gitgutter_sign_priority', 10)[J

Zeile 41: " Nvim 0.4.0 has an expanding sign column[J

Zeile 42: " The sign_place() function supports sign priority.[J

Zeile 43: if (has('nvim-0.4.0') || exists('*sign_place')) && !exists('g:gitgutter_sign_allow_clobber')[J

Zeile 44:   let g:gitgutter_sign_allow_clobber = 1[J

Zeile 45: endif[J

Zeile 46: let g:gitgutter_sign_allow_clobber   = get(g:, 'gitgutter_sign_allow_clobber', 0)[J

Zeile 47: let g:gitgutter_set_sign_backgrounds = get(g:, 'gitgutter_set_sign_backgrounds', 0)[J

Zeile 48: let g:gitgutter_sign_added           = get(g:, 'gitgutter_sign_added', '+')[J

Zeile 49: let g:gitgutter_sign_modified        = get(g:, 'gitgutter_sign_modified', '~')[J

Zeile 50: let g:gitgutter_sign_removed         = get(g:, 'gitgutter_sign_removed', '_')[J

Zeile 51: [J

Zeile 52: if gitgutter#utility#supports_overscore_sign()[J

Suche nach "autoload/gitgutter/utility.vim" in "/c/Users/108012516/.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill,/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/aweso[J
Suche nach "/c/Users/108012516/.vim/autoload/gitgutter/utility.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/autoload/gitgutter/utility.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/autoload/gitgutter/utility.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/autoload/gitgutter/utility.vim"[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/autoload/gitgutter)[J
fchdir() to previous dir[J
Zeile 52: lese "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/autoload/gitgutter/utility.vim"[J
Zeile 1: function! gitgutter#utility#supports_overscore_sign()[J

Zeile 8: [J

Zeile 9: function! gitgutter#utility#setbufvar(buffer, varname, val)[J

Zeile 20: [J

Zeile 21: function! gitgutter#utility#getbufvar(buffer, varname, ...)[J

Zeile 30: [J

Zeile 31: function! gitgutter#utility#warn(message) abort[J

Zeile 37: [J

Zeile 38: function! gitgutter#utility#warn_once(bufnr, message, key) abort[J

Zeile 47: [J

Zeile 48: " Returns truthy when the buffer's file should be processed; and falsey when it shouldn't.[J

Zeile 49: " This function does not and should not make any system calls.[J

Zeile 50: function! gitgutter#utility#is_active(bufnr) abort[J

Zeile 58: [J

Zeile 59: function! s:not_git_dir(bufnr) abort[J

Zeile 62: [J

Zeile 63: function! s:is_file_buffer(bufnr) abort[J

Zeile 66: [J

Zeile 67: " From tpope/vim-fugitive[J

Zeile 68: function! s:winshell()[J

Zeile 71: [J

Zeile 72: " From tpope/vim-fugitive[J

Zeile 73: function! gitgutter#utility#shellescape(arg) abort[J

Zeile 82: [J

Zeile 83: function! gitgutter#utility#file(bufnr)[J

Zeile 86: [J

Zeile 87: " Not shellescaped[J

Zeile 88: function! gitgutter#utility#extension(bufnr) abort[J

Zeile 91: [J

Zeile 92: function! gitgutter#utility#system(cmd, ...) abort[J

Zeile 101: [J

Zeile 102: function! gitgutter#utility#has_repo_path(bufnr)[J

Zeile 105: [J

Zeile 106: " Path of file relative to repo root.[J

Zeile 107: "[J

Zeile 108: " *     empty string - not set[J

Zeile 109: " * non-empty string - path[J

Zeile 110: " *               -1 - pending[J

Zeile 111: " *               -2 - not tracked by git[J

Zeile 112: function! gitgutter#utility#repo_path(bufnr, shellesc) abort[J

Zeile 116: [J

Zeile 117: [J

Zeile 118: let s:set_path_handler = {}[J

Zeile 119: [J

Zeile 120: function! s:set_path_handler.out(buffer, path) abort[J

Zeile 130: [J

Zeile 131: function! s:set_path_handler.err(buffer) abort[J

Zeile 134: [J

Zeile 135: [J

Zeile 136: " continuation - a funcref or hash to call after setting the repo path asynchronously.[J

Zeile 137: "[J

Zeile 138: " Returns 'async' if the the path is set asynchronously, 0 otherwise.[J

Zeile 139: function! gitgutter#utility#set_repo_path(bufnr, continuation) abort[J

Zeile 162: [J

Zeile 163: [J

Zeile 164: function! gitgutter#utility#cd_cmd(bufnr, cmd) abort[J

Zeile 168: [J

Zeile 169: function! s:unc_path(bufnr)[J

Zeile 172: [J

Zeile 173: function! s:dos_shell()[J

Zeile 176: [J

Zeile 177: function! s:use_known_shell() abort[J

Zeile 189: [J

Zeile 190: function! s:restore_shell() abort[J

Zeile 195: [J

Zeile 196: function! gitgutter#utility#get_diff_base(bufnr)[J

Zeile 204: [J

Zeile 205: function! s:abs_path(bufnr, shellesc)[J

Zeile 213: [J

Zeile 214: function! s:dir(bufnr) abort[J

Zeile 217: [J

Zeile 218: " Not shellescaped.[J

Zeile 219: function! s:filename(bufnr) abort[J

Zeile 222: [J

Zeile 223: function! s:exists_file(bufnr) abort[J

Zeile 226: [J

Zeile 227: " Get rid of any trailing new line or SOH character.[J

Zeile 228: "[J

Zeile 229: " git ls-files -z produces output with null line termination.[J

Zeile 230: " Vim's system() replaces any null characters in the output[J

Zeile 231: " with SOH (start of header), i.e. ^A.[J

Zeile 232: function! s:strip_trailing_new_line(line) abort[J

Zeile 235: [J

Zeile 236: function! gitgutter#utility#windows()[J

Lesen von /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/autoload/gitgutter/utility.vim beendet[J
weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/plugin/gitgutter.vim[J
rufe gitgutter#utility#supports_overscore_sign auf[J()

Zeile 1:   if gitgutter#utility#windows()[J

rufe gitgutter#utility#windows auf[J()

Zeile 1:   return has('win64') || has('win32') || has('win16')[J

gitgutter#utility#windows lieferte #0 zurÃ¼ck[J

weiter in gitgutter#utility#supports_overscore_sign[J

Zeile 2:     return &encoding ==? 'utf-8'[J

Zeile 3:   else[J

Zeile 4:     return &termencoding ==? &encoding || &termencoding == ''[J

gitgutter#utility#supports_overscore_sign lieferte #1 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/plugin/gitgutter.vim[J

Zeile 53:   let g:gitgutter_sign_removed_first_line = get(g:, 'gitgutter_sign_removed_first_line', 'â¾')[J

Zeile 54: else[J

Zeile 55:   let g:gitgutter_sign_removed_first_line = get(g:, 'gitgutter_sign_removed_first_line', '_^')[J

Zeile 56: endif[J

Zeile 57: [J

Zeile 58: let g:gitgutter_sign_removed_above_and_below = get(g:, 'gitgutter_sign_removed_above_and_below', '_Â¯')[J

Zeile 59: let g:gitgutter_sign_modified_removed        = get(g:, 'gitgutter_sign_modified_removed', '~_')[J

Zeile 60: let g:gitgutter_git_args                     = get(g:, 'gitgutter_git_args', '')[J

Zeile 61: let g:gitgutter_diff_relative_to             = get(g:, 'gitgutter_diff_relative_to', 'index')[J

Zeile 62: let g:gitgutter_diff_args                    = get(g:, 'gitgutter_diff_args', '')[J

Zeile 63: let g:gitgutter_diff_base                    = get(g:, 'gitgutter_diff_base', '')[J

Zeile 64: let g:gitgutter_map_keys                     = get(g:, 'gitgutter_map_keys', 1)[J

Zeile 65: let g:gitgutter_terminal_reports_focus       = get(g:, 'gitgutter_terminal_reports_focus', 1)[J

Zeile 66: let g:gitgutter_async                        = get(g:, 'gitgutter_async', 1)[J

Zeile 67: let g:gitgutter_log                          = get(g:, 'gitgutter_log', 0)[J

Zeile 68: let g:gitgutter_use_location_list            = get(g:, 'gitgutter_use_location_list', 0)[J

Zeile 69: let g:gitgutter_close_preview_on_escape      = get(g:, 'gitgutter_close_preview_on_escape', 0)[J

Zeile 70: let g:gitgutter_show_msg_on_hunk_jumping     = get(g:, 'gitgutter_show_msg_on_hunk_jumping', 1)[J

Zeile 71: [J

Zeile 72: let g:gitgutter_git_executable = get(g:, 'gitgutter_git_executable', 'git')[J

Zeile 73: if !executable(g:gitgutter_git_executable)[J

Zeile 74:   if g:gitgutter_enabled[J

Zeile 75:     call gitgutter#utility#warn('Cannot find git. Please set g:gitgutter_git_executable.')[J

Zeile 76:   endif[J

Zeile 77:   finish[J

Zeile 78: endif[J

Zeile 79: [J

Zeile 80: let default_grep = 'grep'[J

Zeile 81: let g:gitgutter_grep = get(g:, 'gitgutter_grep', default_grep)[J

Zeile 82: if !empty(g:gitgutter_grep)[J

Zeile 83:   if executable(split(g:gitgutter_grep)[0])[J

Zeile 84:     if $GREP_OPTIONS =~# '--color=always'[J

Zeile 85:       let g:gitgutter_grep .= ' --color=never'[J

Zeile 86:     endif[J

Zeile 87:   else[J

Zeile 88:     if g:gitgutter_grep !=# default_grep[J

Zeile 89:       call gitgutter#utility#warn('Cannot find '.g:gitgutter_grep.'. Please check g:gitgutter_grep.')[J

Zeile 90:     endif[J

Zeile 91:     let g:gitgutter_grep = ''[J

Zeile 92:   endif[J

Zeile 93: endif[J

Zeile 94: [J

Zeile 95: call gitgutter#highlight#define_highlights()[J

Suche nach "autoload/gitgutter/highlight.vim" in "/c/Users/108012516/.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill,/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/awe[J
Suche nach "/c/Users/108012516/.vim/autoload/gitgutter/highlight.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/autoload/gitgutter/highlight.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/autoload/gitgutter/highlight.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/autoload/gitgutter/highlight.vim"[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/autoload/gitgutter)[J
fchdir() to previous dir[J
Zeile 95: lese "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/autoload/gitgutter/highlight.vim"[J
Zeile 1: function! gitgutter#highlight#line_disable() abort[J

Zeile 11: [J

Zeile 12: function! gitgutter#highlight#line_enable() abort[J

Zeile 24: [J

Zeile 25: function! gitgutter#highlight#line_toggle() abort[J

Zeile 32: [J

Zeile 33: [J

Zeile 34: function! gitgutter#highlight#linenr_disable() abort[J

Zeile 44: [J

Zeile 45: function! gitgutter#highlight#linenr_enable() abort[J

Zeile 57: [J

Zeile 58: function! gitgutter#highlight#linenr_toggle() abort[J

Zeile 65: [J

Zeile 66: [J

Zeile 67: function! gitgutter#highlight#define_highlights() abort[J

Zeile 123: [J

Zeile 124: function! gitgutter#highlight#define_signs() abort[J

Zeile 137: [J

Zeile 138: function! s:define_sign_text() abort[J

Zeile 146: [J

Zeile 147: function! gitgutter#highlight#define_sign_text_highlights() abort[J

Zeile 168: [J

Zeile 169: function! s:define_sign_line_highlights() abort[J

Zeile 186: [J

Zeile 187: function! s:define_sign_linenr_highlights() abort[J

Zeile 209: [J

Zeile 210: function! s:get_hl(group, what, mode) abort[J

Zeile 217: [J

Zeile 218: function! s:get_foreground_colors(group) abort[J

Zeile 223: [J

Zeile 224: function! s:get_background_colors(group) abort[J

Zeile 229: [J

Zeile 230: function! s:useful_diff_colours()[J

Zeile 236: [J

Zeile 237: function! s:get_foreground_fallback_colors(type)[J

Lesen von /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/autoload/gitgutter/highlight.vim beendet[J
weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/plugin/gitgutter.vim[J
rufe gitgutter#highlight#define_highlights auf[J()

Zeile 1:   let [guibg, ctermbg] = s:get_background_colors('SignColumn')[J

rufe <SNR>21_get_background_colors auf[J('SignColumn')

Zeile 1:   let ctermbg = s:get_hl(a:group, 'bg', 'cterm')[J

rufe <SNR>21_get_hl auf[J('SignColumn', 'bg', 'cterm')

Zeile 1:   let r = synIDattr(synIDtrans(hlID(a:group)), a:what, a:mode)[J

Zeile 2:   if empty(r) || r == -1[J

Zeile 3:     return 'NONE'[J

Zeile 4:   endif[J

Zeile 5:   return r[J

<SNR>21_get_hl lieferte "'235'" zurÃ¼ck[J

weiter in <SNR>21_get_background_colors[J

Zeile 2:   let guibg = s:get_hl(a:group, 'bg', 'gui')[J

rufe <SNR>21_get_hl auf[J('SignColumn', 'bg', 'gui')

Zeile 1:   let r = synIDattr(synIDtrans(hlID(a:group)), a:what, a:mode)[J

Zeile 2:   if empty(r) || r == -1[J

Zeile 3:     return 'NONE'[J

Zeile 4:   endif[J

Zeile 5:   return r[J

<SNR>21_get_hl lieferte "'#1b2b34'" zurÃ¼ck[J

weiter in <SNR>21_get_background_colors[J

Zeile 3:   return [guibg, ctermbg][J

<SNR>21_get_background_colors lieferte "['#1b2b34', '235']" zurÃ¼ck[J

weiter in gitgutter#highlight#define_highlights[J

Zeile 2: [J

Zeile 3:   " Highlights used by the signs.[J

Zeile 4: [J

Zeile 5:   " When they are invisible.[J

Zeile 6:   execute "highlight GitGutterAddInvisible    guifg=bg guibg=" . guibg . " ctermfg=" . ctermbg . " ctermbg=" . ctermbg[J

Zeile 6: highlight GitGutterAddInvisible    guifg=bg guibg=#1b2b34 ctermfg=235 ctermbg=235[J

Zeile 7:   execute "highlight GitGutterChangeInvisible guifg=bg guibg=" . guibg . " ctermfg=" . ctermbg . " ctermbg=" . ctermbg[J

Zeile 7: highlight GitGutterChangeInvisible guifg=bg guibg=#1b2b34 ctermfg=235 ctermbg=235[J

Zeile 8:   execute "highlight GitGutterDeleteInvisible guifg=bg guibg=" . guibg . " ctermfg=" . ctermbg . " ctermbg=" . ctermbg[J

Zeile 8: highlight GitGutterDeleteInvisible guifg=bg guibg=#1b2b34 ctermfg=235 ctermbg=235[J

Zeile 9:   highlight default link GitGutterChangeDeleteInvisible GitGutterChangeInvisible[J

Zeile 10: [J

Zeile 11:   " When they are visible.[J

Zeile 12:   for type in ["Add", "Change", "Delete"][J

Zeile 13:     if hlexists("GitGutter".type) && s:get_foreground_colors("GitGutter".type) != ['NONE', 'NONE'][J

rufe <SNR>21_get_foreground_colors auf[J('GitGutterAdd')

Zeile 1:   let ctermfg = s:get_hl(a:group, 'fg', 'cterm')[J

rufe <SNR>21_get_hl auf[J('GitGutterAdd', 'fg', 'cterm')

Zeile 1:   let r = synIDattr(synIDtrans(hlID(a:group)), a:what, a:mode)[J

Zeile 2:   if empty(r) || r == -1[J

Zeile 3:     return 'NONE'[J

Zeile 4:   endif[J

Zeile 5:   return r[J

<SNR>21_get_hl lieferte "'114'" zurÃ¼ck[J

weiter in <SNR>21_get_foreground_colors[J

Zeile 2:   let guifg = s:get_hl(a:group, 'fg', 'gui')[J

rufe <SNR>21_get_hl auf[J('GitGutterAdd', 'fg', 'gui')

Zeile 1:   let r = synIDattr(synIDtrans(hlID(a:group)), a:what, a:mode)[J

Zeile 2:   if empty(r) || r == -1[J

Zeile 3:     return 'NONE'[J

Zeile 4:   endif[J

Zeile 5:   return r[J

<SNR>21_get_hl lieferte "'#99c794'" zurÃ¼ck[J

weiter in <SNR>21_get_foreground_colors[J

Zeile 3:   return [guifg, ctermfg][J

<SNR>21_get_foreground_colors lieferte "['#99c794', '114']" zurÃ¼ck[J

weiter in gitgutter#highlight#define_highlights[J

Zeile 14:       if g:gitgutter_set_sign_backgrounds[J

Zeile 15:         execute "highlight GitGutter".type." guibg=".guibg." ctermbg=".ctermbg[J

Zeile 16:       endif[J

Zeile 17:       continue[J

Zeile 12:   for type in ["Add", "Change", "Delete"][J

Zeile 13:     if hlexists("GitGutter".type) && s:get_foreground_colors("GitGutter".type) != ['NONE', 'NONE'][J

rufe <SNR>21_get_foreground_colors auf[J('GitGutterChange')

Zeile 1:   let ctermfg = s:get_hl(a:group, 'fg', 'cterm')[J

rufe <SNR>21_get_hl auf[J('GitGutterChange', 'fg', 'cterm')

Zeile 1:   let r = synIDattr(synIDtrans(hlID(a:group)), a:what, a:mode)[J

Zeile 2:   if empty(r) || r == -1[J

Zeile 3:     return 'NONE'[J

Zeile 4:   endif[J

Zeile 5:   return r[J

<SNR>21_get_hl lieferte "'68'" zurÃ¼ck[J

weiter in <SNR>21_get_foreground_colors[J

Zeile 2:   let guifg = s:get_hl(a:group, 'fg', 'gui')[J

rufe <SNR>21_get_hl auf[J('GitGutterChange', 'fg', 'gui')

Zeile 1:   let r = synIDattr(synIDtrans(hlID(a:group)), a:what, a:mode)[J

Zeile 2:   if empty(r) || r == -1[J

Zeile 3:     return 'NONE'[J

Zeile 4:   endif[J

Zeile 5:   return r[J

<SNR>21_get_hl lieferte "'#6699cc'" zurÃ¼ck[J

weiter in <SNR>21_get_foreground_colors[J

Zeile 3:   return [guifg, ctermfg][J

<SNR>21_get_foreground_colors lieferte "['#6699cc', '68']" zurÃ¼ck[J

weiter in gitgutter#highlight#define_highlights[J

Zeile 14:       if g:gitgutter_set_sign_backgrounds[J

Zeile 15:         execute "highlight GitGutter".type." guibg=".guibg." ctermbg=".ctermbg[J

Zeile 16:       endif[J

Zeile 17:       continue[J

Zeile 12:   for type in ["Add", "Change", "Delete"][J

Zeile 13:     if hlexists("GitGutter".type) && s:get_foreground_colors("GitGutter".type) != ['NONE', 'NONE'][J

rufe <SNR>21_get_foreground_colors auf[J('GitGutterDelete')

Zeile 1:   let ctermfg = s:get_hl(a:group, 'fg', 'cterm')[J

rufe <SNR>21_get_hl auf[J('GitGutterDelete', 'fg', 'cterm')

Zeile 1:   let r = synIDattr(synIDtrans(hlID(a:group)), a:what, a:mode)[J

Zeile 2:   if empty(r) || r == -1[J

Zeile 3:     return 'NONE'[J

Zeile 4:   endif[J

Zeile 5:   return r[J

<SNR>21_get_hl lieferte "'203'" zurÃ¼ck[J

weiter in <SNR>21_get_foreground_colors[J

Zeile 2:   let guifg = s:get_hl(a:group, 'fg', 'gui')[J

rufe <SNR>21_get_hl auf[J('GitGutterDelete', 'fg', 'gui')

Zeile 1:   let r = synIDattr(synIDtrans(hlID(a:group)), a:what, a:mode)[J

Zeile 2:   if empty(r) || r == -1[J

Zeile 3:     return 'NONE'[J

Zeile 4:   endif[J

Zeile 5:   return r[J

<SNR>21_get_hl lieferte "'#ec5f67'" zurÃ¼ck[J

weiter in <SNR>21_get_foreground_colors[J

Zeile 3:   return [guifg, ctermfg][J

<SNR>21_get_foreground_colors lieferte "['#ec5f67', '203']" zurÃ¼ck[J

weiter in gitgutter#highlight#define_highlights[J

Zeile 14:       if g:gitgutter_set_sign_backgrounds[J

Zeile 15:         execute "highlight GitGutter".type." guibg=".guibg." ctermbg=".ctermbg[J

Zeile 16:       endif[J

Zeile 17:       continue[J

Zeile 12:   for type in ["Add", "Change", "Delete"][J

Zeile 13:     if hlexists("GitGutter".type) && s:get_foreground_colors("GitGutter".type) != ['NONE', 'NONE'][J

Zeile 14:       if g:gitgutter_set_sign_backgrounds[J

Zeile 15:         execute "highlight GitGutter".type." guibg=".guibg." ctermbg=".ctermbg[J

Zeile 16:       endif[J

Zeile 17:       continue[J

Zeile 18:     elseif s:useful_diff_colours()[J

Zeile 19:       let [guifg, ctermfg] = s:get_foreground_colors('Diff'.type)[J

Zeile 20:     else[J

Zeile 21:       let [guifg, ctermfg] = s:get_foreground_fallback_colors(type)[J

Zeile 22:     endif[J

Zeile 23:     execute "highlight GitGutter".type." guifg=".guifg." guibg=".guibg." ctermfg=".ctermfg." ctermbg=".ctermbg[J

Zeile 24:   endfor[J

Zeile 25: [J

Zeile 26:   if hlexists("GitGutterChangeDelete") && g:gitgutter_set_sign_backgrounds[J

Zeile 27:     execute "highlight GitGutterChangeDelete guibg=".guibg." ctermbg=".ctermbg[J

Zeile 28:   endif[J

Zeile 29: [J

Zeile 30:   highlight default link GitGutterChangeDelete GitGutterChange[J

Zeile 31: [J

Zeile 32:   " Highlights used for the whole line.[J

Zeile 33: [J

Zeile 34:   highlight default link GitGutterAddLine          DiffAdd[J

Zeile 35:   highlight default link GitGutterChangeLine       DiffChange[J

Zeile 36:   highlight default link GitGutterDeleteLine       DiffDelete[J

Zeile 37:   highlight default link GitGutterChangeDeleteLine GitGutterChangeLine[J

Zeile 38: [J

Zeile 39:   highlight default link GitGutterAddLineNr          CursorLineNr[J

Zeile 40:   highlight default link GitGutterChangeLineNr       CursorLineNr[J

Zeile 41:   highlight default link GitGutterDeleteLineNr       CursorLineNr[J

Zeile 42:   highlight default link GitGutterChangeDeleteLineNr CursorLineNr[J

Zeile 43: [J

Zeile 44:   " Highlights used intra line.[J

Zeile 45:   highlight default GitGutterAddIntraLine    gui=reverse cterm=reverse[J

Zeile 46:   highlight default GitGutterDeleteIntraLine gui=reverse cterm=reverse[J

Zeile 47:   " Set diff syntax colours (used in the preview window) - diffAdded,diffChanged,diffRemoved -[J

Zeile 48:   " to match the signs, if not set aleady.[J

Zeile 49:   for [dtype,type] in [['Added','Add'], ['Changed','Change'], ['Removed','Delete']][J

Zeile 50:     if !hlexists('diff'.dtype)[J

Zeile 51:       let [guifg, ctermfg] = s:get_foreground_colors('GitGutter'.type)[J

Zeile 52:       execute "highlight diff".dtype." guifg=".guifg." ctermfg=".ctermfg." guibg=NONE ctermbg=NONE"[J

Zeile 53:     endif[J

Zeile 54:   endfor[J

Zeile 49:   for [dtype,type] in [['Added','Add'], ['Changed','Change'], ['Removed','Delete']][J

Zeile 50:     if !hlexists('diff'.dtype)[J

Zeile 51:       let [guifg, ctermfg] = s:get_foreground_colors('GitGutter'.type)[J

rufe <SNR>21_get_foreground_colors auf[J('GitGutterChange')

Zeile 1:   let ctermfg = s:get_hl(a:group, 'fg', 'cterm')[J

rufe <SNR>21_get_hl auf[J('GitGutterChange', 'fg', 'cterm')

Zeile 1:   let r = synIDattr(synIDtrans(hlID(a:group)), a:what, a:mode)[J

Zeile 2:   if empty(r) || r == -1[J

Zeile 3:     return 'NONE'[J

Zeile 4:   endif[J

Zeile 5:   return r[J

<SNR>21_get_hl lieferte "'68'" zurÃ¼ck[J

weiter in <SNR>21_get_foreground_colors[J

Zeile 2:   let guifg = s:get_hl(a:group, 'fg', 'gui')[J

rufe <SNR>21_get_hl auf[J('GitGutterChange', 'fg', 'gui')

Zeile 1:   let r = synIDattr(synIDtrans(hlID(a:group)), a:what, a:mode)[J

Zeile 2:   if empty(r) || r == -1[J

Zeile 3:     return 'NONE'[J

Zeile 4:   endif[J

Zeile 5:   return r[J

<SNR>21_get_hl lieferte "'#6699cc'" zurÃ¼ck[J

weiter in <SNR>21_get_foreground_colors[J

Zeile 3:   return [guifg, ctermfg][J

<SNR>21_get_foreground_colors lieferte "['#6699cc', '68']" zurÃ¼ck[J

weiter in gitgutter#highlight#define_highlights[J

Zeile 52:       execute "highlight diff".dtype." guifg=".guifg." ctermfg=".ctermfg." guibg=NONE ctermbg=NONE"[J

Zeile 52: highlight diffChanged guifg=#6699cc ctermfg=68 guibg=NONE ctermbg=NONE[J

Zeile 53:     endif[J

Zeile 54:   endfor[J

Zeile 49:   for [dtype,type] in [['Added','Add'], ['Changed','Change'], ['Removed','Delete']][J

Zeile 50:     if !hlexists('diff'.dtype)[J

Zeile 51:       let [guifg, ctermfg] = s:get_foreground_colors('GitGutter'.type)[J

Zeile 52:       execute "highlight diff".dtype." guifg=".guifg." ctermfg=".ctermfg." guibg=NONE ctermbg=NONE"[J

Zeile 53:     endif[J

Zeile 54:   endfor[J

Zeile 49:   for [dtype,type] in [['Added','Add'], ['Changed','Change'], ['Removed','Delete']][J

Zeile 50:     if !hlexists('diff'.dtype)[J

Zeile 51:       let [guifg, ctermfg] = s:get_foreground_colors('GitGutter'.type)[J

Zeile 52:       execute "highlight diff".dtype." guifg=".guifg." ctermfg=".ctermfg." guibg=NONE ctermbg=NONE"[J

Zeile 53:     endif[J

Zeile 54:   endfor[J

gitgutter#highlight#define_highlights lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/plugin/gitgutter.vim[J

Zeile 96: call gitgutter#highlight#define_signs()[J

rufe gitgutter#highlight#define_signs auf[J()

Zeile 1:   sign define GitGutterLineAdded[J

Zeile 2:   sign define GitGutterLineModified[J

Zeile 3:   sign define GitGutterLineRemoved[J

Zeile 4:   sign define GitGutterLineRemovedFirstLine[J

Zeile 5:   sign define GitGutterLineRemovedAboveAndBelow[J

Zeile 6:   sign define GitGutterLineModifiedRemoved[J

Zeile 7: [J

Zeile 8:   call s:define_sign_text()[J

rufe <SNR>21_define_sign_text auf[J()

Zeile 1:   execute "sign define GitGutterLineAdded                 text=" . g:gitgutter_sign_added[J

Zeile 1: sign define GitGutterLineAdded                 text=+[J

Zeile 2:   execute "sign define GitGutterLineModified              text=" . g:gitgutter_sign_modified[J

Zeile 2: sign define GitGutterLineModified              text=~[J

Zeile 3:   execute "sign define GitGutterLineRemoved               text=" . g:gitgutter_sign_removed[J

Zeile 3: sign define GitGutterLineRemoved               text=_[J

Zeile 4:   execute "sign define GitGutterLineRemovedFirstLine      text=" . g:gitgutter_sign_removed_first_line[J

Zeile 4: sign define GitGutterLineRemovedFirstLine      text=â¾[J

Zeile 5:   execute "sign define GitGutterLineRemovedAboveAndBelow  text=" . g:gitgutter_sign_removed_above_and_below[J

Zeile 5: sign define GitGutterLineRemovedAboveAndBelow  text=_Â¯[J

Zeile 6:   execute "sign define GitGutterLineModifiedRemoved       text=" . g:gitgutter_sign_modified_removed[J

Zeile 6: sign define GitGutterLineModifiedRemoved       text=~_[J

<SNR>21_define_sign_text lieferte #0 zurÃ¼ck[J

weiter in gitgutter#highlight#define_signs[J

Zeile 9:   call gitgutter#highlight#define_sign_text_highlights()[J

rufe gitgutter#highlight#define_sign_text_highlights auf[J()

Zeile 1:   " Once a sign's text attribute has been defined, it cannot be undefined or[J

Zeile 2:   " set to an empty value.  So to make signs' text disappear (when toggling[J

Zeile 3:   " off or disabling) we make them invisible by setting their foreground colours[J

Zeile 4:   " to the background's.[J

Zeile 5:   if g:gitgutter_signs[J

Zeile 6:     sign define GitGutterLineAdded                 texthl=GitGutterAdd[J

Zeile 7:     sign define GitGutterLineModified              texthl=GitGutterChange[J

Zeile 8:     sign define GitGutterLineRemoved               texthl=GitGutterDelete[J

Zeile 9:     sign define GitGutterLineRemovedFirstLine      texthl=GitGutterDelete[J

Zeile 10:     sign define GitGutterLineRemovedAboveAndBelow  texthl=GitGutterDelete[J

Zeile 11:     sign define GitGutterLineModifiedRemoved       texthl=GitGutterChangeDelete[J

Zeile 12:   else[J

Zeile 13:     sign define GitGutterLineAdded                 texthl=GitGutterAddInvisible[J

Zeile 14:     sign define GitGutterLineModified              texthl=GitGutterChangeInvisible[J

Zeile 15:     sign define GitGutterLineRemoved               texthl=GitGutterDeleteInvisible[J

Zeile 16:     sign define GitGutterLineRemovedFirstLine      texthl=GitGutterDeleteInvisible[J

Zeile 17:     sign define GitGutterLineRemovedAboveAndBelow  texthl=GitGutterDeleteInvisible[J

Zeile 18:     sign define GitGutterLineModifiedRemoved       texthl=GitGutterChangeDeleteInvisible[J

Zeile 19:   endif[J

gitgutter#highlight#define_sign_text_highlights lieferte #0 zurÃ¼ck[J

weiter in gitgutter#highlight#define_signs[J

Zeile 10:   call s:define_sign_line_highlights()[J

rufe <SNR>21_define_sign_line_highlights auf[J()

Zeile 1:   if g:gitgutter_highlight_lines[J

Zeile 2:     sign define GitGutterLineAdded                 linehl=GitGutterAddLine[J

Zeile 3:     sign define GitGutterLineModified              linehl=GitGutterChangeLine[J

Zeile 4:     sign define GitGutterLineRemoved               linehl=GitGutterDeleteLine[J

Zeile 5:     sign define GitGutterLineRemovedFirstLine      linehl=GitGutterDeleteLine[J

Zeile 6:     sign define GitGutterLineRemovedAboveAndBelow  linehl=GitGutterDeleteLine[J

Zeile 7:     sign define GitGutterLineModifiedRemoved       linehl=GitGutterChangeDeleteLine[J

Zeile 8:   else[J

Zeile 9:     sign define GitGutterLineAdded                 linehl=[J

Zeile 10:     sign define GitGutterLineModified              linehl=[J

Zeile 11:     sign define GitGutterLineRemoved               linehl=[J

Zeile 12:     sign define GitGutterLineRemovedFirstLine      linehl=[J

Zeile 13:     sign define GitGutterLineRemovedAboveAndBelow  linehl=[J

Zeile 14:     sign define GitGutterLineModifiedRemoved       linehl=[J

Zeile 15:   endif[J

<SNR>21_define_sign_line_highlights lieferte #0 zurÃ¼ck[J

weiter in gitgutter#highlight#define_signs[J

Zeile 11:   call s:define_sign_linenr_highlights()[J

rufe <SNR>21_define_sign_linenr_highlights auf[J()

Zeile 1:   if has('nvim-0.3.2')[J

Zeile 2:     try[J

Zeile 3:       if g:gitgutter_highlight_linenrs[J

Zeile 4:         sign define GitGutterLineAdded                 numhl=GitGutterAddLineNr[J

Zeile 5:         sign define GitGutterLineModified              numhl=GitGutterChangeLineNr[J

Zeile 6:         sign define GitGutterLineRemoved               numhl=GitGutterDeleteLineNr[J

Zeile 7:         sign define GitGutterLineRemovedFirstLine      numhl=GitGutterDeleteLineNr[J

Zeile 8:         sign define GitGutterLineRemovedAboveAndBelow  numhl=GitGutterDeleteLineNr[J

Zeile 9:         sign define GitGutterLineModifiedRemoved       numhl=GitGutterChangeDeleteLineNr[J

Zeile 10:       else[J

Zeile 11:         sign define GitGutterLineAdded                 numhl=[J

Zeile 12:         sign define GitGutterLineModified              numhl=[J

Zeile 13:         sign define GitGutterLineRemoved               numhl=[J

Zeile 14:         sign define GitGutterLineRemovedFirstLine      numhl=[J

Zeile 15:         sign define GitGutterLineRemovedAboveAndBelow  numhl=[J

Zeile 16:         sign define GitGutterLineModifiedRemoved       numhl=[J

Zeile 17:       endif[J

Zeile 18:     catch /E475/[J

Zeile 19:     endtry[J

Zeile 20:   endif[J

<SNR>21_define_sign_linenr_highlights lieferte #0 zurÃ¼ck[J

weiter in gitgutter#highlight#define_signs[J

gitgutter#highlight#define_signs lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/plugin/gitgutter.vim[J

Zeile 97: [J

Zeile 98: " Prevent infinite loop where:[J

Zeile 99: " - executing a job in the foreground launches a new window which takes the focus;[J

Zeile 100: " - when the job finishes, focus returns to gvim;[J

Zeile 101: " - the FocusGained event triggers a new job (see below).[J

Zeile 102: if gitgutter#utility#windows() && !(g:gitgutter_async && gitgutter#async#available())[J

rufe gitgutter#utility#windows auf[J()

Zeile 1:   return has('win64') || has('win32') || has('win16')[J

gitgutter#utility#windows lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/plugin/gitgutter.vim[J

Zeile 103:   set noshelltemp[J

Zeile 104: endif[J

Zeile 105: [J

Zeile 106: " }}}[J

Zeile 107: [J

Zeile 108: " Primary functions {{{[J

Zeile 109: [J

Zeile 110: command! -bar GitGutterAll call gitgutter#all(1)[J

Zeile 111: command! -bar GitGutter    call gitgutter#process_buffer(bufnr(''), 1)[J

Zeile 112: [J

Zeile 113: command! -bar GitGutterDisable call gitgutter#disable()[J

Zeile 114: command! -bar GitGutterEnable  call gitgutter#enable()[J

Zeile 115: command! -bar GitGutterToggle  call gitgutter#toggle()[J

Zeile 116: [J

Zeile 117: command! -bar GitGutterBufferDisable call gitgutter#buffer_disable()[J

Zeile 118: command! -bar GitGutterBufferEnable  call gitgutter#buffer_enable()[J

Zeile 119: command! -bar GitGutterBufferToggle  call gitgutter#buffer_toggle()[J

Zeile 120: [J

Zeile 121: command! -bar GitGutterQuickFix call gitgutter#quickfix(0)[J

Zeile 122: command! -bar GitGutterQuickFixCurrentFile call gitgutter#quickfix(1)[J

Zeile 123: [J

Zeile 124: " }}}[J

Zeile 125: [J

Zeile 126: " Line highlights {{{[J

Zeile 127: [J

Zeile 128: command! -bar GitGutterLineHighlightsDisable call gitgutter#highlight#line_disable()[J

Zeile 129: command! -bar GitGutterLineHighlightsEnable  call gitgutter#highlight#line_enable()[J

Zeile 130: command! -bar GitGutterLineHighlightsToggle  call gitgutter#highlight#line_toggle()[J

Zeile 131: [J

Zeile 132: " }}}[J

Zeile 133: [J

Zeile 134: " 'number' column highlights {{{[J

Zeile 135: command! -bar GitGutterLineNrHighlightsDisable call gitgutter#highlight#linenr_disable()[J

Zeile 136: command! -bar GitGutterLineNrHighlightsEnable  call gitgutter#highlight#linenr_enable()[J

Zeile 137: command! -bar GitGutterLineNrHighlightsToggle  call gitgutter#highlight#linenr_toggle()[J

Zeile 138: " }}}[J

Zeile 139: [J

Zeile 140: " Signs {{{[J

Zeile 141: [J

Zeile 142: command! -bar GitGutterSignsEnable  call gitgutter#sign#enable()[J

Zeile 143: command! -bar GitGutterSignsDisable call gitgutter#sign#disable()[J

Zeile 144: command! -bar GitGutterSignsToggle  call gitgutter#sign#toggle()[J

Zeile 145: [J

Zeile 146: " }}}[J

Zeile 147: [J

Zeile 148: " Hunks {{{[J

Zeile 149: [J

Zeile 150: command! -bar -count=1 GitGutterNextHunk call gitgutter#hunk#next_hunk(<count>)[J

Zeile 151: command! -bar -count=1 GitGutterPrevHunk call gitgutter#hunk#prev_hunk(<count>)[J

Zeile 152: [J

Zeile 153: command! -bar -range=% GitGutterStageHunk call gitgutter#hunk#stage(<line1>,<line2>)[J

Zeile 154: command! -bar GitGutterUndoHunk    call gitgutter#hunk#undo()[J

Zeile 155: command! -bar GitGutterPreviewHunk call gitgutter#hunk#preview()[J

Zeile 156: [J

Zeile 157: " Hunk text object[J

Zeile 158: onoremap <silent> <Plug>(GitGutterTextObjectInnerPending) :<C-U>call gitgutter#hunk#text_object(1)<CR>[J

Zeile 159: onoremap <silent> <Plug>(GitGutterTextObjectOuterPending) :<C-U>call gitgutter#hunk#text_object(0)<CR>[J

Zeile 160: xnoremap <silent> <Plug>(GitGutterTextObjectInnerVisual)  :<C-U>call gitgutter#hunk#text_object(1)<CR>[J

Zeile 161: xnoremap <silent> <Plug>(GitGutterTextObjectOuterVisual)  :<C-U>call gitgutter#hunk#text_object(0)<CR>[J

Zeile 162: [J

Zeile 163: [J

Zeile 164: " Returns the git-diff hunks for the file or an empty list if there[J

Zeile 165: " aren't any hunks.[J

Zeile 166: "[J

Zeile 167: " The return value is a list of lists.  There is one inner list per hunk.[J

Zeile 168: "[J

Zeile 169: "   [[J

Zeile 170: "     [from_line, from_count, to_line, to_count],[J

Zeile 171: "     [from_line, from_count, to_line, to_count],[J

Zeile 172: "     ...[J

Zeile 173: "   ][J

Zeile 174: "[J

Zeile 175: " where:[J

Zeile 176: "[J

Zeile 177: " `from`  - refers to the staged file[J

Zeile 178: " `to`    - refers to the working tree's file[J

Zeile 179: " `line`  - refers to the line number where the change starts[J

Zeile 180: " `count` - refers to the number of lines the change covers[J

Zeile 181: function! GitGutterGetHunks()[J

Zeile 185: [J

Zeile 186: " Returns an array that contains a summary of the hunk status for the current[J

Zeile 187: " window.  The format is [ added, modified, removed ], where each value[J

Zeile 188: " represents the number of lines added/modified/removed respectively.[J

Zeile 189: function! GitGutterGetHunkSummary()[J

Zeile 192: [J

Zeile 193: " }}}[J

Zeile 194: [J

Zeile 195: " Folds {{{[J

Zeile 196: [J

Zeile 197: command! -bar GitGutterFold call gitgutter#fold#toggle()[J

Zeile 198: [J

Zeile 199: " }}}[J

Zeile 200: [J

Zeile 201: command! -bar GitGutterDebug call gitgutter#debug#debug()[J

Zeile 202: [J

Zeile 203: " Maps {{{[J

Zeile 204: [J

Zeile 205: nnoremap <silent> <expr> <Plug>(GitGutterNextHunk) &diff ? ']c' : ":\<C-U>execute v:count1 . 'GitGutterNextHunk'\<CR>"[J

Zeile 206: nnoremap <silent> <expr> <Plug>GitGutterNextHunk   &diff ? ']c' : ":\<C-U>call gitgutter#utility#warn('Please change your map \<lt>Plug>GitGutterNextHunk to \<lt>Plug>(GitGutterNextHunk)')\<CR>"[J

Zeile 207: nnoremap <silent> <expr> <Plug>(GitGutterPrevHunk) &diff ? '[c' : ":\<C-U>execute v:count1 . 'GitGutterPrevHunk'\<CR>"[J

Zeile 208: nnoremap <silent> <expr> <Plug>GitGutterPrevHunk   &diff ? '[c' : ":\<C-U>call gitgutter#utility#warn('Please change your map \<lt>Plug>GitGutterPrevHunk to \<lt>Plug>(GitGutterPrevHunk)')\<CR>"[J

Zeile 209: [J

Zeile 210: xnoremap <silent> <Plug>(GitGutterStageHunk)   :GitGutterStageHunk<CR>[J

Zeile 211: xnoremap <silent> <Plug>GitGutterStageHunk     :call gitgutter#utility#warn('Please change your map <lt>Plug>GitGutterStageHunk to <lt>Plug>(GitGutterStageHunk)')<CR>[J

Zeile 212: nnoremap <silent> <Plug>(GitGutterStageHunk)   :GitGutterStageHunk<CR>[J

Zeile 213: nnoremap <silent> <Plug>GitGutterStageHunk     :call gitgutter#utility#warn('Please change your map <lt>Plug>GitGutterStageHunk to <lt>Plug>(GitGutterStageHunk)')<CR>[J

Zeile 214: nnoremap <silent> <Plug>(GitGutterUndoHunk)    :GitGutterUndoHunk<CR>[J

Zeile 215: nnoremap <silent> <Plug>GitGutterUndoHunk      :call gitgutter#utility#warn('Please change your map <lt>Plug>GitGutterUndoHunk to <lt>Plug>(GitGutterUndoHunk)')<CR>[J

Zeile 216: nnoremap <silent> <Plug>(GitGutterPreviewHunk) :GitGutterPreviewHunk<CR>[J

Zeile 217: nnoremap <silent> <Plug>GitGutterPreviewHunk   :call gitgutter#utility#warn('Please change your map <lt>Plug>GitGutterPreviewHunk to <lt>Plug>(GitGutterPreviewHunk)')<CR>[J

Zeile 218: [J

Zeile 219: " }}}[J

Zeile 220: [J

Zeile 221: function! s:on_bufenter()[J

Zeile 246: [J

Zeile 247: function! GitGutterCursorHold(timer)[J

Zeile 250: [J

Zeile 251: " Autocommands {{{[J

Zeile 252: [J

Zeile 253: augroup gitgutter[J

Zeile 254:   autocmd![J

Zeile 255: [J

Zeile 256:   autocmd TabEnter * let t:gitgutter_didtabenter = 1[J

Zeile 257: [J

Zeile 258:   autocmd BufEnter * call s:on_bufenter()[J

Zeile 259: [J

Zeile 260:   " Ensure Vim is always checking for CursorMoved to avoid CursorMoved[J

Zeile 261:   " being fired at the wrong time in floating preview window on Neovim.[J

Zeile 262:   " See vim/vim#2053.[J

Zeile 263:   autocmd CursorMoved * execute ''[J

Zeile 264: [J

Zeile 265:   autocmd CursorHold,CursorHoldI * call gitgutter#process_buffer(bufnr(''), 0)[J

Zeile 266:   if exists('*timer_start') && has('lambda')[J

Zeile 267:     autocmd FileChangedShellPost * call timer_start(1, {-> gitgutter#process_buffer(bufnr(''), 1)})[J

Zeile 268:   else[J

Zeile 269:     autocmd FileChangedShellPost * call gitgutter#process_buffer(bufnr(''), 1)[J

Zeile 270:   endif[J

Zeile 271: [J

Zeile 272:   " Ensure that all buffers are processed when opening vim with multiple files, e.g.:[J

Zeile 273:   "[J

Zeile 274:   "   vim -o file1 file2[J

Zeile 275:   autocmd VimEnter * if winnr() != winnr('$') | call gitgutter#all(0) | endif[J

Zeile 276: [J

Zeile 277:   autocmd ShellCmdPost * call gitgutter#all(1)[J

Zeile 278:   autocmd BufLeave term://* call gitgutter#all(1)[J

Zeile 279: [J

Zeile 280:   autocmd User FugitiveChanged call gitgutter#all(1)[J

Zeile 281: [J

Zeile 282:   autocmd BufFilePre  * GitGutterBufferDisable[J

Zeile 283:   autocmd BufFilePost * GitGutterBufferEnable[J

Zeile 284: [J

Zeile 285:   " Handle all buffers when focus is gained, but only after it was lost.[J

Zeile 286:   " FocusGained gets triggered on startup with Neovim at least already.[J

Zeile 287:   " Therefore this tracks also if it was lost before.[J

Zeile 288:   let s:focus_was_lost = 0[J

Zeile 289:   autocmd FocusGained * if s:focus_was_lost | let s:focus_was_lost = 0 | call gitgutter#all(1) | endif[J

Zeile 290:   autocmd FocusLost * let s:focus_was_lost = 1[J

Zeile 291: [J

Zeile 292:   if exists('##VimResume')[J

Zeile 293:     autocmd VimResume * call gitgutter#all(1)[J

Zeile 294:   endif[J

Zeile 295: [J

Zeile 296:   autocmd ColorScheme * call gitgutter#highlight#define_highlights()[J

Zeile 297: [J

Zeile 298:   " Disable during :vimgrep[J

Zeile 299:   autocmd QuickFixCmdPre  *vimgrep* let [g:gitgutter_was_enabled, g:gitgutter_enabled] = [g:gitgutter_enabled, 0][J

Zeile 300:   autocmd QuickFixCmdPost *vimgrep* let g:gitgutter_enabled = g:gitgutter_was_enabled | unlet g:gitgutter_was_enabled[J

Zeile 301: augroup END[J

Zeile 302: [J

Zeile 303: " }}}[J

Zeile 304: [J

Zeile 305: " vim:set et sw=2 fdm=marker:[J

Lesen von /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/plugin/gitgutter.vim beendet[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight/plugin/**/*.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/plugin/**/*.vim"[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/plugin)[J
fchdir() to previous dir[J
lese "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/plugin/bufkill.vim"[J
Zeile 1: " bufkill.vim[J

Zeile 2: " Maintainer:^IJohn Orr (john undersc0re orr yah00 c0m)[J

Zeile 3: " Version:^I1.14[J

Zeile 4: " Last Change:^I29 Apr 2020[J

Zeile 5: [J

Zeile 6: " Credits:[J

Zeile 7: " Lucas Arantes and others for helping resolve a long-standing, hopefully[J

Zeile 8: "   spurious warning[J

Zeile 9: " David Emett - for some major bug fixes and logic improvements.[J

Zeile 10: "               (I'm still most impressed you understood the thing)[J

Zeile 11: " D Barsam, and others, for suggestions about optional mappings and commands.[J

Zeile 12: " Dimitar Dimitrov - for improvements in mappings and robustness[J

Zeile 13: " A few people who pointed out bugs I'd fixed but not made public.[J

Zeile 14: " Magnus Thor Torfason - for improvements relating to the 'confirm' setting.[J

Zeile 15: " Keith Roberts - for many hours of email discussions, ideas and suggestions[J

Zeile 16: "   to try to get the details as good as possible.[J

Zeile 17: " Someone from http://www.cs.albany.edu, who described the functionality of[J

Zeile 18: "   this script in tip #622.[J

Zeile 19: [J

Zeile 20: " Possible Improvements:[J

Zeile 21: " If you're particularly interested in any of these, let me know - some are[J

Zeile 22: " definitely planned to happen when time permits:[J

Zeile 23: "[J

Zeile 24: " - Provide a function to save window variables as global variables,[J

Zeile 25: "   in order to have them preserved by session saving/restoring commands,[J

Zeile 26: "   and then restore the globals to window variables with another function.[J

Zeile 27: "[J

Zeile 28: " Changelog:[J

Zeile 29: " 1.14 - Convert warning to debug message for certain types of buffers, which[J

Zeile 30: "        appear to be un-named, eg floating windows for fzf in neovim,[J

Zeile 31: "        tabnew, and no doubt others.[J

Zeile 32: " 1.13 - Improve error message behaviour thanks to louwers@github.[J

Zeile 33: "        Fix error when debug enabled thanks to nkgm@github and pavoljuhas@github.[J

Zeile 34: " 1.12 - Convert to bundle format prior to uploading to github[J

Zeile 35: " 1.11 - Major bug fixes by David Emett, especially relating to[J

Zeile 36: "        the creation of new buffers when the last buffer is killed.[J

Zeile 37: "        Also improved restoring of column on console vim.[J

Zeile 38: "        Key mappings can be disabled by setting g:BufKillCreateMappings to 0[J

Zeile 39: " 1.10 - Various fixes, eg relating to quicklists[J

Zeile 40: " 1.9  - Remove unnecessary mapping delays, and a debug message[J

Zeile 41: " 1.8  - Improved mapping handling, and robustness[J

Zeile 42: " 1.7  - Minor improvements.[J

Zeile 43: " 1.6  - Added (opt-in) Ctrl-^ override support to preserve cursor column[J

Zeile 44: " 1.5  - Improved honouring of the 'confirm' vim option.[J

Zeile 45: " 1.4  - Add buffer navigation, support for scratch buffer removal[J

Zeile 46: " 1.3  - Convert to vim 7 lists instead of string-based lists[J

Zeile 47: " 1.2  - Add column-saving support, to ensure returning to a buffer means[J

Zeile 48: "        positioning the cursor not only at the right line, but also column,[J

Zeile 49: "        and prompting the user when removing modified buffers[J

Zeile 50: " 1.1  - Fix handling of modified, un-named buffers[J

Zeile 51: " 1.0  - initial functionality[J

Zeile 52: "[J

Zeile 53: " Implementation Notes:[J

Zeile 54: " w:BufKillList stores the list of buffers accessed so far, in order[J

Zeile 55: "      of most recent access, for each respective window.[J

Zeile 56: " w:BufKillColumnList store the list of columns the cursor was in when[J

Zeile 57: "      a buffer was left.  It follows that since w:BufKillList lists[J

Zeile 58: "      all buffers ever entered, but w:BufKillColumnList lists columns[J

Zeile 59: "      only for those exited, the latter is expected to be one element[J

Zeile 60: "      shorted than the former (since the current buffer should only be[J

Zeile 61: "      entered, but not yet exited).[J

Zeile 62: " w:BufKillIndex stores the current index into the w:BufKillList array[J

Zeile 63: [J

Zeile 64: " Reload guard and 'compatible' handling {{{1[J

Zeile 65: let s:save_cpo = &cpo[J

Zeile 66: set cpo&vim[J

Zeile 67: [J

Zeile 68: if v:version < 700[J

Zeile 69:   echoe "bufkill.vim requires vim version 7.00 or greater (mainly because it uses the new lists functionality)"[J

Zeile 70:   finish[J

Zeile 71: endif[J

Zeile 72: [J

Zeile 73: if exists("loaded_bufkill")[J

Zeile 74:   if !exists('g:Debug')[J

Zeile 75:   finish[J

Zeile 76:   endif " Debug[J

Zeile 77: endif[J

Zeile 78: let loaded_bufkill = 1[J

Zeile 79: [J

Zeile 80: function! s:Debug(level, ...) "{{{1[J

Zeile 120: [J

Zeile 121: " User configurable variables {{{1[J

Zeile 122: " The following variables can be set in your .vimrc/_vimrc file to override[J

Zeile 123: " those in this file, such that upgrades to the script won't require you to[J

Zeile 124: " re-edit these variables.[J

Zeile 125: [J

Zeile 126: " g:BufKillActionWhenBufferDisplayedInAnotherWindow {{{2[J

Zeile 127: " If the buffer you are attempting to kill in one window is also displayed[J

Zeile 128: " in another, you may not want to kill it afterall.  This option lets you[J

Zeile 129: " decide how this situation should be handled, and can take one of the following[J

Zeile 130: " values:[J

Zeile 131: "   'kill' - kill the buffer regardless, always[J

Zeile 132: "   'confirm' - ask for confirmation before removing it[J

Zeile 133: "   'cancel' - don't kill it[J

Zeile 134: " Regardless of the setting of this variable, the buffer will always be[J

Zeile 135: " killed if you add an exclamation mark to the command, eg :BD![J

Zeile 136: if !exists('g:BufKillActionWhenBufferDisplayedInAnotherWindow')[J

Zeile 137:   let g:BufKillActionWhenBufferDisplayedInAnotherWindow = 'confirm'[J

Zeile 138: endif[J

Zeile 139: call s:Debug(2, 'g:BufKillActionWhenBufferDisplayedInAnotherWindow')[J

rufe <SNR>22_Debug auf[J(2, 'g:BufKillActionWhenBufferDisplayedInAnotherWindow')

Zeile 1:   " Arguments: First argument is always a level value                                (Debug)[J

Zeile 2:   " Subsequent arguments can be any type.                                            (Debug)[J

Zeile 3:   " If they are a string, and that string represents the name of a global            (Debug)[J

Zeile 4:   " variable, the variable name, and it's value, will be printed.                    (Debug)[J

Zeile 5:   " Lists and dictionaries should be handled.                                        (Debug)[J

Zeile 6:   if !exists('g:Debug') || g:Debug < a:level                                       " (Debug)[J

Zeile 7:     return " (Debug) "[J

<SNR>22_Debug lieferte "' (Debug) '" zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/plugin/bufkill.vim[J

Zeile 140: [J

Zeile 141: " g:BufKillFunctionSelectingValidBuffersToDisplay {{{2[J

Zeile 142: " When a buffer is removed from a window, the script finds the previous[J

Zeile 143: " buffer displayed in the window.  However, that buffer may have been[J

Zeile 144: " unloaded/deleted/wiped by some other mechanism, so it may not be a[J

Zeile 145: " valid choice.  For some people, an unloaded buffer may be a valid choice,[J

Zeile 146: " for others, no.[J

Zeile 147: " - If unloaded buffers should be displayed, set this[J

Zeile 148: "   variable to 'bufexists'.[J

Zeile 149: " - If unloaded buffers should not be displayed, set this[J

Zeile 150: "   variable to 'buflisted' (default).[J

Zeile 151: " - Setting this variable to 'auto' means that the command :BW will use[J

Zeile 152: "   'bufexists' to decide if a buffer is valid to display, whilst using[J

Zeile 153: "   :BD or :BUN will use 'buflisted'[J

Zeile 154: if !exists('g:BufKillFunctionSelectingValidBuffersToDisplay')[J

Zeile 155:   let g:BufKillFunctionSelectingValidBuffersToDisplay = 'buflisted'[J

Zeile 156: endif[J

Zeile 157: call s:Debug(2, 'g:BufKillFunctionSelectingValidBuffersToDisplay')[J

rufe <SNR>22_Debug auf[J(2, 'g:BufKillFunctionSelectingValidBuffersToDisplay')

Zeile 1:   " Arguments: First argument is always a level value                                (Debug)[J

Zeile 2:   " Subsequent arguments can be any type.                                            (Debug)[J

Zeile 3:   " If they are a string, and that string represents the name of a global            (Debug)[J

Zeile 4:   " variable, the variable name, and it's value, will be printed.                    (Debug)[J

Zeile 5:   " Lists and dictionaries should be handled.                                        (Debug)[J

Zeile 6:   if !exists('g:Debug') || g:Debug < a:level                                       " (Debug)[J

Zeile 7:     return " (Debug) "[J

<SNR>22_Debug lieferte "' (Debug) '" zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/plugin/bufkill.vim[J

Zeile 158: [J

Zeile 159: " g:BufKillActionWhenModifiedFileToBeKilled {{{2[J

Zeile 160: " When a request is made to kill (wipe, delete, or unload) a modified buffer[J

Zeile 161: " and the "bang" (!) wasn't included in the commend, two possibilities exist:[J

Zeile 162: " 1) Fail in the same way as :bw or :bd would, or[J

Zeile 163: " 2) Prompt the user to save, not save, or cancel the request.[J

Zeile 164: " Possible values are 'fail' (for options 1), and 'confirm' for option 2[J

Zeile 165: " This is similar to the vim 'confirm' option.  Thus, if this variable[J

Zeile 166: " isn't defined, the 'confirm' setting will be adopted.  Since we want[J

Zeile 167: " the most current value of 'confirm', no default value need be set[J

Zeile 168: " for this variable, and it needn't exist.[J

Zeile 169: [J

Zeile 170: " g:BufKillOverrideCtrlCaret {{{2[J

Zeile 171: " The standard vim functionality for Ctrl-^ or Ctrl-6 (swap to alternate[J

Zeile 172: " buffer) swaps to the alternate file, and preserves the line within that file,[J

Zeile 173: " but does not preserve the column within the line - instead it goes to the[J

Zeile 174: " start of the line.  If you prefer to go to the same column as well,[J

Zeile 175: " set this variable to 1.[J

Zeile 176: if !exists('g:BufKillOverrideCtrlCaret')[J

Zeile 177:   let g:BufKillOverrideCtrlCaret = 0[J

Zeile 178: endif[J

Zeile 179: call s:Debug(2, 'g:BufKillOverrideCtrlCaret')[J

rufe <SNR>22_Debug auf[J(2, 'g:BufKillOverrideCtrlCaret')

Zeile 1:   " Arguments: First argument is always a level value                                (Debug)[J

Zeile 2:   " Subsequent arguments can be any type.                                            (Debug)[J

Zeile 3:   " If they are a string, and that string represents the name of a global            (Debug)[J

Zeile 4:   " variable, the variable name, and it's value, will be printed.                    (Debug)[J

Zeile 5:   " Lists and dictionaries should be handled.                                        (Debug)[J

Zeile 6:   if !exists('g:Debug') || g:Debug < a:level                                       " (Debug)[J

Zeile 7:     return " (Debug) "[J

<SNR>22_Debug lieferte "' (Debug) '" zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/plugin/bufkill.vim[J

Zeile 180: [J

Zeile 181: " g:BufKillVerbose {{{2[J

Zeile 182: " If set to 1, prints extra info about what's being done, why, and how to[J

Zeile 183: " change it[J

Zeile 184: if !exists('g:BufKillVerbose')[J

Zeile 185:   let g:BufKillVerbose = 1[J

Zeile 186: endif[J

Zeile 187: call s:Debug(2, 'g:BufKillVerbose')[J

rufe <SNR>22_Debug auf[J(2, 'g:BufKillVerbose')

Zeile 1:   " Arguments: First argument is always a level value                                (Debug)[J

Zeile 2:   " Subsequent arguments can be any type.                                            (Debug)[J

Zeile 3:   " If they are a string, and that string represents the name of a global            (Debug)[J

Zeile 4:   " variable, the variable name, and it's value, will be printed.                    (Debug)[J

Zeile 5:   " Lists and dictionaries should be handled.                                        (Debug)[J

Zeile 6:   if !exists('g:Debug') || g:Debug < a:level                                       " (Debug)[J

Zeile 7:     return " (Debug) "[J

<SNR>22_Debug lieferte "' (Debug) '" zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/plugin/bufkill.vim[J

Zeile 188: [J

Zeile 189: " g:BufKillCreateMappings {{{2[J

Zeile 190: " If set to 1, creates the various mapleader-based mappings.  By default this[J

Zeile 191: " is set to 1 ('true') but users may want to set to 0 ('false') in order to[J

Zeile 192: " define their own mappings or to fix a mapping conflict with another plugin.[J

Zeile 193: if !exists('g:BufKillCreateMappings')[J

Zeile 194:   let g:BufKillCreateMappings = 1[J

Zeile 195: endif[J

Zeile 196: call s:Debug(2, 'g:BufKillCreateMappings')[J

rufe <SNR>22_Debug auf[J(2, 'g:BufKillCreateMappings')

Zeile 1:   " Arguments: First argument is always a level value                                (Debug)[J

Zeile 2:   " Subsequent arguments can be any type.                                            (Debug)[J

Zeile 3:   " If they are a string, and that string represents the name of a global            (Debug)[J

Zeile 4:   " variable, the variable name, and it's value, will be printed.                    (Debug)[J

Zeile 5:   " Lists and dictionaries should be handled.                                        (Debug)[J

Zeile 6:   if !exists('g:Debug') || g:Debug < a:level                                       " (Debug)[J

Zeile 7:     return " (Debug) "[J

<SNR>22_Debug lieferte "' (Debug) '" zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/plugin/bufkill.vim[J

Zeile 197: [J

Zeile 198: " g:BufKillCommandPrefix {{{2[J

Zeile 199: " A string that will act as the prefix to all BufKill user commands.  The[J

Zeile 200: " string must adhere to the user command guidelines established in the vim[J

Zeile 201: " help (see :help user-commands).  By default this is set to 'B' but users[J

Zeile 202: " may want to change this in order to define their own commands or to fix[J

Zeile 203: " a command conflict with another plugin.[J

Zeile 204: if !exists('g:BufKillCommandPrefix')[J

Zeile 205:   let g:BufKillCommandPrefix = 'B'[J

Zeile 206: endif[J

Zeile 207: call s:Debug(2, 'g:BufKillCommandPrefix')[J

rufe <SNR>22_Debug auf[J(2, 'g:BufKillCommandPrefix')

Zeile 1:   " Arguments: First argument is always a level value                                (Debug)[J

Zeile 2:   " Subsequent arguments can be any type.                                            (Debug)[J

Zeile 3:   " If they are a string, and that string represents the name of a global            (Debug)[J

Zeile 4:   " variable, the variable name, and it's value, will be printed.                    (Debug)[J

Zeile 5:   " Lists and dictionaries should be handled.                                        (Debug)[J

Zeile 6:   if !exists('g:Debug') || g:Debug < a:level                                       " (Debug)[J

Zeile 7:     return " (Debug) "[J

<SNR>22_Debug lieferte "' (Debug) '" zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/plugin/bufkill.vim[J

Zeile 208: [J

Zeile 209: " Commands {{{1[J

Zeile 210: "[J

Zeile 211: function! <SID>CreateUniqueCommand(lhs, rhs)[J

Zeile 217: call <SID>CreateUniqueCommand('A'   , ':call <SID>GotoBuffer(''#'',"<bang>")')[J

rufe <SNR>22_CreateUniqueCommand auf[J('A', ':call <SID>GotoBuffer(''#'',"<bang>")')

Zeile 1:   let command = g:BufKillCommandPrefix.a:lhs[J

Zeile 2:   if exists(':'.command) < 2[J

Zeile 3:     exe 'command -bang '.command.' '.a:rhs[J

Zeile 3: command -bang BA :call <SID>GotoBuffer('#',"<bang>")[J

Zeile 4:   endif[J

<SNR>22_CreateUniqueCommand lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/plugin/bufkill.vim[J

Zeile 218: call <SID>CreateUniqueCommand('B'   , ':call <SID>GotoBuffer(''bufback'',"<bang>")')[J

rufe <SNR>22_CreateUniqueCommand auf[J('B', ':call <SID>GotoBuffer(''bufback'',"<bang>")')

Zeile 1:   let command = g:BufKillCommandPrefix.a:lhs[J

Zeile 2:   if exists(':'.command) < 2[J

Zeile 3:     exe 'command -bang '.command.' '.a:rhs[J

Zeile 3: command -bang BB :call <SID>GotoBuffer('bufback',"<bang>")[J

Zeile 4:   endif[J

<SNR>22_CreateUniqueCommand lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/plugin/bufkill.vim[J

Zeile 219: call <SID>CreateUniqueCommand('F'   , ':call <SID>GotoBuffer(''bufforward'',"<bang>")')[J

rufe <SNR>22_CreateUniqueCommand auf[J('F', ':call <SID>GotoBuffer(''bufforward'',"<bang>")')

Zeile 1:   let command = g:BufKillCommandPrefix.a:lhs[J

Zeile 2:   if exists(':'.command) < 2[J

Zeile 3:     exe 'command -bang '.command.' '.a:rhs[J

Zeile 3: command -bang BF :call <SID>GotoBuffer('bufforward',"<bang>")[J

Zeile 4:   endif[J

<SNR>22_CreateUniqueCommand lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/plugin/bufkill.vim[J

Zeile 220: call <SID>CreateUniqueCommand('D'   , ':call <SID>BufKill(''bd'',"<bang>")')[J

rufe <SNR>22_CreateUniqueCommand auf[J('D', ':call <SID>BufKill(''bd'',"<bang>")')

Zeile 1:   let command = g:BufKillCommandPrefix.a:lhs[J

Zeile 2:   if exists(':'.command) < 2[J

Zeile 3:     exe 'command -bang '.command.' '.a:rhs[J

Zeile 3: command -bang BD :call <SID>BufKill('bd',"<bang>")[J

Zeile 4:   endif[J

<SNR>22_CreateUniqueCommand lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/plugin/bufkill.vim[J

Zeile 221: call <SID>CreateUniqueCommand('UN'  , ':call <SID>BufKill(''bun'',"<bang>")')[J

rufe <SNR>22_CreateUniqueCommand auf[J('UN', ':call <SID>BufKill(''bun'',"<bang>")')

Zeile 1:   let command = g:BufKillCommandPrefix.a:lhs[J

Zeile 2:   if exists(':'.command) < 2[J

Zeile 3:     exe 'command -bang '.command.' '.a:rhs[J

Zeile 3: command -bang BUN :call <SID>BufKill('bun',"<bang>")[J

Zeile 4:   endif[J

<SNR>22_CreateUniqueCommand lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/plugin/bufkill.vim[J

Zeile 222: call <SID>CreateUniqueCommand('D'   , ':call <SID>BufKill(''bd'',"<bang>")')[J

rufe <SNR>22_CreateUniqueCommand auf[J('D', ':call <SID>BufKill(''bd'',"<bang>")')

Zeile 1:   let command = g:BufKillCommandPrefix.a:lhs[J

Zeile 2:   if exists(':'.command) < 2[J

Zeile 3:     exe 'command -bang '.command.' '.a:rhs[J

Zeile 4:   endif[J

<SNR>22_CreateUniqueCommand lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/plugin/bufkill.vim[J

Zeile 223: call <SID>CreateUniqueCommand('W'   , ':call <SID>BufKill(''bw'',"<bang>")')[J

rufe <SNR>22_CreateUniqueCommand auf[J('W', ':call <SID>BufKill(''bw'',"<bang>")')

Zeile 1:   let command = g:BufKillCommandPrefix.a:lhs[J

Zeile 2:   if exists(':'.command) < 2[J

Zeile 3:     exe 'command -bang '.command.' '.a:rhs[J

Zeile 3: command -bang BW :call <SID>BufKill('bw',"<bang>")[J

Zeile 4:   endif[J

<SNR>22_CreateUniqueCommand lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/plugin/bufkill.vim[J

Zeile 224: call <SID>CreateUniqueCommand('UNDO', ':call <SID>UndoKill()')[J

rufe <SNR>22_CreateUniqueCommand auf[J('UNDO', ':call <SID>UndoKill()')

Zeile 1:   let command = g:BufKillCommandPrefix.a:lhs[J

Zeile 2:   if exists(':'.command) < 2[J

Zeile 3:     exe 'command -bang '.command.' '.a:rhs[J

Zeile 3: command -bang BUNDO :call <SID>UndoKill()[J

Zeile 4:   endif[J

<SNR>22_CreateUniqueCommand lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/plugin/bufkill.vim[J

Zeile 225: [J

Zeile 226: " Keyboard mappings {{{1[J

Zeile 227: "[J

Zeile 228: [J

Zeile 229: noremap <Plug>BufKillAlt         :call <SID>GotoBuffer('#', '')<CR>[J

Zeile 230: noremap <Plug>BufKillBangAlt     :call <SID>GotoBuffer('#', '!')<CR>[J

Zeile 231: noremap <Plug>BufKillBack        :call <SID>GotoBuffer('bufback', '')<CR>[J

Zeile 232: noremap <Plug>BufKillBangBack    :call <SID>GotoBuffer('bufback', '!')<CR>[J

Zeile 233: noremap <Plug>BufKillForward     :call <SID>GotoBuffer('bufforward', '')<CR>[J

Zeile 234: noremap <Plug>BufKillBangForward :call <SID>GotoBuffer('bufforward', '!')<CR>[J

Zeile 235: noremap <Plug>BufKillBun         :call <SID>BufKill('bun', '')<CR>[J

Zeile 236: noremap <Plug>BufKillBangBun     :call <SID>BufKill('bun', '!')<CR>[J

Zeile 237: noremap <Plug>BufKillBd          :call <SID>BufKill('bd', '')<CR>[J

Zeile 238: noremap <Plug>BufKillBangBd      :call <SID>BufKill('bd', '!')<CR>[J

Zeile 239: noremap <Plug>BufKillBw          :call <SID>BufKill('bw', '')<CR>[J

Zeile 240: noremap <Plug>BufKillBangBw      :call <SID>BufKill('bw', '!')<CR>[J

Zeile 241: noremap <Plug>BufKillUndo        :call <SID>UndoKill()<CR>[J

Zeile 242:   [J

Zeile 243: if g:BufKillCreateMappings == 1[J

Zeile 244: [J

Zeile 245:   function! <SID>CreateUniqueMapping(lhs, rhs, ...)[J

Zeile 255: [J

Zeile 256:   call <SID>CreateUniqueMapping('<Leader>bb',   '<Plug>BufKillBack')[J

rufe <SNR>22_CreateUniqueMapping auf[J('<Leader>bb', '<Plug>BufKillBack')

Zeile 1:     if hasmapto(a:rhs) && !(a:0 == 1 && a:1 == 'AllowDuplicate')[J

Zeile 2:       " The user appears to have defined an alternate mapping for this command[J

Zeile 3:       return[J

Zeile 4:     elseif maparg(a:lhs, 'n') != ""[J

Zeile 5:       " The user appears to have defined a mapping for a:lhs already[J

Zeile 6:       return[J

Zeile 7:     endif[J

Zeile 8:     exec 'nmap <silent> <unique> '.a:lhs.' '.a:rhs[J

Zeile 8: nmap <silent> <unique> <Leader>bb <Plug>BufKillBack[J

<SNR>22_CreateUniqueMapping lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/plugin/bufkill.vim[J

Zeile 257:   call <SID>CreateUniqueMapping('<Leader>bf',   '<Plug>BufKillForward')[J

rufe <SNR>22_CreateUniqueMapping auf[J('<Leader>bf', '<Plug>BufKillForward')

Zeile 1:     if hasmapto(a:rhs) && !(a:0 == 1 && a:1 == 'AllowDuplicate')[J

Zeile 2:       " The user appears to have defined an alternate mapping for this command[J

Zeile 3:       return[J

Zeile 4:     elseif maparg(a:lhs, 'n') != ""[J

Zeile 5:       " The user appears to have defined a mapping for a:lhs already[J

Zeile 6:       return[J

Zeile 7:     endif[J

Zeile 8:     exec 'nmap <silent> <unique> '.a:lhs.' '.a:rhs[J

Zeile 8: nmap <silent> <unique> <Leader>bf <Plug>BufKillForward[J

<SNR>22_CreateUniqueMapping lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/plugin/bufkill.vim[J

Zeile 258:   call <SID>CreateUniqueMapping('<Leader>bun',  '<Plug>BufKillBun')[J

rufe <SNR>22_CreateUniqueMapping auf[J('<Leader>bun', '<Plug>BufKillBun')

Zeile 1:     if hasmapto(a:rhs) && !(a:0 == 1 && a:1 == 'AllowDuplicate')[J

Zeile 2:       " The user appears to have defined an alternate mapping for this command[J

Zeile 3:       return[J

Zeile 4:     elseif maparg(a:lhs, 'n') != ""[J

Zeile 5:       " The user appears to have defined a mapping for a:lhs already[J

Zeile 6:       return[J

Zeile 7:     endif[J

Zeile 8:     exec 'nmap <silent> <unique> '.a:lhs.' '.a:rhs[J

Zeile 8: nmap <silent> <unique> <Leader>bun <Plug>BufKillBun[J

<SNR>22_CreateUniqueMapping lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/plugin/bufkill.vim[J

Zeile 259:   call <SID>CreateUniqueMapping('<Leader>!bun', '<Plug>BufKillBangBun')[J

rufe <SNR>22_CreateUniqueMapping auf[J('<Leader>!bun', '<Plug>BufKillBangBun')

Zeile 1:     if hasmapto(a:rhs) && !(a:0 == 1 && a:1 == 'AllowDuplicate')[J

Zeile 2:       " The user appears to have defined an alternate mapping for this command[J

Zeile 3:       return[J

Zeile 4:     elseif maparg(a:lhs, 'n') != ""[J

Zeile 5:       " The user appears to have defined a mapping for a:lhs already[J

Zeile 6:       return[J

Zeile 7:     endif[J

Zeile 8:     exec 'nmap <silent> <unique> '.a:lhs.' '.a:rhs[J

Zeile 8: nmap <silent> <unique> <Leader>!bun <Plug>BufKillBangBun[J

<SNR>22_CreateUniqueMapping lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/plugin/bufkill.vim[J

Zeile 260:   call <SID>CreateUniqueMapping('<Leader>bd',   '<Plug>BufKillBd')[J

rufe <SNR>22_CreateUniqueMapping auf[J('<Leader>bd', '<Plug>BufKillBd')

Zeile 1:     if hasmapto(a:rhs) && !(a:0 == 1 && a:1 == 'AllowDuplicate')[J

Zeile 2:       " The user appears to have defined an alternate mapping for this command[J

Zeile 3:       return[J

Zeile 4:     elseif maparg(a:lhs, 'n') != ""[J

Zeile 5:       " The user appears to have defined a mapping for a:lhs already[J

Zeile 6:       return[J

Zeile 7:     endif[J

Zeile 8:     exec 'nmap <silent> <unique> '.a:lhs.' '.a:rhs[J

Zeile 8: nmap <silent> <unique> <Leader>bd <Plug>BufKillBd[J

<SNR>22_CreateUniqueMapping lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/plugin/bufkill.vim[J

Zeile 261:   call <SID>CreateUniqueMapping('<Leader>!bd',  '<Plug>BufKillBangBd')[J

rufe <SNR>22_CreateUniqueMapping auf[J('<Leader>!bd', '<Plug>BufKillBangBd')

Zeile 1:     if hasmapto(a:rhs) && !(a:0 == 1 && a:1 == 'AllowDuplicate')[J

Zeile 2:       " The user appears to have defined an alternate mapping for this command[J

Zeile 3:       return[J

Zeile 4:     elseif maparg(a:lhs, 'n') != ""[J

Zeile 5:       " The user appears to have defined a mapping for a:lhs already[J

Zeile 6:       return[J

Zeile 7:     endif[J

Zeile 8:     exec 'nmap <silent> <unique> '.a:lhs.' '.a:rhs[J

Zeile 8: nmap <silent> <unique> <Leader>!bd <Plug>BufKillBangBd[J

<SNR>22_CreateUniqueMapping lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/plugin/bufkill.vim[J

Zeile 262:   call <SID>CreateUniqueMapping('<Leader>bw',   '<Plug>BufKillBw')[J

rufe <SNR>22_CreateUniqueMapping auf[J('<Leader>bw', '<Plug>BufKillBw')

Zeile 1:     if hasmapto(a:rhs) && !(a:0 == 1 && a:1 == 'AllowDuplicate')[J

Zeile 2:       " The user appears to have defined an alternate mapping for this command[J

Zeile 3:       return[J

Zeile 4:     elseif maparg(a:lhs, 'n') != ""[J

Zeile 5:       " The user appears to have defined a mapping for a:lhs already[J

Zeile 6:       return[J

Zeile 7:     endif[J

Zeile 8:     exec 'nmap <silent> <unique> '.a:lhs.' '.a:rhs[J

Zeile 8: nmap <silent> <unique> <Leader>bw <Plug>BufKillBw[J

<SNR>22_CreateUniqueMapping lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/plugin/bufkill.vim[J

Zeile 263:   call <SID>CreateUniqueMapping('<Leader>!bw',  '<Plug>BufKillBangBw')[J

rufe <SNR>22_CreateUniqueMapping auf[J('<Leader>!bw', '<Plug>BufKillBangBw')

Zeile 1:     if hasmapto(a:rhs) && !(a:0 == 1 && a:1 == 'AllowDuplicate')[J

Zeile 2:       " The user appears to have defined an alternate mapping for this command[J

Zeile 3:       return[J

Zeile 4:     elseif maparg(a:lhs, 'n') != ""[J

Zeile 5:       " The user appears to have defined a mapping for a:lhs already[J

Zeile 6:       return[J

Zeile 7:     endif[J

Zeile 8:     exec 'nmap <silent> <unique> '.a:lhs.' '.a:rhs[J

Zeile 8: nmap <silent> <unique> <Leader>!bw <Plug>BufKillBangBw[J

<SNR>22_CreateUniqueMapping lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/plugin/bufkill.vim[J

Zeile 264:   call <SID>CreateUniqueMapping('<Leader>bundo','<Plug>BufKillUndo')[J

rufe <SNR>22_CreateUniqueMapping auf[J('<Leader>bundo', '<Plug>BufKillUndo')

Zeile 1:     if hasmapto(a:rhs) && !(a:0 == 1 && a:1 == 'AllowDuplicate')[J

Zeile 2:       " The user appears to have defined an alternate mapping for this command[J

Zeile 3:       return[J

Zeile 4:     elseif maparg(a:lhs, 'n') != ""[J

Zeile 5:       " The user appears to have defined a mapping for a:lhs already[J

Zeile 6:       return[J

Zeile 7:     endif[J

Zeile 8:     exec 'nmap <silent> <unique> '.a:lhs.' '.a:rhs[J

Zeile 8: nmap <silent> <unique> <Leader>bundo <Plug>BufKillUndo[J

<SNR>22_CreateUniqueMapping lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/plugin/bufkill.vim[J

Zeile 265:   call <SID>CreateUniqueMapping('<Leader>ba',   '<Plug>BufKillAlt')[J

rufe <SNR>22_CreateUniqueMapping auf[J('<Leader>ba', '<Plug>BufKillAlt')

Zeile 1:     if hasmapto(a:rhs) && !(a:0 == 1 && a:1 == 'AllowDuplicate')[J

Zeile 2:       " The user appears to have defined an alternate mapping for this command[J

Zeile 3:       return[J

Zeile 4:     elseif maparg(a:lhs, 'n') != ""[J

Zeile 5:       " The user appears to have defined a mapping for a:lhs already[J

Zeile 6:       return[J

Zeile 7:     endif[J

Zeile 8:     exec 'nmap <silent> <unique> '.a:lhs.' '.a:rhs[J

Zeile 8: nmap <silent> <unique> <Leader>ba <Plug>BufKillAlt[J

<SNR>22_CreateUniqueMapping lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/plugin/bufkill.vim[J

Zeile 266:   if g:BufKillOverrideCtrlCaret == 1[J

Zeile 267:     call <SID>CreateUniqueMapping('<C-^>', '<Plug>BufKillAlt', 'AllowDuplicate')[J

Zeile 268:   endif[J

Zeile 269: endif[J

Zeile 270: [J

Zeile 271: function! <SID>BufKill(cmd, bang) "{{{1[J

Zeile 421: [J

Zeile 422: function! <SID>IsBufferNew(buf) "{{{1[J

Zeile 425: [J

Zeile 426: function! <SID>SwitchToNewBuffer(bang) "{{1[J

Zeile 454: [J

Zeile 455: function! <SID>GotoBuffer(cmd, bang) "{{{1[J

Zeile 587: [J

Zeile 588: function! <SID>UpdateList(event) "{{{1[J

Zeile 636: [J

Zeile 637: function! <SID>UpdateLastColumn(event) "{{{1[J

Zeile 662: [J

Zeile 663: function! <SID>UndoKill() "{{{1[J

Zeile 701: [J

Zeile 702: function! <SID>SaveWindowPos() "{{{1[J

Zeile 709: [J

Zeile 710: function! <SID>RestoreWindowPos() "{{{1[J

Zeile 716: [J

Zeile 717: function! <SID>SaveView() "{{{1[J

Zeile 729: [J

Zeile 730: function! <SID>RestoreView() "{{{1[J

Zeile 739: [J

Zeile 740: " Autocommands {{{1[J

Zeile 741: "[J

Zeile 742: augroup BufKill[J

Zeile 743: autocmd![J

Zeile 744: autocmd BufKill WinEnter * call <SID>UpdateList('WinEnter')[J

Zeile 745: autocmd BufKill BufEnter * call <SID>UpdateList('BufEnter')[J

Zeile 746: autocmd BufKill BufAdd * call <SID>UpdateList('BufAdd')[J

Zeile 747: autocmd BufKill WinLeave * call <SID>UpdateLastColumn('WinLeave')[J

Zeile 748: autocmd BufKill BufLeave * call <SID>UpdateLastColumn('BufLeave')[J

Zeile 749: augroup END[J

Zeile 750: [J

Zeile 751: " Cleanup and modelines {{{1[J

Zeile 752: let &cpo = s:save_cpo[J

Zeile 753: [J

Zeile 754: " vim:ft=vim:fdm=marker:fen:fmr={{{,}}}:[J

Lesen von /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/plugin/bufkill.vim beendet[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim/plugin/**/*.vim"[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim/plugin)[J
fchdir() to previous dir[J
lese "/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim/plugin/ack.vim"[J
Zeile 1: if exists('g:loaded_ack') || &cp[J

Zeile 2:   finish[J

Zeile 3: endif[J

Zeile 4: [J

Zeile 5: if !exists("g:ack_default_options")[J

Zeile 6:   let g:ack_default_options = " -s -H --nopager --nocolor --nogroup --column"[J

Zeile 7: endif[J

Zeile 8: [J

Zeile 9: " Location of the ack utility[J

Zeile 10: if !exists("g:ackprg")[J

Zeile 11:   if executable('ack-grep')[J

Zeile 12:     let g:ackprg = "ack-grep"[J

Zeile 13:   elseif executable('ack')[J

Zeile 14:     let g:ackprg = "ack"[J

Zeile 15:   else[J

Zeile 16:     finish[J

Lesen von /c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim/plugin/ack.vim beendet[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/plugin/**/*.vim"[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/plugin)[J
fchdir() to previous dir[J
lese "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/plugin/fzf.vim"[J
Zeile 1: " Copyright (c) 2015 Junegunn Choi[J

Zeile 2: "[J

Zeile 3: " MIT License[J

Zeile 4: "[J

Zeile 5: " Permission is hereby granted, free of charge, to any person obtaining[J

Zeile 6: " a copy of this software and associated documentation files (the[J

Zeile 7: " "Software"), to deal in the Software without restriction, including[J

Zeile 8: " without limitation the rights to use, copy, modify, merge, publish,[J

Zeile 9: " distribute, sublicense, and/or sell copies of the Software, and to[J

Zeile 10: " permit persons to whom the Software is furnished to do so, subject to[J

Zeile 11: " the following conditions:[J

Zeile 12: "[J

Zeile 13: " The above copyright notice and this permission notice shall be[J

Zeile 14: " included in all copies or substantial portions of the Software.[J

Zeile 15: "[J

Zeile 16: " THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,[J

Zeile 17: " EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF[J

Zeile 18: " MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND[J

Zeile 19: " NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE[J

Zeile 20: " LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION[J

Zeile 21: " OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION[J

Zeile 22: " WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.[J

Zeile 23: [J

Zeile 24: if exists('g:loaded_fzf_vim')[J

Zeile 25:   finish[J

Zeile 26: endif[J

Zeile 27: let g:loaded_fzf_vim = 1[J

Zeile 28: [J

Zeile 29: let s:cpo_save = &cpo[J

Zeile 30: set cpo&vim[J

Zeile 31: let s:is_win = has('win32') || has('win64')[J

Zeile 32: [J

Zeile 33: function! s:defs(commands)[J

Zeile 46: [J

Zeile 47: call s:defs(['command!      -bang -nargs=? -complete=dir Files       call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)','command!      -bang -nargs=? GitFiles                  call fzf#vim#gitfiles(<q-args>, fzf#vim#with_preview(<q-args> == "?" ? { "placeholder": "" } : {}), <bang>0)','command!      -bang -nargs=? GFiles                    call fzf#vim#gitfiles(<q-args>, fzf#vim#with_preview(<q-args> == "?" ? { "placeholder": "" } : {}), <bang>0)','command! -bar -bang -nargs=? -complete=buffer Buffers  call fzf#vim#buffers(<q-args>, fzf#vim#with_preview({ "placeholder": "{1}" }), <bang>0)','command!      -bang -nargs=* Lines                     call fzf#vim#lines(<q-args>, <bang>0)','command!      -bang -nargs=* BLines                    call fzf#vim#buffer_lines(<q-args>, <bang>0)','command! -bar -bang Colors                             call fzf#vim#colors(<bang>0)','command!      -bang -nargs=+ -complete=dir Locate      call fzf#vim#locate(<q-args>, fzf#vim#with_preview(), <bang>0)','c[J

rufe <SNR>24_defs auf[J(['command!      -bang -nargs=? -comple...gs>, fzf#vim#with_preview(), <bang>0)'])

Zeile 1:   let prefix = get(g:, 'fzf_command_prefix', '')[J

Zeile 2:   if prefix =~# '^[^A-Z]'[J

Zeile 3:     echoerr 'g:fzf_command_prefix must start with an uppercase letter'[J

Zeile 4:     return[J

Zeile 5:   endif[J

Zeile 6:   for command in a:commands[J

Zeile 7:     let name = ':'.prefix.matchstr(command, '\C[A-Z]\S\+')[J

Zeile 8:     if 2 != exists(name)[J

Zeile 9:       execute substitute(command, '\ze\C[A-Z]', prefix, '')[J

Zeile 9: command!      -bang -nargs=? -complete=dir Files       call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)[J

Zeile 10:     endif[J

Zeile 11:   endfor[J

Zeile 6:   for command in a:commands[J

Zeile 7:     let name = ':'.prefix.matchstr(command, '\C[A-Z]\S\+')[J

Zeile 8:     if 2 != exists(name)[J

Zeile 9:       execute substitute(command, '\ze\C[A-Z]', prefix, '')[J

Zeile 9: command!      -bang -nargs=? GitFiles                  call fzf#vim#gitfiles(<q-args>, fzf#vim#with_preview(<q-args> == "?" ? { "placeholder": "" } : {}), <bang>0)[J

Zeile 10:     endif[J

Zeile 11:   endfor[J

Zeile 6:   for command in a:commands[J

Zeile 7:     let name = ':'.prefix.matchstr(command, '\C[A-Z]\S\+')[J

Zeile 8:     if 2 != exists(name)[J

Zeile 9:       execute substitute(command, '\ze\C[A-Z]', prefix, '')[J

Zeile 9: command!      -bang -nargs=? GFiles                    call fzf#vim#gitfiles(<q-args>, fzf#vim#with_preview(<q-args> == "?" ? { "placeholder": "" } : {}), <bang>0)[J

Zeile 10:     endif[J

Zeile 11:   endfor[J

Zeile 6:   for command in a:commands[J

Zeile 7:     let name = ':'.prefix.matchstr(command, '\C[A-Z]\S\+')[J

Zeile 8:     if 2 != exists(name)[J

Zeile 9:       execute substitute(command, '\ze\C[A-Z]', prefix, '')[J

Zeile 9: command! -bar -bang -nargs=? -complete=buffer Buffers  call fzf#vim#buffers(<q-args>, fzf#vim#with_preview({ "placeholder": "{1}" }), <bang>0)[J

Zeile 10:     endif[J

Zeile 11:   endfor[J

Zeile 6:   for command in a:commands[J

Zeile 7:     let name = ':'.prefix.matchstr(command, '\C[A-Z]\S\+')[J

Zeile 8:     if 2 != exists(name)[J

Zeile 9:       execute substitute(command, '\ze\C[A-Z]', prefix, '')[J

Zeile 9: command!      -bang -nargs=* Lines                     call fzf#vim#lines(<q-args>, <bang>0)[J

Zeile 10:     endif[J

Zeile 11:   endfor[J

Zeile 6:   for command in a:commands[J

Zeile 7:     let name = ':'.prefix.matchstr(command, '\C[A-Z]\S\+')[J

Zeile 8:     if 2 != exists(name)[J

Zeile 9:       execute substitute(command, '\ze\C[A-Z]', prefix, '')[J

Zeile 9: command!      -bang -nargs=* BLines                    call fzf#vim#buffer_lines(<q-args>, <bang>0)[J

Zeile 10:     endif[J

Zeile 11:   endfor[J

Zeile 6:   for command in a:commands[J

Zeile 7:     let name = ':'.prefix.matchstr(command, '\C[A-Z]\S\+')[J

Zeile 8:     if 2 != exists(name)[J

Zeile 9:       execute substitute(command, '\ze\C[A-Z]', prefix, '')[J

Zeile 9: command! -bar -bang Colors                             call fzf#vim#colors(<bang>0)[J

Zeile 10:     endif[J

Zeile 11:   endfor[J

Zeile 6:   for command in a:commands[J

Zeile 7:     let name = ':'.prefix.matchstr(command, '\C[A-Z]\S\+')[J

Zeile 8:     if 2 != exists(name)[J

Zeile 9:       execute substitute(command, '\ze\C[A-Z]', prefix, '')[J

Zeile 9: command!      -bang -nargs=+ -complete=dir Locate      call fzf#vim#locate(<q-args>, fzf#vim#with_preview(), <bang>0)[J

Zeile 10:     endif[J

Zeile 11:   endfor[J

Zeile 6:   for command in a:commands[J

Zeile 7:     let name = ':'.prefix.matchstr(command, '\C[A-Z]\S\+')[J

Zeile 8:     if 2 != exists(name)[J

Zeile 9:       execute substitute(command, '\ze\C[A-Z]', prefix, '')[J

Zeile 9: command!      -bang -nargs=* Ag                        call fzf#vim#ag(<q-args>, fzf#vim#with_preview(), <bang>0)[J

Zeile 10:     endif[J

Zeile 11:   endfor[J

Zeile 6:   for command in a:commands[J

Zeile 7:     let name = ':'.prefix.matchstr(command, '\C[A-Z]\S\+')[J

Zeile 8:     if 2 != exists(name)[J

Zeile 9:       execute substitute(command, '\ze\C[A-Z]', prefix, '')[J

Zeile 9: command!      -bang -nargs=* Rg                        call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case -- ".shellescape(<q-args>), 1, fzf#vim#with_preview(), <bang>0)[J

Zeile 10:     endif[J

Zeile 11:   endfor[J

Zeile 6:   for command in a:commands[J

Zeile 7:     let name = ':'.prefix.matchstr(command, '\C[A-Z]\S\+')[J

Zeile 8:     if 2 != exists(name)[J

Zeile 9:       execute substitute(command, '\ze\C[A-Z]', prefix, '')[J

Zeile 9: command!      -bang -nargs=* Tags                      call fzf#vim#tags(<q-args>, fzf#vim#with_preview({ "placeholder": "--tag {2}:{-1}:{3..}" }), <bang>0)[J

Zeile 10:     endif[J

Zeile 11:   endfor[J

Zeile 6:   for command in a:commands[J

Zeile 7:     let name = ':'.prefix.matchstr(command, '\C[A-Z]\S\+')[J

Zeile 8:     if 2 != exists(name)[J

Zeile 9:       execute substitute(command, '\ze\C[A-Z]', prefix, '')[J

Zeile 9: command!      -bang -nargs=* BTags                     call fzf#vim#buffer_tags(<q-args>, fzf#vim#with_preview({ "placeholder": "{2}:{3..}" }), <bang>0)[J

Zeile 10:     endif[J

Zeile 11:   endfor[J

Zeile 6:   for command in a:commands[J

Zeile 7:     let name = ':'.prefix.matchstr(command, '\C[A-Z]\S\+')[J

Zeile 8:     if 2 != exists(name)[J

Zeile 9:       execute substitute(command, '\ze\C[A-Z]', prefix, '')[J

Zeile 9: command! -bar -bang Snippets                           call fzf#vim#snippets(<bang>0)[J

Zeile 10:     endif[J

Zeile 11:   endfor[J

Zeile 6:   for command in a:commands[J

Zeile 7:     let name = ':'.prefix.matchstr(command, '\C[A-Z]\S\+')[J

Zeile 8:     if 2 != exists(name)[J

Zeile 9:       execute substitute(command, '\ze\C[A-Z]', prefix, '')[J

Zeile 9: command! -bar -bang Commands                           call fzf#vim#commands(<bang>0)[J

Zeile 10:     endif[J

Zeile 11:   endfor[J

Zeile 6:   for command in a:commands[J

Zeile 7:     let name = ':'.prefix.matchstr(command, '\C[A-Z]\S\+')[J

Zeile 8:     if 2 != exists(name)[J

Zeile 9:       execute substitute(command, '\ze\C[A-Z]', prefix, '')[J

Zeile 9: command! -bar -bang Marks                              call fzf#vim#marks(<bang>0)[J

Zeile 10:     endif[J

Zeile 11:   endfor[J

Zeile 6:   for command in a:commands[J

Zeile 7:     let name = ':'.prefix.matchstr(command, '\C[A-Z]\S\+')[J

Zeile 8:     if 2 != exists(name)[J

Zeile 9:       execute substitute(command, '\ze\C[A-Z]', prefix, '')[J

Zeile 9: command! -bar -bang Helptags                           call fzf#vim#helptags(<bang>0)[J

Zeile 10:     endif[J

Zeile 11:   endfor[J

Zeile 6:   for command in a:commands[J

Zeile 7:     let name = ':'.prefix.matchstr(command, '\C[A-Z]\S\+')[J

Zeile 8:     if 2 != exists(name)[J

Zeile 9:       execute substitute(command, '\ze\C[A-Z]', prefix, '')[J

Zeile 9: command! -bar -bang Windows                            call fzf#vim#windows(<bang>0)[J

Zeile 10:     endif[J

Zeile 11:   endfor[J

Zeile 6:   for command in a:commands[J

Zeile 7:     let name = ':'.prefix.matchstr(command, '\C[A-Z]\S\+')[J

Zeile 8:     if 2 != exists(name)[J

Zeile 9:       execute substitute(command, '\ze\C[A-Z]', prefix, '')[J

Zeile 9: command! -bar -bang -range=% Commits                   let b:fzf_winview = winsaveview() | <line1>,<line2>call fzf#vim#commits(fzf#vim#with_preview({ "placeholder": "" }), <bang>0)[J

Zeile 10:     endif[J

Zeile 11:   endfor[J

Zeile 6:   for command in a:commands[J

Zeile 7:     let name = ':'.prefix.matchstr(command, '\C[A-Z]\S\+')[J

Zeile 8:     if 2 != exists(name)[J

Zeile 9:       execute substitute(command, '\ze\C[A-Z]', prefix, '')[J

Zeile 9: command! -bar -bang -range=% BCommits                  let b:fzf_winview = winsaveview() | <line1>,<line2>call fzf#vim#buffer_commits(fzf#vim#with_preview({ "placeholder": "" }), <bang>0)[J

Zeile 10:     endif[J

Zeile 11:   endfor[J

Zeile 6:   for command in a:commands[J

Zeile 7:     let name = ':'.prefix.matchstr(command, '\C[A-Z]\S\+')[J

Zeile 8:     if 2 != exists(name)[J

Zeile 9:       execute substitute(command, '\ze\C[A-Z]', prefix, '')[J

Zeile 9: command! -bar -bang Maps                               call fzf#vim#maps("n", <bang>0)[J

Zeile 10:     endif[J

Zeile 11:   endfor[J

Zeile 6:   for command in a:commands[J

Zeile 7:     let name = ':'.prefix.matchstr(command, '\C[A-Z]\S\+')[J

Zeile 8:     if 2 != exists(name)[J

Zeile 9:       execute substitute(command, '\ze\C[A-Z]', prefix, '')[J

Zeile 9: command! -bar -bang Filetypes                          call fzf#vim#filetypes(<bang>0)[J

Zeile 10:     endif[J

Zeile 11:   endfor[J

Zeile 6:   for command in a:commands[J

Zeile 7:     let name = ':'.prefix.matchstr(command, '\C[A-Z]\S\+')[J

Zeile 8:     if 2 != exists(name)[J

Zeile 9:       execute substitute(command, '\ze\C[A-Z]', prefix, '')[J

Zeile 9: command!      -bang -nargs=* History                   call s:history(<q-args>, fzf#vim#with_preview(), <bang>0)[J

Zeile 10:     endif[J

Zeile 11:   endfor[J

Zeile 6:   for command in a:commands[J

Zeile 7:     let name = ':'.prefix.matchstr(command, '\C[A-Z]\S\+')[J

Zeile 8:     if 2 != exists(name)[J

Zeile 9:       execute substitute(command, '\ze\C[A-Z]', prefix, '')[J

Zeile 10:     endif[J

Zeile 11:   endfor[J

<SNR>24_defs lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/plugin/fzf.vim[J

Zeile 70: [J

Zeile 71: function! s:history(arg, extra, bang)[J

Zeile 81: [J

Zeile 82: function! fzf#complete(...)[J

Zeile 85: [J

Zeile 86: if (has('nvim') || has('terminal') && has('patch-8.0.995')) && (get(g:, 'fzf_statusline', 1) || get(g:, 'fzf_nvim_statusline', 1))[J

Zeile 87:   function! s:fzf_restore_colors()[J

Zeile 103: [J

Zeile 104:   function! s:fzf_vim_term()[J

Zeile 114: [J

Zeile 115:   augroup _fzf_statusline[J

Zeile 116:     autocmd![J

Zeile 117:     autocmd FileType fzf call s:fzf_vim_term()[J

Zeile 118:   augroup END[J

Zeile 119: endif[J

Zeile 120: [J

Zeile 121: if !exists('g:fzf#vim#buffers')[J

Zeile 122:   let g:fzf#vim#buffers = {}[J

Zeile 123: endif[J

Zeile 124: [J

Zeile 125: augroup fzf_buffers[J

Zeile 126:   autocmd![J

Zeile 127:   if exists('*reltimefloat')[J

Zeile 128:     autocmd BufWinEnter,WinEnter * let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())[J

Zeile 129:   else[J

Zeile 130:     autocmd BufWinEnter,WinEnter * let g:fzf#vim#buffers[bufnr('')] = localtime()[J

Zeile 131:   endif[J

Zeile 132:   autocmd BufDelete * silent! call remove(g:fzf#vim#buffers, expand('<abuf>'))[J

Zeile 133: augroup END[J

Zeile 134: [J

Zeile 135: inoremap <expr> <plug>(fzf-complete-word)        fzf#vim#complete#word()[J

Zeile 136: if s:is_win[J

Zeile 137:   inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path('dir /s/b')[J

Zeile 138:   inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path('dir /s/b/a:-d')[J

Zeile 139: else[J

Zeile 140:   inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path("find . -path '*/\.*' -prune -o -print \| sed '1d;s:^..::'")[J

Zeile 141:   inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path("find . -path '*/\.*' -prune -o -type f -print -o -type l -print \| sed 's:^..::'")[J

Zeile 142: endif[J

Zeile 143: inoremap <expr> <plug>(fzf-complete-file-ag)     fzf#vim#complete#path('ag -l -g ""')[J

Zeile 144: inoremap <expr> <plug>(fzf-complete-line)        fzf#vim#complete#line()[J

Zeile 145: inoremap <expr> <plug>(fzf-complete-buffer-line) fzf#vim#complete#buffer_line()[J

Zeile 146: [J

Zeile 147: nnoremap <silent> <plug>(fzf-maps-n) :<c-u>call fzf#vim#maps('n', 0)<cr>[J

Zeile 148: inoremap <silent> <plug>(fzf-maps-i) <c-o>:call fzf#vim#maps('i', 0)<cr>[J

Zeile 149: xnoremap <silent> <plug>(fzf-maps-x) :<c-u>call fzf#vim#maps('x', 0)<cr>[J

Zeile 150: onoremap <silent> <plug>(fzf-maps-o) <c-c>:<c-u>call fzf#vim#maps('o', 0)<cr>[J

Zeile 151: [J

Zeile 152: let &cpo = s:cpo_save[J

Zeile 153: unlet s:cpo_save[J

Zeile 154: [J

Lesen von /c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/plugin/fzf.vim beendet[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf/plugin/**/*.vim"[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf/plugin)[J
fchdir() to previous dir[J
lese "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf/plugin/fzf.vim"[J
Zeile 1: " Copyright (c) 2017 Junegunn Choi[J

Zeile 2: "[J

Zeile 3: " MIT License[J

Zeile 4: "[J

Zeile 5: " Permission is hereby granted, free of charge, to any person obtaining[J

Zeile 6: " a copy of this software and associated documentation files (the[J

Zeile 7: " "Software"), to deal in the Software without restriction, including[J

Zeile 8: " without limitation the rights to use, copy, modify, merge, publish,[J

Zeile 9: " distribute, sublicense, and/or sell copies of the Software, and to[J

Zeile 10: " permit persons to whom the Software is furnished to do so, subject to[J

Zeile 11: " the following conditions:[J

Zeile 12: "[J

Zeile 13: " The above copyright notice and this permission notice shall be[J

Zeile 14: " included in all copies or substantial portions of the Software.[J

Zeile 15: "[J

Zeile 16: " THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,[J

Zeile 17: " EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF[J

Zeile 18: " MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND[J

Zeile 19: " NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE[J

Zeile 20: " LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION[J

Zeile 21: " OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION[J

Zeile 22: " WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.[J

Zeile 23: [J

Zeile 24: if exists('g:loaded_fzf')[J

Zeile 25:   finish[J

Zeile 26: endif[J

Zeile 27: let g:loaded_fzf = 1[J

Zeile 28: [J

Zeile 29: let s:is_win = has('win32') || has('win64')[J

Zeile 30: if s:is_win && &shellslash[J

Zeile 31:   set noshellslash[J

Zeile 32:   let s:base_dir = expand('<sfile>:h:h')[J

Zeile 33:   set shellslash[J

Zeile 34: else[J

Zeile 35:   let s:base_dir = expand('<sfile>:h:h')[J

Zeile 36: endif[J

Zeile 37: if s:is_win[J

Zeile 38:   let s:term_marker = '&::FZF'[J

Zeile 39: [J

Zeile 40:   function! s:fzf_call(fn, ...)[J

Zeile 49: [J

Zeile 50:   " Use utf-8 for fzf.vim commands[J

Zeile 51:   " Return array of shell commands for cmd.exe[J

Zeile 52:   function! s:enc_to_cp(str)[J

Zeile 61:   function! s:wrap_cmds(cmds)[J

Zeile 70: else[J

Zeile 71:   let s:term_marker = ";#FZF"[J

Zeile 72: [J

Zeile 73:   function! s:fzf_call(fn, ...)[J

Zeile 76: [J

Zeile 77:   function! s:wrap_cmds(cmds)[J

Zeile 80: [J

Zeile 81:   function! s:enc_to_cp(str)[J

Zeile 84: endif[J

Zeile 85: [J

Zeile 86: function! s:shellesc_cmd(arg)[J

Zeile 93: [J

Zeile 94: function! fzf#shellescape(arg, ...)[J

Zeile 101: [J

Zeile 102: function! s:fzf_getcwd()[J

Zeile 105: [J

Zeile 106: function! s:fzf_fnamemodify(fname, mods)[J

Zeile 109: [J

Zeile 110: function! s:fzf_expand(fmt)[J

Zeile 113: [J

Zeile 114: function! s:fzf_tempname()[J

Zeile 117: [J

Zeile 118: let s:layout_keys = ['window', 'tmux', 'up', 'down', 'left', 'right'][J

Zeile 119: let s:fzf_go = s:base_dir.'/bin/fzf'[J

Zeile 120: let s:fzf_tmux = s:base_dir.'/bin/fzf-tmux'[J

Zeile 121: [J

Zeile 122: let s:cpo_save = &cpo[J

Zeile 123: set cpo&vim[J

Zeile 124: [J

Zeile 125: function! s:popup_support()[J

Zeile 128: [J

Zeile 129: function! s:default_layout()[J

Zeile 134: [J

Zeile 135: function! fzf#install()[J

Zeile 156: [J

Zeile 157: let s:versions = {}[J

Zeile 158: function s:get_version(bin)[J

Zeile 171: [J

Zeile 172: function! s:compare_versions(a, b)[J

Zeile 184: [J

Zeile 185: function! s:compare_binary_versions(a, b)[J

Zeile 188: [J

Zeile 189: let s:checked = {}[J

Zeile 190: function! fzf#exec(...)[J

Zeile 240: [J

Zeile 241: function! s:tmux_enabled()[J

Zeile 263: [J

Zeile 264: function! s:escape(path)[J

Zeile 268: [J

Zeile 269: function! s:error(msg)[J

Zeile 274: [J

Zeile 275: function! s:warn(msg)[J

Zeile 280: [J

Zeile 281: function! s:has_any(dict, keys)[J

Zeile 289: [J

Zeile 290: function! s:open(cmd, target)[J

Zeile 296: [J

Zeile 297: function! s:common_sink(action, lines) abort[J

Zeile 338: [J

Zeile 339: function! s:get_color(attr, ...)[J

Zeile 351: [J

Zeile 352: function! s:defaults()[J

Zeile 357: [J

Zeile 358: function! s:validate_layout(layout)[J

Zeile 367: [J

Zeile 368: function! s:evaluate_opts(options)[J

Zeile 372: [J

Zeile 373: " [name string,] [opts dict,] [fullscreen boolean][J

Zeile 374: function! fzf#wrap(...)[J

Zeile 433: [J

Zeile 434: function! s:use_sh()[J

Zeile 446: [J

Zeile 447: function! fzf#run(...) abort[J

Zeile 529: [J

Zeile 530: function! s:present(dict, ...)[J

Zeile 538: [J

Zeile 539: function! s:fzf_tmux(dict)[J

Zeile 558: [J

Zeile 559: function! s:splittable(dict)[J

Zeile 563: [J

Zeile 564: function! s:pushd(dict)[J

Zeile 580: [J

Zeile 581: augroup fzf_popd[J

Zeile 582:   autocmd![J

Zeile 583:   autocmd WinEnter * call s:dopopd()[J

Zeile 584: augroup END[J

Zeile 585: [J

Zeile 586: function! s:dopopd()[J

Zeile 611: [J

Zeile 612: function! s:xterm_launcher()[J

Zeile 621: unlet! s:launcher[J

Zeile 622: if s:is_win || has('win32unix')[J

Zeile 623:   let s:launcher = '%s'[J

Zeile 624: else[J

Zeile 625:   let s:launcher = function('s:xterm_launcher')[J

Zeile 626: endif[J

Zeile 627: [J

Zeile 628: function! s:exit_handler(code, command, ...)[J

Zeile 644: [J

Zeile 645: function! s:execute(dict, command, use_height, temps) abort[J

Zeile 695: [J

Zeile 696: function! s:execute_tmux(dict, command, temps) abort[J

Zeile 710: [J

Zeile 711: function! s:calc_size(max, val, dict)[J

Zeile 735: [J

Zeile 736: function! s:getpos()[J

Zeile 739: [J

Zeile 740: function! s:border_opt(window)[J

Zeile 765: [J

Zeile 766: function! s:split(dict)[J

Zeile 810: [J

Zeile 811: nnoremap <silent> <Plug>(fzf-insert) i[J

Zeile 812: nnoremap <silent> <Plug>(fzf-normal) <Nop>[J

Zeile 813: if exists(':tnoremap')[J

Zeile 814:   tnoremap <silent> <Plug>(fzf-insert) <C-\><C-n>i[J

Zeile 815:   tnoremap <silent> <Plug>(fzf-normal) <C-\><C-n>[J

Zeile 816: endif[J

Zeile 817: [J

Zeile 818: function! s:execute_term(dict, command, temps) abort[J

Zeile 918: [J

Zeile 919: function! s:collect(temps) abort[J

Zeile 928: [J

Zeile 929: function! s:callback(dict, lines) abort[J

Zeile 962: [J

Zeile 963: if has('nvim')[J

Zeile 964:   function s:create_popup(hl, opts) abort[J

Zeile 972: else[J

Zeile 973:   function! s:create_popup(hl, opts) abort[J

Zeile 985: endif[J

Zeile 986: [J

Zeile 987: function! s:popup(opts) abort[J

Zeile 1012: [J

Zeile 1013: let s:default_action = { 'ctrl-t': 'tab split', 'ctrl-x': 'split', 'ctrl-v': 'vsplit' }[J

Zeile 1017: [J

Zeile 1018: function! s:shortpath()[J

Zeile 1026: [J

Zeile 1027: function! s:cmd(bang, ...) abort[J

Zeile 1044: [J

Zeile 1045: command! -nargs=* -complete=dir -bang FZF call s:cmd(<bang>0, <f-args>)[J

Zeile 1046: [J

Zeile 1047: let &cpo = s:cpo_save[J

Zeile 1048: unlet s:cpo_save[J

Lesen von /c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf/plugin/fzf.vim beendet[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter/plugin/**/*.vim"[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter/plugin)[J
fchdir() to previous dir[J
lese "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter/plugin/rooter.vim"[J
Zeile 1: " Vim plugin to change the working directory to the project root.[J

Zeile 2: "[J

Zeile 3: " Copyright 2010-2020 Andrew Stewart, <boss@airbladesoftware.com>[J

Zeile 4: " Released under the MIT licence.[J

Zeile 5: [J

Zeile 6: if exists('g:loaded_rooter') || &cp[J

Zeile 7:   finish[J

Zeile 8: endif[J

Zeile 9: let g:loaded_rooter = 1[J

Zeile 10: [J

Zeile 11: let s:nomodeline = (v:version > 703 || (v:version == 703 && has('patch442'))) ? '<nomodeline>' : ''[J

Zeile 12: [J

Zeile 13: if !exists('g:rooter_manual_only')[J

Zeile 14:   let g:rooter_manual_only = 0[J

Zeile 15: endif[J

Zeile 16: [J

Zeile 17: if exists('+autochdir') && &autochdir && !g:rooter_manual_only[J

Zeile 18:   set noautochdir[J

Zeile 19: endif[J

Zeile 20: [J

Zeile 21: if exists('g:rooter_use_lcd')[J

Zeile 22:   echoerr 'vim-rooter: please replace g:rooter_use_lcd=1 with g:rooter_cd_cmd="lcd"'[J

Zeile 23:   let g:rooter_cd_cmd = 'lcd'[J

Zeile 24: endif[J

Zeile 25: [J

Zeile 26: if !exists('g:rooter_cd_cmd')[J

Zeile 27:   let g:rooter_cd_cmd = 'cd'[J

Zeile 28: endif[J

Zeile 29: [J

Zeile 30: if !exists('g:rooter_patterns')[J

Zeile 31:   let g:rooter_patterns = ['.git', '_darcs', '.hg', '.bzr', '.svn', 'Makefile', 'package.json'][J

Zeile 32: endif[J

Zeile 33: [J

Zeile 34: if !exists('g:rooter_targets')[J

Zeile 35:   let g:rooter_targets = '/,*'[J

Zeile 36: endif[J

Zeile 37: [J

Zeile 38: if !exists('g:rooter_change_directory_for_non_project_files')[J

Zeile 39:   let g:rooter_change_directory_for_non_project_files = ''[J

Zeile 40: endif[J

Zeile 41: [J

Zeile 42: if !exists('g:rooter_silent_chdir')[J

Zeile 43:   let g:rooter_silent_chdir = 0[J

Zeile 44: endif[J

Zeile 45: [J

Zeile 46: if !exists('g:rooter_resolve_links')[J

Zeile 47:   let g:rooter_resolve_links = 0[J

Zeile 48: endif[J

Zeile 49: [J

Zeile 50: [J

Zeile 51: " For third-parties.  Not used by plugin.[J

Zeile 52: function! FindRootDirectory()[J

Zeile 55: [J

Zeile 56: [J

Zeile 57: command! -bar Rooter call <SID>rooter()[J

Zeile 58: command! -bar RooterToggle call <SID>toggle()[J

Zeile 59: [J

Zeile 60: [J

Zeile 61: augroup rooter[J

Zeile 62:   autocmd![J

Zeile 63:   autocmd VimEnter,BufReadPost,BufEnter * nested if !g:rooter_manual_only | Rooter | endif[J

Zeile 64:   autocmd BufWritePost * nested if !g:rooter_manual_only | call setbufvar('%', 'rootDir', '') | Rooter | endif[J

Zeile 65: augroup END[J

Zeile 66: [J

Zeile 67: [J

Zeile 68: function! s:rooter()[J

Zeile 84: [J

Zeile 85: [J

Zeile 86: " Returns true if we should change to the buffer's root directory, false otherwise.[J

Zeile 87: function! s:activate()[J

Zeile 114: [J

Zeile 115: [J

Zeile 116: " Returns the root directory or an empty string if no root directory found.[J

Zeile 117: function! s:root()[J

Zeile 143: [J

Zeile 144: [J

Zeile 145: function s:match(dir, pattern)[J

Zeile 156: [J

Zeile 157: [J

Zeile 158: " Returns true if dir is identifier, false otherwise.[J

Zeile 159: "[J

Zeile 160: " dir        - full path to a directory[J

Zeile 161: " identifier - a directory name[J

Zeile 162: function! s:is(dir, identifier)[J

Zeile 166: [J

Zeile 167: [J

Zeile 168: " Returns true if dir contains identifier, false otherwise.[J

Zeile 169: "[J

Zeile 170: " dir        - full path to a directory[J

Zeile 171: " identifier - a file name or a directory name; may be a glob[J

Zeile 172: function! s:has(dir, identifier)[J

Zeile 179: [J

Zeile 180: [J

Zeile 181: " Returns true if identifier is an ancestor of dir,[J

Zeile 182: " i.e. dir is a subdirectory (no matter how many levels) of identifier;[J

Zeile 183: " false otherwise.[J

Zeile 184: "[J

Zeile 185: " dir        - full path to a directory[J

Zeile 186: " identifier - a directory name[J

Zeile 187: function! s:sub(dir, identifier)[J

Zeile 196: [J

Zeile 197: " Return true if identifier is a direct ancestor (parent) of dir,[J

Zeile 198: " i.e. dir is a direct subdirectory (child) of identifier; false otherwise[J

Zeile 199: "[J

Zeile 200: " dir        - full path to a directory[J

Zeile 201: " identifier - a directory name[J

Zeile 202: function! s:child(dir, identifier)[J

Zeile 206: [J

Zeile 207: " Returns full path of directory of current file name (which may be a directory).[J

Zeile 208: function! s:current()[J

Zeile 215: [J

Zeile 216: [J

Zeile 217: " Returns full path of dir's parent directory.[J

Zeile 218: function! s:parent(dir)[J

Zeile 221: [J

Zeile 222: [J

Zeile 223: " Changes to the given directory unless it is already the current one.[J

Zeile 224: function! s:cd(dir)[J

Zeile 232: [J

Zeile 233: [J

Zeile 234: function! s:rootless()[J

Zeile 243: [J

Zeile 244: [J

Zeile 245: function! s:toggle()[J

Zeile 249: [J

Zeile 250: [J

Zeile 251: " vim:set ft=vim sw=2 sts=2 et:[J

Lesen von /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter/plugin/rooter.vim beendet[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary/plugin/**/*.vim"[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary/plugin)[J
fchdir() to previous dir[J
lese "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary/plugin/commentary.vim"[J
Zeile 1: " commentary.vim - Comment stuff out[J

Zeile 2: " Maintainer:   Tim Pope <http://tpo.pe/>[J

Zeile 3: " Version:      1.3[J

Zeile 4: " GetLatestVimScripts: 3695 1 :AutoInstall: commentary.vim[J

Zeile 5: [J

Zeile 6: if exists("g:loaded_commentary") || v:version < 700[J

Zeile 7:   finish[J

Zeile 8: endif[J

Zeile 9: let g:loaded_commentary = 1[J

Zeile 10: [J

Zeile 11: function! s:surroundings() abort[J

Zeile 15: [J

Zeile 16: function! s:strip_white_space(l,r,line) abort[J

Zeile 26: [J

Zeile 27: function! s:go(...) abort[J

Zeile 83: [J

Zeile 84: function! s:textobject(inner) abort[J

Zeile 104: [J

Zeile 105: command! -range -bar -bang Commentary call s:go(<line1>,<line2>,<bang>0)[J

Zeile 106: xnoremap <expr>   <Plug>Commentary     <SID>go()[J

Zeile 107: nnoremap <expr>   <Plug>Commentary     <SID>go()[J

Zeile 108: nnoremap <expr>   <Plug>CommentaryLine <SID>go() . '_'[J

Zeile 109: onoremap <silent> <Plug>Commentary        :<C-U>call <SID>textobject(get(v:, 'operator', '') ==# 'c')<CR>[J

Zeile 110: nnoremap <silent> <Plug>ChangeCommentary c:<C-U>call <SID>textobject(1)<CR>[J

Zeile 111: nmap <silent> <Plug>CommentaryUndo :echoerr "Change your <Plug>CommentaryUndo map to <Plug>Commentary<Plug>Commentary"<CR>[J

Zeile 112: [J

Zeile 113: if !hasmapto('<Plug>Commentary') || maparg('gc','n') ==# ''[J

Zeile 114:   xmap gc  <Plug>Commentary[J

Zeile 115:   nmap gc  <Plug>Commentary[J

Zeile 116:   omap gc  <Plug>Commentary[J

Zeile 117:   nmap gcc <Plug>CommentaryLine[J

Zeile 118:   if maparg('c','n') ==# '' && !exists('v:operator')[J

Zeile 119:     nmap cgc <Plug>ChangeCommentary[J

Zeile 120:   endif[J

Zeile 121:   nmap gcu <Plug>Commentary<Plug>Commentary[J

Zeile 122: endif[J

Zeile 123: [J

Zeile 124: " vim:set et sw=2:[J

Lesen von /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary/plugin/commentary.vim beendet[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/plugin/**/*.vim"[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/plugin)[J
fchdir() to previous dir[J
lese "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/plugin/airline.vim"[J
Zeile 1: " MIT License. Copyright (c) 2013-2021 Bailey Ling, Christian Brabandt et al.[J

Zeile 2: " vim: et ts=2 sts=2 sw=2[J

Zeile 3: [J

Zeile 4: let s:save_cpo = &cpo[J

Zeile 5: set cpo&vim[J

Zeile 6: [J

Zeile 7: scriptencoding utf-8[J

Zeile 8: [J

Zeile 9: if &cp || v:version < 702 || (exists('g:loaded_airline') && g:loaded_airline)[J

Zeile 10:   finish[J

Zeile 11: endif[J

Zeile 12: let g:loaded_airline = 1[J

Zeile 13: [J

Zeile 14: let s:airline_initialized = 0[J

Zeile 15: function! s:init()[J

Zeile 49: [J

Zeile 50: let s:active_winnr = -1[J

Zeile 51: function! s:on_window_changed(event)[J

Zeile 76: [J

Zeile 77: function! s:on_focus_gained()[J

Zeile 82: [J

Zeile 83: function! s:on_cursor_moved()[J

Zeile 89: [J

Zeile 90: function! s:on_colorscheme_changed()[J

Zeile 101: [J

Zeile 102: function! airline#cmdwinenter(...)[J

Zeile 105: [J

Zeile 106: function! s:airline_toggle()[J

Zeile 193: [J

Zeile 194: function! s:get_airline_themes(a, l, p)[J

Zeile 197: [J

Zeile 198: function! s:airline_theme(...)[J

Zeile 215: [J

Zeile 216: function! s:airline_refresh(...)[J

Zeile 231: [J

Zeile 232: function! s:FocusGainedHandler(timer)[J

Zeile 239: [J

Zeile 240: function! s:airline_extensions()[J

Zeile 262: [J

Zeile 263: function! s:rand(max) abort[J

Zeile 281: [J

Zeile 282: function! s:random_theme() abort[J

Zeile 286: [J

Zeile 287: command! -bar -nargs=? -complete=customlist,<sid>get_airline_themes AirlineTheme call <sid>airline_theme(<f-args>)[J

Zeile 288: command! -bar AirlineToggleWhitespace call airline#extensions#whitespace#toggle()[J

Zeile 289: command! -bar AirlineToggle  call s:airline_toggle()[J

Zeile 290: command! -bar -bang AirlineRefresh call s:airline_refresh(<q-bang>)[J

Zeile 291: command! AirlineExtensions   call s:airline_extensions()[J

Zeile 292: [J

Zeile 293: call airline#init#bootstrap()[J

Suche nach "autoload/airline/init.vim" in "/c/Users/108012516/.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill,/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vi[J
Suche nach "/c/Users/108012516/.vim/autoload/airline/init.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/autoload/airline/init.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/autoload/airline/init.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/autoload/airline/init.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight/autoload/airline/init.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/autoload/airline/init.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim/autoload/airline/init.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/autoload/airline/init.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf/autoload/airline/init.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter/autoload/airline/init.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary/autoload/airline/init.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/autoload/airline/init.vim"[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/autoload/airline)[J
fchdir() to previous dir[J
Zeile 293: lese "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/autoload/airline/init.vim"[J
Zeile 1: " MIT License. Copyright (c) 2013-2021 Bailey Ling et al.[J

Zeile 2: " vim: et ts=2 sts=2 sw=2[J

Zeile 3: [J

Zeile 4: scriptencoding utf-8[J

Zeile 5: [J

Zeile 6: function! s:check_defined(variable, default)[J

Zeile 11: [J

Zeile 12: let s:loaded = 0[J

Zeile 13: function! airline#init#bootstrap()[J

Zeile 208: [J

Zeile 209: function! airline#init#sections()[J

Lesen von /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/autoload/airline/init.vim beendet[J
weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/plugin/airline.vim[J
rufe airline#init#bootstrap auf[J()

Zeile 1:   if s:loaded[J

Zeile 2:     return[J

Zeile 3:   endif[J

Zeile 4:   let s:loaded = 1[J

Zeile 5: [J

Zeile 6:   let g:airline#init#bootstrapping = 1[J

Zeile 7: [J

Zeile 8:   let g:airline#init#vim_async = (v:version >= 800 && has('job'))[J

Zeile 9:   let g:airline#init#is_windows = has('win32') || has('win64')[J

Zeile 10: [J

Zeile 11:   call s:check_defined('g:airline_detect_modified', 1)[J

rufe <SNR>29_check_defined auf[J('g:airline_detect_modified', 1)

Zeile 1:   if !exists(a:variable)[J

Zeile 2:     let {a:variable} = a:default[J

Zeile 3:   endif[J

<SNR>29_check_defined lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 12:   call s:check_defined('g:airline_detect_paste', 1)[J

rufe <SNR>29_check_defined auf[J('g:airline_detect_paste', 1)

Zeile 1:   if !exists(a:variable)[J

Zeile 2:     let {a:variable} = a:default[J

Zeile 3:   endif[J

<SNR>29_check_defined lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 13:   call s:check_defined('g:airline_detect_crypt', 1)[J

rufe <SNR>29_check_defined auf[J('g:airline_detect_crypt', 1)

Zeile 1:   if !exists(a:variable)[J

Zeile 2:     let {a:variable} = a:default[J

Zeile 3:   endif[J

<SNR>29_check_defined lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 14:   call s:check_defined('g:airline_detect_spell', 1)[J

rufe <SNR>29_check_defined auf[J('g:airline_detect_spell', 1)

Zeile 1:   if !exists(a:variable)[J

Zeile 2:     let {a:variable} = a:default[J

Zeile 3:   endif[J

<SNR>29_check_defined lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 15:   call s:check_defined('g:airline_detect_spelllang', 1)[J

rufe <SNR>29_check_defined auf[J('g:airline_detect_spelllang', 1)

Zeile 1:   if !exists(a:variable)[J

Zeile 2:     let {a:variable} = a:default[J

Zeile 3:   endif[J

<SNR>29_check_defined lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 16:   call s:check_defined('g:airline_detect_iminsert', 0)[J

rufe <SNR>29_check_defined auf[J('g:airline_detect_iminsert', 0)

Zeile 1:   if !exists(a:variable)[J

Zeile 2:     let {a:variable} = a:default[J

Zeile 3:   endif[J

<SNR>29_check_defined lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 17:   call s:check_defined('g:airline_inactive_collapse', 1)[J

rufe <SNR>29_check_defined auf[J('g:airline_inactive_collapse', 1)

Zeile 1:   if !exists(a:variable)[J

Zeile 2:     let {a:variable} = a:default[J

Zeile 3:   endif[J

<SNR>29_check_defined lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 18:   call s:check_defined('g:airline_exclude_filenames', ['DebuggerWatch','DebuggerStack','DebuggerStatus'])[J

rufe <SNR>29_check_defined auf[J('g:airline_exclude_filenames', ['DebuggerWatch', 'DebuggerStack', 'DebuggerStatus'])

Zeile 1:   if !exists(a:variable)[J

Zeile 2:     let {a:variable} = a:default[J

Zeile 3:   endif[J

<SNR>29_check_defined lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 19:   call s:check_defined('g:airline_exclude_filetypes', [])[J

rufe <SNR>29_check_defined auf[J('g:airline_exclude_filetypes', [])

Zeile 1:   if !exists(a:variable)[J

Zeile 2:     let {a:variable} = a:default[J

Zeile 3:   endif[J

<SNR>29_check_defined lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 20:   call s:check_defined('g:airline_exclude_preview', 0)[J

rufe <SNR>29_check_defined auf[J('g:airline_exclude_preview', 0)

Zeile 1:   if !exists(a:variable)[J

Zeile 2:     let {a:variable} = a:default[J

Zeile 3:   endif[J

<SNR>29_check_defined lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 21: [J

Zeile 22:   call s:check_defined('g:airline_mode_map', {})[J

rufe <SNR>29_check_defined auf[J('g:airline_mode_map', {})

Zeile 1:   if !exists(a:variable)[J

Zeile 2:     let {a:variable} = a:default[J

Zeile 3:   endif[J

<SNR>29_check_defined lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 23:   call extend(g:airline_mode_map, { '__' : '------', 'c'  : 'COMMAND', 'i'  : 'INSERT', 'ic' : 'INSERT COMPL', 'ix' : 'INSERT COMPL', 'multi' : 'MULTI', 'n'  : 'NORMAL', 'ni' : '(INSERT)', 'no' : 'OP PENDING', 'R'  : 'REPLACE', 'Rv' : 'V REPLACE', 's'  : 'SELECT', 'S'  : 'S-LINE', '^S' : 'S-BLOCK', 't'  : 'TERMINAL', 'v'  : 'VISUAL', 'V'  : 'V-LINE', '^V' : 'V-BLOCK', }, 'keep')[J

Zeile 43: [J

Zeile 44:   call s:check_defined('g:airline_theme_map', {})[J

rufe <SNR>29_check_defined auf[J('g:airline_theme_map', {})

Zeile 1:   if !exists(a:variable)[J

Zeile 2:     let {a:variable} = a:default[J

Zeile 3:   endif[J

<SNR>29_check_defined lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 45:   call extend(g:airline_theme_map, { 'default': 'dark', '\CTomorrow': 'tomorrow', 'base16': 'base16', 'mo[l|n]okai': 'molokai', 'wombat': 'wombat', 'zenburn': 'zenburn', 'solarized': 'solarized', 'flattened': 'solarized', '\CNeoSolarized': 'solarized', }, 'keep')[J

Zeile 56: [J

Zeile 57:   call s:check_defined('g:airline_symbols', {})[J

rufe <SNR>29_check_defined auf[J('g:airline_symbols', {})

Zeile 1:   if !exists(a:variable)[J

Zeile 2:     let {a:variable} = a:default[J

Zeile 3:   endif[J

<SNR>29_check_defined lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 58:   " First define the symbols,[J

Zeile 59:   " that are common in Powerline/Unicode/ASCII mode,[J

Zeile 60:   " then add specific symbols for either mode[J

Zeile 61:   call extend(g:airline_symbols, { 'paste': 'PASTE', 'spell': 'SPELL', 'modified': '+', 'space': ' ', 'keymap': 'Keymap:', 'ellipsis': '...'  }, 'keep')[J

Zeile 69: [J

Zeile 70:   if get(g:, 'airline_powerline_fonts', 0)[J

Zeile 71:     " Symbols for Powerline terminals[J

Zeile 72:     call s:check_defined('g:airline_left_sep', "\ue0b0")      " î°[J

Zeile 73:     call s:check_defined('g:airline_left_alt_sep', "\ue0b1")  " î±[J

Zeile 74:     call s:check_defined('g:airline_right_sep', "\ue0b2")     " î²[J

Zeile 75:     call s:check_defined('g:airline_right_alt_sep', "\ue0b3") " î³[J

Zeile 76:     " ro=î¢, ws=â², lnr=î¡, mlnr=â°, colnr=î£, br=î , nx=É, crypt=ð, dirty=â¡[J

Zeile 77:     "  Note: For powerline, we add an extra space after maxlinenr symbol,[J

Zeile 78:     "  because it is usually setup as a ligature in most powerline patched[J

Zeile 79:     "  fonts. It can be over-ridden by configuring a custom maxlinenr[J

Zeile 80:     call extend(g:airline_symbols, { 'readonly': "\ue0a2", 'whitespace': "\u2632", 'maxlinenr': "\u2630 ", 'linenr': " \ue0a1:", 'colnr': " \ue0a3:", 'branch': "\ue0a0", 'notexists': "\u0246", 'dirty': "\u26a1", 'crypt': nr2char(0x1F512), }, 'keep')[J

Zeile 91:   elseif &encoding==?'utf-8' && !get(g:, "airline_symbols_ascii", 0)[J

Zeile 92:     " Symbols for Unicode terminals[J

Zeile 93:     call s:check_defined('g:airline_left_sep', "")[J

rufe <SNR>29_check_defined auf[J('g:airline_left_sep', '')

Zeile 1:   if !exists(a:variable)[J

Zeile 2:     let {a:variable} = a:default[J

Zeile 3:   endif[J

<SNR>29_check_defined lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 94:     call s:check_defined('g:airline_left_alt_sep', "")[J

rufe <SNR>29_check_defined auf[J('g:airline_left_alt_sep', '')

Zeile 1:   if !exists(a:variable)[J

Zeile 2:     let {a:variable} = a:default[J

Zeile 3:   endif[J

<SNR>29_check_defined lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 95:     call s:check_defined('g:airline_right_sep', "")[J

rufe <SNR>29_check_defined auf[J('g:airline_right_sep', '')

Zeile 1:   if !exists(a:variable)[J

Zeile 2:     let {a:variable} = a:default[J

Zeile 3:   endif[J

<SNR>29_check_defined lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 96:     call s:check_defined('g:airline_right_alt_sep', "")[J

rufe <SNR>29_check_defined auf[J('g:airline_right_alt_sep', '')

Zeile 1:   if !exists(a:variable)[J

Zeile 2:     let {a:variable} = a:default[J

Zeile 3:   endif[J

<SNR>29_check_defined lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 97:     " ro=â, ws=â², lnr=ã, mlnr=â°, colnr=â, br=á , nx=É, crypt=ð[J

Zeile 98:     call extend(g:airline_symbols, { 'readonly': "\u229D", 'whitespace': "\u2632", 'maxlinenr': "\u2630", 'linenr': " \u33d1:", 'colnr': " \u2105:", 'branch': "\u16A0", 'notexists': "\u0246", 'crypt': nr2char(0x1F512), 'dirty': '!', }, 'keep')[J

Zeile 109:   else[J

Zeile 110:     " Symbols for ASCII terminals[J

Zeile 111:     call s:check_defined('g:airline_left_sep', "")[J

Zeile 112:     call s:check_defined('g:airline_left_alt_sep', "")[J

Zeile 113:     call s:check_defined('g:airline_right_sep', "")[J

Zeile 114:     call s:check_defined('g:airline_right_alt_sep', "")[J

Zeile 115:     call extend(g:airline_symbols, { 'readonly': 'RO', 'whitespace': '!', 'linenr': ' ln:', 'maxlinenr': '', 'colnr': ' cn:', 'branch': '', 'notexists': '?', 'crypt': 'cr', 'dirty': '!', }, 'keep')[J

Zeile 126:   endif[J

Zeile 127: [J

Zeile 128:   call airline#parts#define('mode', { 'function': 'airline#parts#mode', 'accent': 'bold', })[J

Suche nach "autoload/airline/parts.vim" in "/c/Users/108012516/.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill,/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-v[J
Suche nach "/c/Users/108012516/.vim/autoload/airline/parts.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/autoload/airline/parts.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/autoload/airline/parts.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/autoload/airline/parts.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight/autoload/airline/parts.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/autoload/airline/parts.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim/autoload/airline/parts.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/autoload/airline/parts.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf/autoload/airline/parts.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter/autoload/airline/parts.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary/autoload/airline/parts.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/autoload/airline/parts.vim"[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/autoload/airline)[J
fchdir() to previous dir[J
Zeile 128: lese "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/autoload/airline/parts.vim"[J
Zeile 1: " MIT License. Copyright (c) 2013-2021 Bailey Ling et al.[J

Zeile 2: " vim: et ts=2 sts=2 sw=2[J

Zeile 3: [J

Zeile 4: scriptencoding utf-8[J

Zeile 5: [J

Zeile 6: let s:parts = {}[J

Zeile 7: [J

Zeile 8: " PUBLIC API {{{[J

Zeile 9: [J

Zeile 10: function! airline#parts#define(key, config)[J

Zeile 18: [J

Zeile 19: function! airline#parts#define_function(key, name)[J

Zeile 22: [J

Zeile 23: function! airline#parts#define_text(key, text)[J

Zeile 26: [J

Zeile 27: function! airline#parts#define_raw(key, raw)[J

Zeile 30: [J

Zeile 31: function! airline#parts#define_minwidth(key, width)[J

Zeile 34: [J

Zeile 35: function! airline#parts#define_condition(key, predicate)[J

Zeile 38: [J

Zeile 39: function! airline#parts#define_accent(key, accent)[J

Zeile 42: [J

Zeile 43: function! airline#parts#define_empty(keys)[J

Zeile 48: [J

Zeile 49: function! airline#parts#get(key)[J

Zeile 52: [J

Zeile 53: " }}}[J

Zeile 54: [J

Zeile 55: function! airline#parts#mode()[J

Zeile 58: [J

Zeile 59: function! airline#parts#crypt()[J

Zeile 62: [J

Zeile 63: function! airline#parts#paste()[J

Zeile 66: [J

Zeile 67: function! airline#parts#spell()[J

Zeile 81: [J

Zeile 82: function! airline#parts#iminsert()[J

Zeile 88: [J

Zeile 89: function! airline#parts#readonly()[J

Zeile 101: [J

Zeile 102: function! airline#parts#filetype()[J

Zeile 107: [J

Zeile 108: function! airline#parts#ffenc()[J

Lesen von /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/autoload/airline/parts.vim beendet[J
weiter in airline#init#bootstrap[J
rufe airline#parts#define auf[J('mode', {'function': 'airline#parts#mode', 'accent': 'bold'})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 132:   call airline#parts#define_function('iminsert', 'airline#parts#iminsert')[J

rufe airline#parts#define_function auf[J('iminsert', 'airline#parts#iminsert')

Zeile 1:   call airline#parts#define(a:key, { 'function': a:name })[J

rufe airline#parts#define auf[J('iminsert', {'function': 'airline#parts#iminsert'})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_function[J

airline#parts#define_function lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 133:   call airline#parts#define_function('paste', 'airline#parts#paste')[J

rufe airline#parts#define_function auf[J('paste', 'airline#parts#paste')

Zeile 1:   call airline#parts#define(a:key, { 'function': a:name })[J

rufe airline#parts#define auf[J('paste', {'function': 'airline#parts#paste'})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_function[J

airline#parts#define_function lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 134:   call airline#parts#define_function('crypt', 'airline#parts#crypt')[J

rufe airline#parts#define_function auf[J('crypt', 'airline#parts#crypt')

Zeile 1:   call airline#parts#define(a:key, { 'function': a:name })[J

rufe airline#parts#define auf[J('crypt', {'function': 'airline#parts#crypt'})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_function[J

airline#parts#define_function lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 135:   call airline#parts#define_function('spell', 'airline#parts#spell')[J

rufe airline#parts#define_function auf[J('spell', 'airline#parts#spell')

Zeile 1:   call airline#parts#define(a:key, { 'function': a:name })[J

rufe airline#parts#define auf[J('spell', {'function': 'airline#parts#spell'})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_function[J

airline#parts#define_function lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 136:   call airline#parts#define_function('filetype', 'airline#parts#filetype')[J

rufe airline#parts#define_function auf[J('filetype', 'airline#parts#filetype')

Zeile 1:   call airline#parts#define(a:key, { 'function': a:name })[J

rufe airline#parts#define auf[J('filetype', {'function': 'airline#parts#filetype'})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_function[J

airline#parts#define_function lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 137:   call airline#parts#define('readonly', { 'function': 'airline#parts#readonly', 'accent': 'red', })[J

rufe airline#parts#define auf[J('readonly', {'function': 'airline#parts#readonly', 'accent': 'red'})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 141:   if get(g:, 'airline_section_c_only_filename',0)[J

Zeile 142:     call airline#parts#define_raw('file', '%t%m')[J

Zeile 143:   else[J

Zeile 144:     call airline#parts#define_raw('file', airline#formatter#short_path#format('%f%m'))[J

Suche nach "autoload/airline/formatter/short_path.vim" in "/c/Users/108012516/.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill,/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons,/c/Users/108012516/dotfiles/vimConf/vim/b[J
Suche nach "/c/Users/108012516/.vim/autoload/airline/formatter/short_path.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/autoload/airline/formatter/short_path.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/autoload/airline/formatter/short_path.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/autoload/airline/formatter/short_path.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight/autoload/airline/formatter/short_path.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/autoload/airline/formatter/short_path.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim/autoload/airline/formatter/short_path.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/autoload/airline/formatter/short_path.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf/autoload/airline/formatter/short_path.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter/autoload/airline/formatter/short_path.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary/autoload/airline/formatter/short_path.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/autoload/airline/formatter/short_path.vim"[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/autoload/airline/formatter)[J
fchdir() to previous dir[J
Zeile 144: lese "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/autoload/airline/formatter/short_path.vim"[J
Zeile 1: scriptencoding utf-8[J

Zeile 2: [J

Zeile 3: function! airline#formatter#short_path#format(val) abort[J

Lesen von /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/autoload/airline/formatter/short_path.vim beendet[J
weiter in airline#init#bootstrap[J
rufe airline#formatter#short_path#format auf[J('%f%m')

Zeile 1:   if get(g:, 'airline_stl_path_style', 'default') ==# 'short'[J

Zeile 2:     return '%{pathshorten(expand("'.a:val.'"))}'[J

Zeile 3:   endif[J

Zeile 4:   return a:val[J

airline#formatter#short_path#format lieferte "'%f%m'" zurÃ¼ck[J

weiter in airline#init#bootstrap[J

rufe airline#parts#define_raw auf[J('file', '%f%m')

Zeile 1:   call airline#parts#define(a:key, { 'raw': a:raw })[J

rufe airline#parts#define auf[J('file', {'raw': '%f%m'})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_raw[J

airline#parts#define_raw lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 145:   endif[J

Zeile 146:   call airline#parts#define_raw('path', '%F%m')[J

rufe airline#parts#define_raw auf[J('path', '%F%m')

Zeile 1:   call airline#parts#define(a:key, { 'raw': a:raw })[J

rufe airline#parts#define auf[J('path', {'raw': '%F%m'})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_raw[J

airline#parts#define_raw lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 147:   call airline#parts#define('linenr', { 'raw': '%{g:airline_symbols.linenr}%l', 'accent': 'bold'})[J

rufe airline#parts#define auf[J('linenr', {'accent': 'bold', 'raw': '%{g:airline_symbols.linenr}%l'})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 150:   call airline#parts#define('maxlinenr', { 'raw': '/%L%{g:airline_symbols.maxlinenr}', 'accent': 'bold'})[J

rufe airline#parts#define auf[J('maxlinenr', {'accent': 'bold', 'raw': '/%L%{g:airline_symbols.maxlinenr}'})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 153:   call airline#parts#define('colnr', { 'raw': '%{g:airline_symbols.colnr}%v', 'accent': 'bold'})[J

rufe airline#parts#define auf[J('colnr', {'accent': 'bold', 'raw': '%{g:airline_symbols.colnr}%v'})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 156:   call airline#parts#define_function('ffenc', 'airline#parts#ffenc')[J

rufe airline#parts#define_function auf[J('ffenc', 'airline#parts#ffenc')

Zeile 1:   call airline#parts#define(a:key, { 'function': a:name })[J

rufe airline#parts#define auf[J('ffenc', {'function': 'airline#parts#ffenc'})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_function[J

airline#parts#define_function lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 157:   call airline#parts#define('hunks', { 'raw': '', 'minwidth': 100})[J

rufe airline#parts#define auf[J('hunks', {'minwidth': 100, 'raw': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 160:   call airline#parts#define('branch', { 'raw': '', 'minwidth': 80})[J

rufe airline#parts#define auf[J('branch', {'minwidth': 80, 'raw': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 163:   call airline#parts#define('coc_status', { 'raw': '', 'accent': 'bold' })[J

rufe airline#parts#define auf[J('coc_status', {'accent': 'bold', 'raw': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 167:   call airline#parts#define('coc_current_function', { 'raw': '', 'accent': 'bold' })[J

rufe airline#parts#define auf[J('coc_current_function', {'accent': 'bold', 'raw': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 171:   call airline#parts#define('lsp_progress', { 'raw': '', 'accent': 'bold' })[J

rufe airline#parts#define auf[J('lsp_progress', {'accent': 'bold', 'raw': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 175:   call airline#parts#define_empty(['obsession', 'tagbar', 'syntastic-warn', 'syntastic-err', 'eclim', 'whitespace','windowswap', 'ycm_error_count', 'ycm_warning_count', 'neomake_error_count', 'neomake_warning_count', 'ale_error_count', 'ale_warning_count', 'lsp_error_count', 'lsp_warning_count', 'scrollbar', 'nvimlsp_error_count', 'nvimlsp_warning_count', 'languageclient_error_count', 'languageclient_warning_count', 'coc_warning_count', 'coc_error_count', 'vista', 'battery'])[J

rufe airline#parts#define_empty auf[J(['obsession', 'tagbar', 'syntastic-war... 'coc_error_count', 'vista', 'battery'])

Zeile 1:   for key in a:keys[J

Zeile 2:     call airline#parts#define_raw(key, '')[J

rufe airline#parts#define_raw auf[J('obsession', '')

Zeile 1:   call airline#parts#define(a:key, { 'raw': a:raw })[J

rufe airline#parts#define auf[J('obsession', {'raw': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_raw[J

airline#parts#define_raw lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_empty[J

Zeile 3:   endfor[J

Zeile 1:   for key in a:keys[J

Zeile 2:     call airline#parts#define_raw(key, '')[J

rufe airline#parts#define_raw auf[J('tagbar', '')

Zeile 1:   call airline#parts#define(a:key, { 'raw': a:raw })[J

rufe airline#parts#define auf[J('tagbar', {'raw': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_raw[J

airline#parts#define_raw lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_empty[J

Zeile 3:   endfor[J

Zeile 1:   for key in a:keys[J

Zeile 2:     call airline#parts#define_raw(key, '')[J

rufe airline#parts#define_raw auf[J('syntastic-warn', '')

Zeile 1:   call airline#parts#define(a:key, { 'raw': a:raw })[J

rufe airline#parts#define auf[J('syntastic-warn', {'raw': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_raw[J

airline#parts#define_raw lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_empty[J

Zeile 3:   endfor[J

Zeile 1:   for key in a:keys[J

Zeile 2:     call airline#parts#define_raw(key, '')[J

rufe airline#parts#define_raw auf[J('syntastic-err', '')

Zeile 1:   call airline#parts#define(a:key, { 'raw': a:raw })[J

rufe airline#parts#define auf[J('syntastic-err', {'raw': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_raw[J

airline#parts#define_raw lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_empty[J

Zeile 3:   endfor[J

Zeile 1:   for key in a:keys[J

Zeile 2:     call airline#parts#define_raw(key, '')[J

rufe airline#parts#define_raw auf[J('eclim', '')

Zeile 1:   call airline#parts#define(a:key, { 'raw': a:raw })[J

rufe airline#parts#define auf[J('eclim', {'raw': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_raw[J

airline#parts#define_raw lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_empty[J

Zeile 3:   endfor[J

Zeile 1:   for key in a:keys[J

Zeile 2:     call airline#parts#define_raw(key, '')[J

rufe airline#parts#define_raw auf[J('whitespace', '')

Zeile 1:   call airline#parts#define(a:key, { 'raw': a:raw })[J

rufe airline#parts#define auf[J('whitespace', {'raw': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_raw[J

airline#parts#define_raw lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_empty[J

Zeile 3:   endfor[J

Zeile 1:   for key in a:keys[J

Zeile 2:     call airline#parts#define_raw(key, '')[J

rufe airline#parts#define_raw auf[J('windowswap', '')

Zeile 1:   call airline#parts#define(a:key, { 'raw': a:raw })[J

rufe airline#parts#define auf[J('windowswap', {'raw': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_raw[J

airline#parts#define_raw lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_empty[J

Zeile 3:   endfor[J

Zeile 1:   for key in a:keys[J

Zeile 2:     call airline#parts#define_raw(key, '')[J

rufe airline#parts#define_raw auf[J('ycm_error_count', '')

Zeile 1:   call airline#parts#define(a:key, { 'raw': a:raw })[J

rufe airline#parts#define auf[J('ycm_error_count', {'raw': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_raw[J

airline#parts#define_raw lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_empty[J

Zeile 3:   endfor[J

Zeile 1:   for key in a:keys[J

Zeile 2:     call airline#parts#define_raw(key, '')[J

rufe airline#parts#define_raw auf[J('ycm_warning_count', '')

Zeile 1:   call airline#parts#define(a:key, { 'raw': a:raw })[J

rufe airline#parts#define auf[J('ycm_warning_count', {'raw': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_raw[J

airline#parts#define_raw lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_empty[J

Zeile 3:   endfor[J

Zeile 1:   for key in a:keys[J

Zeile 2:     call airline#parts#define_raw(key, '')[J

rufe airline#parts#define_raw auf[J('neomake_error_count', '')

Zeile 1:   call airline#parts#define(a:key, { 'raw': a:raw })[J

rufe airline#parts#define auf[J('neomake_error_count', {'raw': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_raw[J

airline#parts#define_raw lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_empty[J

Zeile 3:   endfor[J

Zeile 1:   for key in a:keys[J

Zeile 2:     call airline#parts#define_raw(key, '')[J

rufe airline#parts#define_raw auf[J('neomake_warning_count', '')

Zeile 1:   call airline#parts#define(a:key, { 'raw': a:raw })[J

rufe airline#parts#define auf[J('neomake_warning_count', {'raw': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_raw[J

airline#parts#define_raw lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_empty[J

Zeile 3:   endfor[J

Zeile 1:   for key in a:keys[J

Zeile 2:     call airline#parts#define_raw(key, '')[J

rufe airline#parts#define_raw auf[J('ale_error_count', '')

Zeile 1:   call airline#parts#define(a:key, { 'raw': a:raw })[J

rufe airline#parts#define auf[J('ale_error_count', {'raw': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_raw[J

airline#parts#define_raw lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_empty[J

Zeile 3:   endfor[J

Zeile 1:   for key in a:keys[J

Zeile 2:     call airline#parts#define_raw(key, '')[J

rufe airline#parts#define_raw auf[J('ale_warning_count', '')

Zeile 1:   call airline#parts#define(a:key, { 'raw': a:raw })[J

rufe airline#parts#define auf[J('ale_warning_count', {'raw': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_raw[J

airline#parts#define_raw lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_empty[J

Zeile 3:   endfor[J

Zeile 1:   for key in a:keys[J

Zeile 2:     call airline#parts#define_raw(key, '')[J

rufe airline#parts#define_raw auf[J('lsp_error_count', '')

Zeile 1:   call airline#parts#define(a:key, { 'raw': a:raw })[J

rufe airline#parts#define auf[J('lsp_error_count', {'raw': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_raw[J

airline#parts#define_raw lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_empty[J

Zeile 3:   endfor[J

Zeile 1:   for key in a:keys[J

Zeile 2:     call airline#parts#define_raw(key, '')[J

rufe airline#parts#define_raw auf[J('lsp_warning_count', '')

Zeile 1:   call airline#parts#define(a:key, { 'raw': a:raw })[J

rufe airline#parts#define auf[J('lsp_warning_count', {'raw': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_raw[J

airline#parts#define_raw lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_empty[J

Zeile 3:   endfor[J

Zeile 1:   for key in a:keys[J

Zeile 2:     call airline#parts#define_raw(key, '')[J

rufe airline#parts#define_raw auf[J('scrollbar', '')

Zeile 1:   call airline#parts#define(a:key, { 'raw': a:raw })[J

rufe airline#parts#define auf[J('scrollbar', {'raw': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_raw[J

airline#parts#define_raw lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_empty[J

Zeile 3:   endfor[J

Zeile 1:   for key in a:keys[J

Zeile 2:     call airline#parts#define_raw(key, '')[J

rufe airline#parts#define_raw auf[J('nvimlsp_error_count', '')

Zeile 1:   call airline#parts#define(a:key, { 'raw': a:raw })[J

rufe airline#parts#define auf[J('nvimlsp_error_count', {'raw': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_raw[J

airline#parts#define_raw lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_empty[J

Zeile 3:   endfor[J

Zeile 1:   for key in a:keys[J

Zeile 2:     call airline#parts#define_raw(key, '')[J

rufe airline#parts#define_raw auf[J('nvimlsp_warning_count', '')

Zeile 1:   call airline#parts#define(a:key, { 'raw': a:raw })[J

rufe airline#parts#define auf[J('nvimlsp_warning_count', {'raw': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_raw[J

airline#parts#define_raw lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_empty[J

Zeile 3:   endfor[J

Zeile 1:   for key in a:keys[J

Zeile 2:     call airline#parts#define_raw(key, '')[J

rufe airline#parts#define_raw auf[J('languageclient_error_count', '')

Zeile 1:   call airline#parts#define(a:key, { 'raw': a:raw })[J

rufe airline#parts#define auf[J('languageclient_error_count', {'raw': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_raw[J

airline#parts#define_raw lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_empty[J

Zeile 3:   endfor[J

Zeile 1:   for key in a:keys[J

Zeile 2:     call airline#parts#define_raw(key, '')[J

rufe airline#parts#define_raw auf[J('languageclient_warning_count', '')

Zeile 1:   call airline#parts#define(a:key, { 'raw': a:raw })[J

rufe airline#parts#define auf[J('languageclient_warning_count', {'raw': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_raw[J

airline#parts#define_raw lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_empty[J

Zeile 3:   endfor[J

Zeile 1:   for key in a:keys[J

Zeile 2:     call airline#parts#define_raw(key, '')[J

rufe airline#parts#define_raw auf[J('coc_warning_count', '')

Zeile 1:   call airline#parts#define(a:key, { 'raw': a:raw })[J

rufe airline#parts#define auf[J('coc_warning_count', {'raw': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_raw[J

airline#parts#define_raw lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_empty[J

Zeile 3:   endfor[J

Zeile 1:   for key in a:keys[J

Zeile 2:     call airline#parts#define_raw(key, '')[J

rufe airline#parts#define_raw auf[J('coc_error_count', '')

Zeile 1:   call airline#parts#define(a:key, { 'raw': a:raw })[J

rufe airline#parts#define auf[J('coc_error_count', {'raw': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_raw[J

airline#parts#define_raw lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_empty[J

Zeile 3:   endfor[J

Zeile 1:   for key in a:keys[J

Zeile 2:     call airline#parts#define_raw(key, '')[J

rufe airline#parts#define_raw auf[J('vista', '')

Zeile 1:   call airline#parts#define(a:key, { 'raw': a:raw })[J

rufe airline#parts#define auf[J('vista', {'raw': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_raw[J

airline#parts#define_raw lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_empty[J

Zeile 3:   endfor[J

Zeile 1:   for key in a:keys[J

Zeile 2:     call airline#parts#define_raw(key, '')[J

rufe airline#parts#define_raw auf[J('battery', '')

Zeile 1:   call airline#parts#define(a:key, { 'raw': a:raw })[J

rufe airline#parts#define auf[J('battery', {'raw': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_raw[J

airline#parts#define_raw lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_empty[J

Zeile 3:   endfor[J

Zeile 1:   for key in a:keys[J

Zeile 2:     call airline#parts#define_raw(key, '')[J

Zeile 3:   endfor[J

airline#parts#define_empty lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 183: [J

Zeile 184:   call airline#parts#define_text('bookmark', '')[J

rufe airline#parts#define_text auf[J('bookmark', '')

Zeile 1:   call airline#parts#define(a:key, { 'text': a:text })[J

rufe airline#parts#define auf[J('bookmark', {'text': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_text[J

airline#parts#define_text lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 185:   call airline#parts#define_text('capslock', '')[J

rufe airline#parts#define_text auf[J('capslock', '')

Zeile 1:   call airline#parts#define(a:key, { 'text': a:text })[J

rufe airline#parts#define auf[J('capslock', {'text': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_text[J

airline#parts#define_text lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 186:   call airline#parts#define_text('gutentags', '')[J

rufe airline#parts#define_text auf[J('gutentags', '')

Zeile 1:   call airline#parts#define(a:key, { 'text': a:text })[J

rufe airline#parts#define auf[J('gutentags', {'text': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_text[J

airline#parts#define_text lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 187:   call airline#parts#define_text('gen_tags', '')[J

rufe airline#parts#define_text auf[J('gen_tags', '')

Zeile 1:   call airline#parts#define(a:key, { 'text': a:text })[J

rufe airline#parts#define auf[J('gen_tags', {'text': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_text[J

airline#parts#define_text lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 188:   call airline#parts#define_text('grepper', '')[J

rufe airline#parts#define_text auf[J('grepper', '')

Zeile 1:   call airline#parts#define(a:key, { 'text': a:text })[J

rufe airline#parts#define auf[J('grepper', {'text': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_text[J

airline#parts#define_text lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 189:   call airline#parts#define_text('xkblayout', '')[J

rufe airline#parts#define_text auf[J('xkblayout', '')

Zeile 1:   call airline#parts#define(a:key, { 'text': a:text })[J

rufe airline#parts#define auf[J('xkblayout', {'text': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_text[J

airline#parts#define_text lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 190:   call airline#parts#define_text('keymap', '')[J

rufe airline#parts#define_text auf[J('keymap', '')

Zeile 1:   call airline#parts#define(a:key, { 'text': a:text })[J

rufe airline#parts#define auf[J('keymap', {'text': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_text[J

airline#parts#define_text lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 191:   call airline#parts#define_text('omnisharp', '')[J

rufe airline#parts#define_text auf[J('omnisharp', '')

Zeile 1:   call airline#parts#define(a:key, { 'text': a:text })[J

rufe airline#parts#define auf[J('omnisharp', {'text': ''})

Zeile 1:   let s:parts[a:key] = get(s:parts, a:key, {})[J

Zeile 2:   if exists('g:airline#init#bootstrapping')[J

Zeile 3:     call extend(s:parts[a:key], a:config, 'keep')[J

Zeile 4:   else[J

Zeile 5:     call extend(s:parts[a:key], a:config, 'force')[J

Zeile 6:   endif[J

airline#parts#define lieferte #0 zurÃ¼ck[J

weiter in airline#parts#define_text[J

airline#parts#define_text lieferte #0 zurÃ¼ck[J

weiter in airline#init#bootstrap[J

Zeile 192: [J

Zeile 193:   unlet g:airline#init#bootstrapping[J

airline#init#bootstrap lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/plugin/airline.vim[J

Zeile 294: call s:airline_toggle()[J

rufe <SNR>28_airline_toggle auf[J()

Zeile 1:   if exists("#airline")[J

Zeile 2:     augroup airline[J

Zeile 3:       au![J

Zeile 4:     augroup END[J

Zeile 5:     augroup! airline[J

Zeile 6: [J

Zeile 7:     if exists("s:stl")[J

Zeile 8:       let &stl = s:stl[J

Zeile 9:     endif[J

Zeile 10:     if exists("s:tal")[J

Zeile 11:       let [&tal, &showtabline] = s:tal[J

Zeile 12:     endif[J

Zeile 13:     call airline#highlighter#reset_hlcache()[J

Zeile 14: [J

Zeile 15:     call airline#util#doautocmd('AirlineToggledOff')[J

Zeile 16:   else[J

Zeile 17:     let s:stl = &statusline[J

Zeile 18:     let s:tal = [&tabline, &showtabline][J

Zeile 19:     augroup airline[J

Zeile 20:       autocmd![J

Zeile 21: [J

Zeile 22:       autocmd CmdwinEnter * call airline#add_statusline_func('airline#cmdwinenter') | call <sid>on_window_changed('CmdwinEnter')[J

Zeile 25:       autocmd CmdwinLeave * call airline#remove_statusline_func('airline#cmdwinenter')[J

Zeile 26: [J

Zeile 27:       autocmd ColorScheme * call <sid>on_colorscheme_changed()[J

Zeile 28:       " Set all statuslines to inactive[J

Zeile 29:       autocmd FocusLost * call airline#update_statusline_focuslost()[J

Zeile 30:       " Refresh airline for :syntax off[J

Zeile 31:       autocmd SourcePre */syntax/syntax.vim call airline#extensions#tabline#buffers#invalidate()[J

Zeile 33:       autocmd VimEnter * call <sid>on_window_changed('VimEnter')[J

Zeile 34:       autocmd WinEnter * call <sid>on_window_changed('WinEnter')[J

Zeile 35:       autocmd FileType * call <sid>on_window_changed('FileType')[J

Zeile 36:       autocmd BufWinEnter * call <sid>on_window_changed('BufWinEnter')[J

Zeile 37:       autocmd BufUnload * call <sid>on_window_changed('BufUnload')[J

Zeile 38:       if exists('##CompleteDone')[J

Zeile 39:         autocmd CompleteDone * call <sid>on_window_changed('CompleteDone')[J

Zeile 40:       endif[J

Zeile 41:       " non-trivial number of external plugins use eventignore=all, so we need to account for that[J

Zeile 42:       autocmd CursorMoved * call <sid>on_cursor_moved()[J

Zeile 43: [J

Zeile 44:       autocmd VimResized * call <sid>on_focus_gained()[J

Zeile 45:       if exists('*timer_start') && exists('*funcref')[J

Zeile 46:         " do not trigger FocusGained on startup, it might erase the intro screen (see #1817)[J

Zeile 47:         " needs funcref() (needs 7.4.2137) and timers (7.4.1578)[J

Zeile 48:         let Handler=funcref('<sid>FocusGainedHandler')[J

Zeile 49:         let s:timer=timer_start(5000, Handler)[J

Zeile 50:       else[J

Zeile 51:         autocmd FocusGained * call <sid>on_focus_gained()[J

Zeile 52:       endif[J

Zeile 53: [J

Zeile 54:       if exists("##TerminalOpen")[J

Zeile 55:         " Using the same function with the TermOpen autocommand[J

Zeile 56:         " breaks for Neovim see #1828, looks like a neovim bug.[J

Zeile 57:         autocmd TerminalOpen * :call airline#load_theme() " reload current theme for Terminal, forces the terminal extension to be loaded[J

Zeile 58:       endif[J

Zeile 59:       autocmd TabEnter * :unlet! w:airline_lastmode | let w:airline_active=1[J

Zeile 60:       autocmd BufWritePost */autoload/airline/themes/*.vim exec 'source '.split(globpath(&rtp, 'autoload/airline/themes/'.g:airline_theme.'.vim', 1), "\n")[0] | call airline#load_theme()[J

Zeile 63:       autocmd User AirlineModeChanged nested call airline#mode_changed()[J

Zeile 64: [J

Zeile 65:       if get(g:, 'airline_statusline_ontop', 0)[J

Zeile 66:         " Force update of tabline more often[J

Zeile 67:         autocmd InsertEnter,InsertLeave,CursorMovedI * :call airline#update_tabline()[J

Zeile 68:       endif[J

Zeile 69:     augroup END[J

Zeile 70: [J

Zeile 71:     if !airline#util#stl_disabled(winnr())[J

Suche nach "autoload/airline/util.vim" in "/c/Users/108012516/.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill,/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vi[J
Suche nach "/c/Users/108012516/.vim/autoload/airline/util.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/autoload/airline/util.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/autoload/airline/util.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/autoload/airline/util.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight/autoload/airline/util.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/autoload/airline/util.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim/autoload/airline/util.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/autoload/airline/util.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf/autoload/airline/util.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter/autoload/airline/util.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary/autoload/airline/util.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/autoload/airline/util.vim"[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/autoload/airline)[J
fchdir() to previous dir[J
Zeile 71: lese "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/autoload/airline/util.vim"[J
Zeile 1: " MIT License. Copyright (c) 2013-2021 Bailey Ling Christian Brabandt et al.[J

Zeile 2: " vim: et ts=2 sts=2 sw=2[J

Zeile 3: [J

Zeile 4: scriptencoding utf-8[J

Zeile 5: [J

Zeile 6: call airline#init#bootstrap()[J

rufe airline#init#bootstrap auf[J()

Zeile 1:   if s:loaded[J

Zeile 2:     return[J

airline#init#bootstrap lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/autoload/airline/util.vim[J

Zeile 7: [J

Zeile 8: " couple of static variables. Those should not change within a session, thus[J

Zeile 9: " can be initialized here as "static"[J

Zeile 10: let s:spc = g:airline_symbols.space[J

Zeile 11: let s:nomodeline = (v:version > 703 || (v:version == 703 && has("patch438"))) ? '<nomodeline>' : ''[J

Zeile 12: let s:has_strchars = exists('*strchars')[J

Zeile 13: let s:has_strcharpart = exists('*strcharpart')[J

Zeile 14: let s:focusgained_ignore_time = 0[J

Zeile 15: [J

Zeile 16: " TODO: Try to cache winwidth(0) function[J

Zeile 17: " e.g. store winwidth per window and access that, only update it, if the size[J

Zeile 18: " actually changed.[J

Zeile 19: function! airline#util#winwidth(...) abort[J

Zeile 27: [J

Zeile 28: function! airline#util#shorten(text, winwidth, minwidth, ...)[J

Zeile 41: [J

Zeile 42: function! airline#util#wrap(text, minwidth)[J

Zeile 48: [J

Zeile 49: function! airline#util#append(text, minwidth)[J

Zeile 56: [J

Zeile 57: function! airline#util#warning(msg)[J

Zeile 62: [J

Zeile 63: function! airline#util#prepend(text, minwidth)[J

Zeile 69: [J

Zeile 70: if v:version >= 704[J

Zeile 71:   function! airline#util#getbufvar(bufnr, key, def)[J

Zeile 74: else[J

Zeile 75:   function! airline#util#getbufvar(bufnr, key, def)[J

Zeile 79: endif[J

Zeile 80: [J

Zeile 81: if v:version >= 704[J

Zeile 82:   function! airline#util#getwinvar(winnr, key, def)[J

Zeile 85: else[J

Zeile 86:   function! airline#util#getwinvar(winnr, key, def)[J

Zeile 90: endif[J

Zeile 91: [J

Zeile 92: if v:version >= 704[J

Zeile 93:   function! airline#util#exec_funcrefs(list, ...)[J

Zeile 102: else[J

Zeile 103:   function! airline#util#exec_funcrefs(list, ...)[J

Zeile 115: endif[J

Zeile 116: [J

Zeile 117: " Compatibility wrapper for strchars, in case this vim version does not[J

Zeile 118: " have it natively[J

Zeile 119: function! airline#util#strchars(str)[J

Zeile 126: [J

Zeile 127: function! airline#util#strcharpart(...)[J

Zeile 135: [J

Zeile 136: function! airline#util#ignore_buf(name)[J

Zeile 142: [J

Zeile 143: function! airline#util#has_fugitive()[J

Zeile 149: [J

Zeile 150: function! airline#util#has_gina()[J

Zeile 156: [J

Zeile 157: [J

Zeile 158: function! airline#util#has_lawrencium()[J

Zeile 164: [J

Zeile 165: function! airline#util#has_vcscommand()[J

Zeile 171: [J

Zeile 172: function! airline#util#has_custom_scm()[J

Zeile 175: [J

Zeile 176: function! airline#util#doautocmd(event)[J

Zeile 183: [J

Zeile 184: function! airline#util#themes(match)[J

Zeile 188: [J

Zeile 189: function! airline#util#stl_disabled(winnr)[J

Zeile 198: [J

Zeile 199: function! airline#util#ignore_next_focusgain()[J

Zeile 206: [J

Zeile 207: function! airline#util#try_focusgained()[J

Zeile 216: [J

Zeile 217: function! airline#util#has_vim9_script()[J

Zeile 223: [J

Lesen von /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/autoload/airline/util.vim beendet[J
weiter in <SNR>28_airline_toggle[J
rufe airline#util#stl_disabled auf[J(1)

Zeile 1:   " setting the statusline is disabled,[J

Zeile 2:   " either globally, per window, or per buffer[J

Zeile 3:   " w:airline_disabled is deprecated![J

Zeile 4:   return get(g:, 'airline_disable_statusline', 0) || airline#util#getwinvar(a:winnr, 'airline_disable_statusline', 0) || airline#util#getwinvar(a:winnr, 'airline_disabled', 0) || airline#util#getbufvar(winbufnr(a:winnr), 'airline_disable_statusline', 0)[J

rufe airline#util#getwinvar auf[J(1, 'airline_disable_statusline', 0)

Zeile 1:     return getwinvar(a:winnr, a:key, a:def)[J

airline#util#getwinvar lieferte #0 zurÃ¼ck[J

weiter in airline#util#stl_disabled[J

rufe airline#util#getwinvar auf[J(1, 'airline_disabled', 0)

Zeile 1:     return getwinvar(a:winnr, a:key, a:def)[J

airline#util#getwinvar lieferte #0 zurÃ¼ck[J

weiter in airline#util#stl_disabled[J

rufe airline#util#getbufvar auf[J(1, 'airline_disable_statusline', 0)

Zeile 1:     return getbufvar(a:bufnr, a:key, a:def)[J

airline#util#getbufvar lieferte #0 zurÃ¼ck[J

weiter in airline#util#stl_disabled[J

airline#util#stl_disabled lieferte #0 zurÃ¼ck[J

weiter in <SNR>28_airline_toggle[J

Zeile 72:       if &laststatus < 2[J

Zeile 73:         let _scroll=&scroll[J

Zeile 74:         set laststatus=2[J

Zeile 75:         if &scroll != _scroll[J

Zeile 76:           let &scroll = _scroll[J

Zeile 77:         endif[J

Zeile 78:       endif[J

Zeile 79:     endif[J

Zeile 80:     if s:airline_initialized[J

Zeile 81:       call s:on_window_changed('Init')[J

Zeile 82:     endif[J

Zeile 83: [J

Zeile 84:     call airline#util#doautocmd('AirlineToggledOn')[J

rufe airline#util#doautocmd auf[J('AirlineToggledOn')

Zeile 1:   if !exists('#airline') && a:event !=? 'AirlineToggledOff'[J

Zeile 2:     " airline disabled[J

Zeile 3:     return[J

Zeile 4:   endif[J

Zeile 5:   exe printf("silent doautocmd %s User %s", s:nomodeline, a:event)[J

Zeile 5: silent doautocmd <nomodeline> User AirlineToggledOn[J

airline#util#doautocmd lieferte #0 zurÃ¼ck[J

weiter in <SNR>28_airline_toggle[J

Zeile 85:   endif[J

<SNR>28_airline_toggle lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/plugin/airline.vim[J

Zeile 295: if exists("v:vim_did_enter") && v:vim_did_enter[J

Zeile 296:   call <sid>on_window_changed('VimEnter')[J

Zeile 297: endif[J

Zeile 298: [J

Zeile 299: let &cpo = s:save_cpo[J

Zeile 300: unlet s:save_cpo[J

Lesen von /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/plugin/airline.vim beendet[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes/plugin/**/*.vim"[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes/plugin)[J
fchdir() to previous dir[J
lese "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes/plugin/airline-themes.vim"[J
Zeile 1: " MIT License. Copyright (c) 2013-2021 Bailey Ling & Contributors.[J

Zeile 2: " vim: et ts=2 sts=2 sw=2[J

Zeile 3: [J

Zeile 4: let s:save_cpo = &cpo[J

Zeile 5: set cpo&vim[J

Zeile 6: [J

Zeile 7: scriptencoding utf-8[J

Zeile 8: [J

Zeile 9: if &cp || v:version < 702 || (exists('g:loaded_airline_themes') && g:loaded_airline_themes)[J

Zeile 10:   finish[J

Zeile 11: endif[J

Zeile 12: let g:loaded_airline_themes = 1[J

Zeile 13: [J

Zeile 14: let &cpo = s:save_cpo[J

Zeile 15: unlet s:save_cpo[J

Lesen von /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes/plugin/airline-themes.vim beendet[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow/plugin/**/*.vim"[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow/plugin)[J
fchdir() to previous dir[J
lese "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow/plugin/rainbow.vim"[J
Zeile 1: "==============================================================================[J

Zeile 2: "Script Title: rainbow parentheses improved[J

Zeile 3: "Script Version: 2.52[J

Zeile 4: "Author: luochen1990, Francisco Lopes[J

Zeile 5: "Last Edited: 2013 Sep 12[J

Zeile 6: [J

Zeile 7: " By default, use rainbow colors copied from gruvbox colorscheme (https://github.com/morhetz/gruvbox).[J

Zeile 8: " They are generally good for both light and dark colorschemes.[J

Zeile 9: let s:guifgs = exists('g:rainbow_guifgs')? g:rainbow_guifgs : [ '#458588', '#b16286', '#cc241d', '#d65d0e', '#458588', '#b16286', '#cc241d', '#d65d0e', '#458588', '#b16286', '#cc241d', '#d65d0e', '#458588', '#b16286', '#cc241d', '#d65d0e', ][J

Zeile 27: [J

Zeile 28: let s:ctermfgs = exists('g:rainbow_ctermfgs')? g:rainbow_ctermfgs : [ 'brown', 'Darkblue', 'darkgray', 'darkgreen', 'darkcyan', 'darkred', 'darkmagenta', 'brown', 'gray', 'black', 'darkmagenta', 'Darkblue', 'darkgreen', 'darkcyan', 'darkred', 'red', ][J

Zeile 46: [J

Zeile 47: let s:max = has('gui_running')? len(s:guifgs) : len(s:ctermfgs)[J

Zeile 48: [J

Zeile 49: func! rainbow#load(...)[J

Zeile 100: [J

Zeile 101: func! rainbow#clear()[J

Zeile 111: [J

Zeile 112: func! rainbow#activate()[J

Zeile 126: [J

Zeile 127: func! rainbow#inactivate()[J

Zeile 138: [J

Zeile 139: func! rainbow#toggle()[J

Zeile 146: [J

Zeile 147: if exists('g:rainbow_active') && g:rainbow_active[J

Zeile 148:     if exists('g:rainbow_load_separately')[J

Zeile 149:         let ps = g:rainbow_load_separately[J

Zeile 150:         for i in range(len(ps))[J

Zeile 151:             if len(ps[i]) < 3[J

Zeile 152:                 exe printf('au syntax,colorscheme %s call rainbow#load(ps[%d][1])' , ps[i][0] , i)[J

Zeile 153:             else[J

Zeile 154:                 exe printf('au syntax,colorscheme %s call rainbow#load(ps[%d][1] , ps[%d][2])' , ps[i][0] , i , i)[J

Zeile 155:             endif[J

Zeile 156:         endfor[J

Zeile 157:     else[J

Zeile 158:         au syntax,colorscheme * call rainbow#load()[J

Zeile 159:     endif[J

Zeile 160: endif[J

Zeile 161: [J

Zeile 162: command! RainbowToggle call rainbow#toggle()[J

Zeile 163: command! RainbowLoad call rainbow#load()[J

Lesen von /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow/plugin/rainbow.vim beendet[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/**/*.vim"[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin)[J
fchdir() to previous dir[J
lese "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim"[J
Zeile 1: " Version: 0.11.0[J

Zeile 2: " Webpage: https://github.com/ryanoasis/vim-devicons[J

Zeile 3: " Maintainer: Ryan McIntyre <ryanoasis@gmail.com>[J

Zeile 4: " License: see LICENSE[J

Zeile 5: [J

Zeile 6: let s:version = '0.11.0'[J

Zeile 7: let s:plugin_home = expand('<sfile>:p:h:h')[J

Zeile 8: [J

Zeile 9: " set scriptencoding after 'encoding' and when using multibyte chars[J

Zeile 10: scriptencoding utf-8[J

Zeile 11: [J

Zeile 12: " standard fix/safety: line continuation (avoiding side effects) {{{1[J

Zeile 13: "========================================================================[J

Zeile 14: let s:save_cpo = &cpo[J

Zeile 15: set cpo&vim[J

Zeile 16: [J

Zeile 17: " standard loading / not loading {{{1[J

Zeile 18: "========================================================================[J

Zeile 19: [J

Zeile 20: if exists('g:loaded_webdevicons')[J

Zeile 21:   finish[J

Zeile 22: endif[J

Zeile 23: [J

Zeile 24: let g:loaded_webdevicons = 1[J

Zeile 25: [J

Zeile 26: " config enable / disable settings {{{1[J

Zeile 27: "========================================================================[J

Zeile 28: [J

Zeile 29: ""[J

Zeile 30: " Set the variable to the default value, only if variable is not defined.[J

Zeile 31: "[J

Zeile 32: " @param {string} var Variable name with its scope.[J

Zeile 33: " @param {*} default Default value for variable.[J

Zeile 34: ""[J

Zeile 35: function! s:set(var, default) abort[J

Zeile 44: [J

Zeile 45: call s:set('g:webdevicons_enable', 1)[J

rufe <SNR>35_set auf[J('g:webdevicons_enable', 1)

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 5: let g:webdevicons_enable = 1[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 46: call s:set('g:webdevicons_enable_nerdtree', 1)[J

rufe <SNR>35_set auf[J('g:webdevicons_enable_nerdtree', 1)

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 5: let g:webdevicons_enable_nerdtree = 1[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 47: call s:set('g:webdevicons_enable_unite ', 1)[J

rufe <SNR>35_set auf[J('g:webdevicons_enable_unite ', 1)

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 5: let g:webdevicons_enable_unite  = 1[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 48: call s:set('g:webdevicons_enable_denite', 1)[J

rufe <SNR>35_set auf[J('g:webdevicons_enable_denite', 1)

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 5: let g:webdevicons_enable_denite = 1[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 49: call s:set('g:webdevicons_enable_vimfiler', 1)[J

rufe <SNR>35_set auf[J('g:webdevicons_enable_vimfiler', 1)

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 5: let g:webdevicons_enable_vimfiler = 1[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 50: call s:set('g:webdevicons_enable_ctrlp', 1)[J

rufe <SNR>35_set auf[J('g:webdevicons_enable_ctrlp', 1)

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 5: let g:webdevicons_enable_ctrlp = 1[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 51: call s:set('g:webdevicons_enable_airline_tabline', 1)[J

rufe <SNR>35_set auf[J('g:webdevicons_enable_airline_tabline', 1)

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 5: let g:webdevicons_enable_airline_tabline = 1[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 52: call s:set('g:webdevicons_enable_airline_statusline', 1)[J

rufe <SNR>35_set auf[J('g:webdevicons_enable_airline_statusline', 1)

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 5: let g:webdevicons_enable_airline_statusline = 1[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 53: call s:set('g:webdevicons_enable_airline_statusline_fileformat_symbols', 1)[J

rufe <SNR>35_set auf[J('g:webdevicons_enable_airline_statusline_fileformat_symbols', 1)

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 5: let g:webdevicons_enable_airline_statusline_fileformat_symbols = 1[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 54: call s:set('g:webdevicons_enable_flagship_statusline', 1)[J

rufe <SNR>35_set auf[J('g:webdevicons_enable_flagship_statusline', 1)

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 5: let g:webdevicons_enable_flagship_statusline = 1[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 55: call s:set('g:webdevicons_enable_flagship_statusline_fileformat_symbols', 1)[J

rufe <SNR>35_set auf[J('g:webdevicons_enable_flagship_statusline_fileformat_symbols', 1)

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 5: let g:webdevicons_enable_flagship_statusline_fileformat_symbols = 1[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 56: call s:set('g:webdevicons_enable_startify', 1)[J

rufe <SNR>35_set auf[J('g:webdevicons_enable_startify', 1)

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 5: let g:webdevicons_enable_startify = 1[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 57: call s:set('g:webdevicons_conceal_nerdtree_brackets', 1)[J

rufe <SNR>35_set auf[J('g:webdevicons_conceal_nerdtree_brackets', 1)

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 5: let g:webdevicons_conceal_nerdtree_brackets = 1[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 58: call s:set('g:DevIconsAppendArtifactFix', has('gui_running') ? 1 : 0)[J

rufe <SNR>35_set auf[J('g:DevIconsAppendArtifactFix', 0)

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 5: let g:DevIconsAppendArtifactFix = 0[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 59: call s:set('g:DevIconsArtifactFixChar', ' ')[J

rufe <SNR>35_set auf[J('g:DevIconsArtifactFixChar', ' ')

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 3: let g:DevIconsArtifactFixChar = ' '[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 60: [J

Zeile 61: " config options {{{1[J

Zeile 62: "========================================================================[J

Zeile 63: [J

Zeile 64: call s:set('g:WebDevIconsUnicodeDecorateFileNodes', 1)[J

rufe <SNR>35_set auf[J('g:WebDevIconsUnicodeDecorateFileNodes', 1)

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 5: let g:WebDevIconsUnicodeDecorateFileNodes = 1[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 65: call s:set('g:WebDevIconsUnicodeDecorateFolderNodes', 1)[J

rufe <SNR>35_set auf[J('g:WebDevIconsUnicodeDecorateFolderNodes', 1)

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 5: let g:WebDevIconsUnicodeDecorateFolderNodes = 1[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 66: call s:set('g:DevIconsEnableFoldersOpenClose', 0)[J

rufe <SNR>35_set auf[J('g:DevIconsEnableFoldersOpenClose', 0)

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 5: let g:DevIconsEnableFoldersOpenClose = 0[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 67: call s:set('g:DevIconsEnableFolderPatternMatching', 1)[J

rufe <SNR>35_set auf[J('g:DevIconsEnableFolderPatternMatching', 1)

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 5: let g:DevIconsEnableFolderPatternMatching = 1[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 68: call s:set('g:DevIconsEnableFolderExtensionPatternMatching', 0)[J

rufe <SNR>35_set auf[J('g:DevIconsEnableFolderExtensionPatternMatching', 0)

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 5: let g:DevIconsEnableFolderExtensionPatternMatching = 0[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 69: call s:set('g:DevIconsEnableDistro', 1)[J

rufe <SNR>35_set auf[J('g:DevIconsEnableDistro', 1)

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 5: let g:DevIconsEnableDistro = 1[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 70: call s:set('g:WebDevIconsUnicodeDecorateFolderNodesExactMatches', 1)[J

rufe <SNR>35_set auf[J('g:WebDevIconsUnicodeDecorateFolderNodesExactMatches', 1)

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 5: let g:WebDevIconsUnicodeDecorateFolderNodesExactMatches = 1[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 71: call s:set('g:WebDevIconsUnicodeGlyphDoubleWidth', 1)[J

rufe <SNR>35_set auf[J('g:WebDevIconsUnicodeGlyphDoubleWidth', 1)

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 5: let g:WebDevIconsUnicodeGlyphDoubleWidth = 1[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 72: call s:set('g:WebDevIconsNerdTreeBeforeGlyphPadding', ' ')[J

rufe <SNR>35_set auf[J('g:WebDevIconsNerdTreeBeforeGlyphPadding', ' ')

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 3: let g:WebDevIconsNerdTreeBeforeGlyphPadding = ' '[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 73: call s:set('g:WebDevIconsNerdTreeAfterGlyphPadding', ' ')[J

rufe <SNR>35_set auf[J('g:WebDevIconsNerdTreeAfterGlyphPadding', ' ')

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 3: let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 74: call s:set('g:WebDevIconsNerdTreeGitPluginForceVAlign', 1)[J

rufe <SNR>35_set auf[J('g:WebDevIconsNerdTreeGitPluginForceVAlign', 1)

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 5: let g:WebDevIconsNerdTreeGitPluginForceVAlign = 1[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 75: call s:set('g:NERDTreeUpdateOnCursorHold', 1) " Obsolete: For backward compatibility[J

rufe <SNR>35_set auf[J('g:NERDTreeUpdateOnCursorHold', 1)

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 5: let g:NERDTreeUpdateOnCursorHold = 1[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 76: call s:set('g:NERDTreeGitStatusUpdateOnCursorHold', 1)[J

rufe <SNR>35_set auf[J('g:NERDTreeGitStatusUpdateOnCursorHold', 1)

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 5: let g:NERDTreeGitStatusUpdateOnCursorHold = 1[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 77: call s:set('g:WebDevIconsTabAirLineBeforeGlyphPadding', ' ')[J

rufe <SNR>35_set auf[J('g:WebDevIconsTabAirLineBeforeGlyphPadding', ' ')

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 3: let g:WebDevIconsTabAirLineBeforeGlyphPadding = ' '[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 78: call s:set('g:WebDevIconsTabAirLineAfterGlyphPadding', '')[J

rufe <SNR>35_set auf[J('g:WebDevIconsTabAirLineAfterGlyphPadding', '')

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 3: let g:WebDevIconsTabAirLineAfterGlyphPadding = ''[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 79: [J

Zeile 80: " config defaults {{{1[J

Zeile 81: "========================================================================[J

Zeile 82: [J

Zeile 83: call s:set('g:WebDevIconsUnicodeDecorateFileNodesDefaultSymbol', 'î')[J

rufe <SNR>35_set auf[J('g:WebDevIconsUnicodeDecorateFileNodesDefaultSymbol', 'î')

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 3: let g:WebDevIconsUnicodeDecorateFileNodesDefaultSymbol = 'î'[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 84: call s:set('g:WebDevIconsUnicodeByteOrderMarkerDefaultSymbol', '')[J

rufe <SNR>35_set auf[J('g:WebDevIconsUnicodeByteOrderMarkerDefaultSymbol', '')

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 3: let g:WebDevIconsUnicodeByteOrderMarkerDefaultSymbol = ''[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 85: call s:set('g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol', g:DevIconsEnableFoldersOpenClose ? 'î¿' : 'î')[J

rufe <SNR>35_set auf[J('g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol', 'î')

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 3: let g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol = 'î'[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 86: call s:set('g:WebDevIconsUnicodeDecorateFolderNodesSymlinkSymbol',  'ï')[J

rufe <SNR>35_set auf[J('g:WebDevIconsUnicodeDecorateFolderNodesSymlinkSymbol', 'ï')

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 3: let g:WebDevIconsUnicodeDecorateFolderNodesSymlinkSymbol = 'ï'[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 87: call s:set('g:DevIconsDefaultFolderOpenSymbol', 'î¾')[J

rufe <SNR>35_set auf[J('g:DevIconsDefaultFolderOpenSymbol', 'î¾')

Zeile 1:   if !exists(a:var)[J

Zeile 2:     if type(a:default)[J

Zeile 3:       execute 'let' a:var '=' string(a:default)[J

Zeile 3: let g:DevIconsDefaultFolderOpenSymbol = 'î¾'[J

Zeile 4:     else[J

Zeile 5:       execute 'let' a:var '=' a:default[J

Zeile 6:     endif[J

Zeile 7:   endif[J

<SNR>35_set lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 88: [J

Zeile 89: " functions {{{1[J

Zeile 90: "========================================================================[J

Zeile 91: [J

Zeile 92: " local functions {{{2[J

Zeile 93: "========================================================================[J

Zeile 94: [J

Zeile 95: " scope: local[J

Zeile 96: function s:getDistro()[J

Zeile 124: [J

Zeile 125: " scope: local[J

Zeile 126: function s:isDarwin()[J

Zeile 154: [J

Zeile 155: " scope: local[J

Zeile 156: function! s:strip(input)[J

Zeile 159: [J

Zeile 160: " scope: local[J

Zeile 161: function! s:setDictionaries()[J

Zeile 371: [J

Zeile 372: " scope: local[J

Zeile 373: function! s:setSyntax()[J

Zeile 388: [J

Zeile 389: " scope: local[J

Zeile 390: " stole solution/idea from nerdtree-git-plugin :)[J

Zeile 391: function! s:setCursorHold()[J

Zeile 398: [J

Zeile 399: " scope: local[J

Zeile 400: " stole solution/idea from nerdtree-git-plugin :)[J

Zeile 401: function! s:CursorHoldUpdate()[J

Zeile 427: [J

Zeile 428: " scope: local[J

Zeile 429: function! s:hardRefreshNerdTree()[J

Zeile 435: [J

Zeile 436: " scope: local[J

Zeile 437: function! s:softRefreshNerdTree()[J

Zeile 443: [J

Zeile 444: " local initialization {{{2[J

Zeile 445: "========================================================================[J

Zeile 446: [J

Zeile 447: " scope: local[J

Zeile 448: function! s:initialize()[J

Zeile 460: [J

Zeile 461: [J

Zeile 462: " public functions {{{2[J

Zeile 463: "========================================================================[J

Zeile 464: [J

Zeile 465: " scope: public[J

Zeile 466: function! webdevicons#version()[J

Zeile 469: [J

Zeile 470: " scope: public[J

Zeile 471: function! webdevicons#pluginHome()[J

Zeile 474: [J

Zeile 475: " scope: public[J

Zeile 476: " allow the first version of refresh to now call softRefresh[J

Zeile 477: function! webdevicons#refresh()[J

Zeile 480: [J

Zeile 481: " scope: public[J

Zeile 482: function! webdevicons#hardRefresh()[J

Zeile 486: [J

Zeile 487: " scope: public[J

Zeile 488: function! webdevicons#softRefresh()[J

Zeile 492: [J

Zeile 493: " a:1 (bufferName), a:2 (isDirectory)[J

Zeile 494: " scope: public[J

Zeile 495: function! WebDevIconsGetFileTypeSymbol(...) abort[J

Zeile 542: [J

Zeile 543: " scope: local[J

Zeile 544: " Temporary (hopefully) fix for glyph issues in gvim (proper fix is with the[J

Zeile 545: " actual font patcher)[J

Zeile 546: function! s:DevIconsGetArtifactFix()[J

Zeile 555: [J

Zeile 556: " scope: public[J

Zeile 557: function! WebDevIconsGetFileFormatSymbol(...)[J

Zeile 577: [J

Zeile 578: " for airline plugin {{{3[J

Zeile 579: "========================================================================[J

Zeile 580: [J

Zeile 581: " scope: public[J

Zeile 582: function! AirlineWebDevIcons(...)[J

Zeile 591: [J

Zeile 592: if g:webdevicons_enable == 1 && exists('g:loaded_airline') && g:loaded_airline == 1 && g:webdevicons_enable_airline_statusline[J

Zeile 593:   call airline#add_statusline_func('AirlineWebDevIcons')[J

Suche nach "autoload/airline.vim" in "/c/Users/108012516/.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill,/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-col[J
Suche nach "/c/Users/108012516/.vim/autoload/airline.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/autoload/airline.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/autoload/airline.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/autoload/airline.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight/autoload/airline.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/autoload/airline.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim/autoload/airline.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/autoload/airline.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf/autoload/airline.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter/autoload/airline.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary/autoload/airline.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/autoload/airline.vim"[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/autoload)[J
fchdir() to previous dir[J
Zeile 593: lese "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/autoload/airline.vim"[J
Zeile 1: " MIT License. Copyright (c) 2013-2021 Bailey Ling et al.[J

Zeile 2: " vim: et ts=2 sts=2 sw=2[J

Zeile 3: [J

Zeile 4: scriptencoding utf-8[J

Zeile 5: [J

Zeile 6: let g:airline_statusline_funcrefs = get(g:, 'airline_statusline_funcrefs', [])[J

Zeile 7: let g:airline_inactive_funcrefs = get(g:, 'airline_inactive_statusline_funcrefs', [])[J

Zeile 8: [J

Zeile 9: let s:sections = ['a','b','c','gutter','x','y','z', 'error', 'warning'][J

Zeile 10: let s:contexts = {}[J

Zeile 11: let s:core_funcrefs = [ function('airline#extensions#apply'), function('airline#extensions#default#apply') ][J

Zeile 14: [J

Zeile 15: [J

Zeile 16: function! airline#add_statusline_func(name, ...)[J

Zeile 20: [J

Zeile 21: function! airline#add_inactive_statusline_func(name, ...)[J

Zeile 25: [J

Zeile 26: [J

Zeile 27: function! airline#add_statusline_funcref(function, ...)[J

Zeile 37: [J

Zeile 38: function! airline#remove_statusline_func(name)[J

Zeile 44: [J

Zeile 45: function! airline#add_inactive_statusline_funcref(function, ...)[J

Zeile 55: [J

Zeile 56: function! airline#load_theme()[J

Zeile 76: [J

Zeile 77: " Load an airline theme[J

Zeile 78: function! airline#switch_theme(name, ...)[J

Zeile 118: [J

Zeile 119: " Try to load the right theme for the current colorscheme[J

Zeile 120: function! airline#switch_matching_theme()[J

Zeile 142: [J

Zeile 143: " Update the statusline[J

Zeile 144: function! airline#update_statusline()[J

Zeile 160: [J

Zeile 161: " Function to be called to make all statuslines inactive[J

Zeile 162: " Triggered on FocusLost autocommand[J

Zeile 163: function! airline#update_statusline_focuslost()[J

Zeile 171: [J

Zeile 172: " Function to draw inactive statuslines for inactive windows[J

Zeile 173: function! airline#update_statusline_inactive(range)[J

Zeile 191: [J

Zeile 192: " Gather output from all funcrefs which will later be returned by the[J

Zeile 193: " airline#statusline() function[J

Zeile 194: function! s:invoke_funcrefs(context, funcrefs)[J

Zeile 204: [J

Zeile 205: " Main statusline function per window[J

Zeile 206: " will be set to the statusline option[J

Zeile 207: function! airline#statusline(winnr)[J

Zeile 214: [J

Zeile 215: " Check if mode has changed[J

Zeile 216: function! airline#check_mode(winnr)[J

Zeile 289: [J

Zeile 290: function! airline#update_tabline()[J

Zeile 295: [J

Zeile 296: function! airline#mode_changed()[J

Lesen von /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/autoload/airline.vim beendet[J
weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J
rufe airline#add_statusline_func auf[J('AirlineWebDevIcons')

Zeile 1:   let warn = get(a:, 1, 1)[J

Zeile 2:   call airline#add_statusline_funcref(function(a:name), warn)[J

rufe airline#add_statusline_funcref auf[J(function('AirlineWebDevIcons'), 1)

Zeile 1:   if index(g:airline_statusline_funcrefs, a:function) >= 0[J

Zeile 2:     let warn = get(a:, 1, 1)[J

Zeile 3:     if warn > 0[J

Zeile 4:       call airline#util#warning(printf('The airline statusline funcref "%s" has already been added.', string(a:function)))[J

Zeile 5:     endif[J

Zeile 6:     return[J

Zeile 7:   endif[J

Zeile 8:   call add(g:airline_statusline_funcrefs, a:function)[J

airline#add_statusline_funcref lieferte #0 zurÃ¼ck[J

weiter in airline#add_statusline_func[J

airline#add_statusline_func lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 594: endif[J

Zeile 595: [J

Zeile 596: if g:webdevicons_enable == 1 && g:webdevicons_enable_airline_tabline[J

Zeile 597:   " Store original formatter.[J

Zeile 598:   let g:_webdevicons_airline_orig_formatter = get(g:, 'airline#extensions#tabline#formatter', 'default')[J

Zeile 599:   let g:airline#extensions#tabline#formatter = 'webdevicons'[J

Zeile 600: endif[J

Zeile 601: [J

Zeile 602: " for nerdtree plugin {{{3[J

Zeile 603: "========================================================================[J

Zeile 604: [J

Zeile 605: " scope: public[J

Zeile 606: function! NERDTreeWebDevIconsRefreshListener(event)[J

Zeile 683: [J

Zeile 684: " call setup after processing all the functions (to avoid errors) {{{1[J

Zeile 685: "========================================================================[J

Zeile 686: " had some issues with VimEnter, for now using:[J

Zeile 687: call s:initialize()[J

rufe <SNR>35_initialize auf[J()

Zeile 1:   call s:setDictionaries()[J

rufe <SNR>35_setDictionaries auf[J()

Zeile 1: [J

Zeile 2:   let s:file_node_extensions = { 'styl'     : 'î', 'sass'     : 'î', 'scss'     : 'î', 'htm'      : 'î', 'html'     : 'î', 'slim'     : 'î', 'haml'     : 'î', 'ejs'      : 'î', 'css'      : 'î', 'less'     : 'î', 'md'       : 'î', 'mdx'      : 'î', 'markdown' : 'î', 'rmd'      : 'î', 'json'     : 'î', 'webmanifest' : 'î', 'js'       : 'î', 'mjs'      : 'î', 'jsx'      : 'îº', 'rb'       : 'î', 'gemspec'  : 'î', 'rake'     : 'î', 'php'      : 'î', 'py'       : 'î', 'pyc'      : 'î', 'pyo'      : 'î', 'pyd'      : 'î', 'coffee'   : 'î', 'mustache' : 'î', 'hbs'      : 'î', 'conf'     : 'î', 'ini'      : 'î', 'yml'      : 'î', 'yaml'     : 'î', 'toml'     : 'î', 'bat'      : 'î', 'mk'       : 'î', 'jpg'      : 'î', 'jpeg'     : 'î', 'bmp'      : 'î', 'png'      : 'î', 'webp'     : 'î', 'gif'      : 'î', 'ico'      : 'î', 'twig'     : 'î', 'cpp'      : 'î', 'c++'      : 'î', 'cxx'      : 'î', 'cc'       : 'î',[J

Zeile 123: [J

Zeile 124:   let s:file_node_exact_matches = { 'exact-match-case-sensitive-1.txt' : '1', 'exact-match-case-sensitive-2'     : '2', 'gruntfile.coffee'                 : 'î', 'gruntfile.js'                     : 'î', 'gruntfile.ls'                     : 'î', 'gulpfile.coffee'                  : 'î', 'gulpfile.js'                      : 'î', 'gulpfile.ls'                      : 'î', 'mix.lock'                         : 'î­', 'dropbox'                          : 'î', '.ds_store'                        : 'î', '.gitconfig'                       : 'î', '.gitignore'                       : 'î', '.gitattributes'                   : 'î', '.gitlab-ci.yml'                   : 'ï', '.bashrc'                          : 'î', '.zshrc'                           : 'î', '.zshenv'                          : 'î', '.zprofile'                        : 'î', '.vimrc'                           : 'î«', '.gvimrc'                          : 'î«', '_vimrc'                           : 'î«', '_gvimrc'    [J

Zeile 162: [J

Zeile 163:   let s:file_node_pattern_matches = { '.*jquery.*\.js$'       : 'î', '.*angular.*\.js$'      : 'î', '.*backbone.*\.js$'     : 'î', '.*require.*\.js$'      : 'î°', '.*materialize.*\.js$'  : 'î¶', '.*materialize.*\.css$' : 'î¶', '.*mootools.*\.js$'     : 'î', '.*vimrc.*'             : 'î«', 'Vagrantfile$'          : 'ï¸'}[J

Zeile 174: [J

Zeile 175:   if !exists('g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols')[J

Zeile 176:     let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {}[J

Zeile 177:   endif[J

Zeile 178: [J

Zeile 179:   if !exists('g:WebDevIconsUnicodeDecorateFileNodesExactSymbols')[J

Zeile 180:     " do not remove: exact-match-case-sensitive-*[J

Zeile 181:     let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols = {}[J

Zeile 182:   endif[J

Zeile 183: [J

Zeile 184:   if !exists('g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols')[J

Zeile 185:     let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols = {}[J

Zeile 186:   endif[J

Zeile 187: [J

Zeile 188:   " iterate to fix allow user overriding of specific individual keys in vimrc (only gvimrc was working previously)[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 189:   for [key, val] in items(s:file_node_extensions)[J

Zeile 190:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols, key)[J

Zeile 191:       let g:WebDevIconsUnicodeDecorateFileNodesExtensionSymbols[key] = val[J

Zeile 192:     endif[J

Zeile 193:   endfor[J

Zeile 194: [J

Zeile 195:   " iterate to fix allow user overriding of specific individual keys in vimrc (only gvimrc was working previously)[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 196:   for [key, val] in items(s:file_node_exact_matches)[J

Zeile 197:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesExactSymbols, key)[J

Zeile 198:       let g:WebDevIconsUnicodeDecorateFileNodesExactSymbols[key] = val[J

Zeile 199:     endif[J

Zeile 200:   endfor[J

Zeile 201: [J

Zeile 202:   " iterate to fix allow user overriding of specific individual keys in vimrc (only gvimrc was working previously)[J

Zeile 203:   for [key, val] in items(s:file_node_pattern_matches)[J

Zeile 204:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols, key)[J

Zeile 205:       let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols[key] = val[J

Zeile 206:     endif[J

Zeile 207:   endfor[J

Zeile 203:   for [key, val] in items(s:file_node_pattern_matches)[J

Zeile 204:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols, key)[J

Zeile 205:       let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols[key] = val[J

Zeile 206:     endif[J

Zeile 207:   endfor[J

Zeile 203:   for [key, val] in items(s:file_node_pattern_matches)[J

Zeile 204:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols, key)[J

Zeile 205:       let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols[key] = val[J

Zeile 206:     endif[J

Zeile 207:   endfor[J

Zeile 203:   for [key, val] in items(s:file_node_pattern_matches)[J

Zeile 204:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols, key)[J

Zeile 205:       let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols[key] = val[J

Zeile 206:     endif[J

Zeile 207:   endfor[J

Zeile 203:   for [key, val] in items(s:file_node_pattern_matches)[J

Zeile 204:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols, key)[J

Zeile 205:       let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols[key] = val[J

Zeile 206:     endif[J

Zeile 207:   endfor[J

Zeile 203:   for [key, val] in items(s:file_node_pattern_matches)[J

Zeile 204:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols, key)[J

Zeile 205:       let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols[key] = val[J

Zeile 206:     endif[J

Zeile 207:   endfor[J

Zeile 203:   for [key, val] in items(s:file_node_pattern_matches)[J

Zeile 204:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols, key)[J

Zeile 205:       let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols[key] = val[J

Zeile 206:     endif[J

Zeile 207:   endfor[J

Zeile 203:   for [key, val] in items(s:file_node_pattern_matches)[J

Zeile 204:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols, key)[J

Zeile 205:       let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols[key] = val[J

Zeile 206:     endif[J

Zeile 207:   endfor[J

Zeile 203:   for [key, val] in items(s:file_node_pattern_matches)[J

Zeile 204:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols, key)[J

Zeile 205:       let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols[key] = val[J

Zeile 206:     endif[J

Zeile 207:   endfor[J

Zeile 203:   for [key, val] in items(s:file_node_pattern_matches)[J

Zeile 204:     if !has_key(g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols, key)[J

Zeile 205:       let g:WebDevIconsUnicodeDecorateFileNodesPatternSymbols[key] = val[J

Zeile 206:     endif[J

Zeile 207:   endfor[J

Zeile 208: [J

<SNR>35_setDictionaries lieferte #0 zurÃ¼ck[J

weiter in <SNR>35_initialize[J

Zeile 2:   call s:setSyntax()[J

rufe <SNR>35_setSyntax auf[J()

Zeile 1:   if g:webdevicons_enable_nerdtree == 1 && g:webdevicons_conceal_nerdtree_brackets == 1[J

Zeile 2:     augroup webdevicons_conceal_nerdtree_brackets[J

Zeile 3:       au![J

Zeile 4:       autocmd FileType nerdtree syntax match hideBracketsInNerdTree "\]" contained conceal containedin=NERDTreeFlags[J

Zeile 5:       autocmd FileType nerdtree syntax match hideBracketsInNerdTree "\[" contained conceal containedin=NERDTreeFlags[J

Zeile 6:       autocmd FileType nerdtree syntax match hideBracketsInNerdTree "\]" contained conceal containedin=NERDTreeLinkFile[J

Zeile 7:       autocmd FileType nerdtree syntax match hideBracketsInNerdTree "\]" contained conceal containedin=NERDTreeLinkDir[J

Zeile 8:       autocmd FileType nerdtree syntax match hideBracketsInNerdTree "\[" contained conceal containedin=NERDTreeLinkFile[J

Zeile 9:       autocmd FileType nerdtree syntax match hideBracketsInNerdTree "\[" contained conceal containedin=NERDTreeLinkDir[J

Zeile 10:       autocmd FileType nerdtree setlocal conceallevel=3[J

Zeile 11:       autocmd FileType nerdtree setlocal concealcursor=nvic[J

Zeile 12:     augroup END[J

Zeile 13:   endif[J

<SNR>35_setSyntax lieferte #0 zurÃ¼ck[J

weiter in <SNR>35_initialize[J

Zeile 3:   call s:setCursorHold()[J

rufe <SNR>35_setCursorHold auf[J()

Zeile 1:   if g:webdevicons_enable_nerdtree[J

Zeile 2:     augroup webdevicons_cursor_hold[J

Zeile 3:       autocmd CursorHold * silent! call s:CursorHoldUpdate()[J

Zeile 4:     augroup END[J

Zeile 5:   endif[J

<SNR>35_setCursorHold lieferte #0 zurÃ¼ck[J

weiter in <SNR>35_initialize[J

Zeile 4: [J

Zeile 5:   if exists('g:loaded_flagship') | call devicons#plugins#flagship#init() | endif[J

Zeile 5:  call devicons#plugins#flagship#init() | endif[J

Zeile 5:  endif[J

Zeile 6:   if exists('g:loaded_unite') && g:webdevicons_enable_unite | call devicons#plugins#unite#init() | endif[J

Zeile 6:  call devicons#plugins#unite#init() | endif[J

Zeile 6:  endif[J

Zeile 7:   if exists('g:loaded_denite') && g:webdevicons_enable_denite | call devicons#plugins#denite#init() | endif[J

Zeile 7:  call devicons#plugins#denite#init() | endif[J

Zeile 7:  endif[J

Zeile 8:   if exists('g:loaded_vimfiler') && g:webdevicons_enable_vimfiler | call devicons#plugins#vimfiler#init() | endif[J

Zeile 8:  call devicons#plugins#vimfiler#init() | endif[J

Zeile 8:  endif[J

Zeile 9:   if exists('g:loaded_ctrlp') && g:webdevicons_enable_ctrlp | call devicons#plugins#ctrlp#init() | endif[J

Zeile 9:  call devicons#plugins#ctrlp#init() | endif[J

Zeile 9:  endif[J

Zeile 10:   if exists('g:loaded_startify') && g:webdevicons_enable_startify | call devicons#plugins#startify#init() | endif[J

Zeile 10:  call devicons#plugins#startify#init() | endif[J

Zeile 10:  endif[J

<SNR>35_initialize lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim[J

Zeile 688: [J

Zeile 689: " standard fix/safety: line continuation (avoiding side effects) {{{1[J

Zeile 690: "========================================================================[J

Zeile 691: let &cpo = s:save_cpo[J

Zeile 692: unlet s:save_cpo[J

Zeile 693: [J

Zeile 694: " modeline syntax:[J

Zeile 695: " vim: fdm=marker tabstop=2 softtabstop=2 shiftwidth=2 expandtab:[J

Lesen von /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/plugin/webdevicons.vim beendet[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons/plugin/**/*.vim"[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons/plugin)[J
fchdir() to previous dir[J
lese "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons/plugin/webdevicons.vim"[J
Zeile 1: " Version: 0.11.0[J

Zeile 2: " Webpage: https://github.com/ryanoasis/vim-devicons[J

Zeile 3: " Maintainer: Ryan McIntyre <ryanoasis@gmail.com>[J

Zeile 4: " License: see LICENSE[J

Zeile 5: [J

Zeile 6: let s:version = '0.11.0'[J

Zeile 7: let s:plugin_home = expand('<sfile>:p:h:h')[J

Zeile 8: [J

Zeile 9: " set scriptencoding after 'encoding' and when using multibyte chars[J

Zeile 10: scriptencoding utf-8[J

Zeile 11: [J

Zeile 12: " standard fix/safety: line continuation (avoiding side effects) {{{1[J

Zeile 13: "========================================================================[J

Zeile 14: let s:save_cpo = &cpo[J

Zeile 15: set cpo&vim[J

Zeile 16: [J

Zeile 17: " standard loading / not loading {{{1[J

Zeile 18: "========================================================================[J

Zeile 19: [J

Zeile 20: if exists('g:loaded_webdevicons')[J

Zeile 21:   finish[J

Lesen von /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons/plugin/webdevicons.vim beendet[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/plugin/**/*.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-misc/plugin/**/*.vim"[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-misc/plugin/xolox)[J
fchdir() to previous dir[J
lese "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-misc/plugin/xolox/misc.vim"[J
Zeile 1: " Vim plug-in[J

Zeile 2: " Author: Peter Odding <peter@peterodding.com>[J

Zeile 3: " Last Change: June 21, 2014[J

Zeile 4: " URL: http://peterodding.com/code/vim/misc/[J

Zeile 5: [J

Zeile 6: " Don't source the plug-in when it's already been loaded or &compatible is set.[J

Zeile 7: if &cp || exists('g:loaded_xolox_misc')[J

Zeile 8:   finish[J

Zeile 9: endif[J

Zeile 10: [J

Zeile 11: " Automatic commands used by the vim-misc plug-in.[J

Zeile 12: augroup PluginXoloxMisc[J

Zeile 13:   autocmd! CursorHold,CursorHoldI * call xolox#misc#cursorhold#autocmd()[J

Zeile 14: augroup END[J

Zeile 15: [J

Zeile 16: " Make sure the plug-in is only loaded once.[J

Zeile 17: let g:loaded_xolox_misc = 1[J

Zeile 18: [J

Zeile 19: " vim: ts=2 sw=2 et[J

Lesen von /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-misc/plugin/xolox/misc.vim beendet[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-colorscheme-switcher/plugin/**/*.vim"[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-colorscheme-switcher/plugin)[J
fchdir() to previous dir[J
lese "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-colorscheme-switcher/plugin/colorscheme-switcher.vim"[J
Zeile 1: " Vim plug-in[J

Zeile 2: " Maintainer: Peter Odding <peter@peterodding.com>[J

Zeile 3: " Last Change: June 25, 2014[J

Zeile 4: " URL: http://peterodding.com/code/vim/colorscheme-switcher[J

Zeile 5: [J

Zeile 6: " This Vim plug-in defines commands and key mappings to quickly switch between[J

Zeile 7: " color schemes (with the same &background if so desired).[J

Zeile 8: [J

Zeile 9: if &cp || exists('g:loaded_colorscheme_switcher')[J

Zeile 10:   finish[J

Zeile 11: endif[J

Zeile 12: [J

Zeile 13: " Make sure vim-misc is installed.[J

Zeile 14: try[J

Zeile 15:   " The point of this code is to do something completely innocent while making[J

Zeile 16:   " sure the vim-misc plug-in is installed. We specifically don't use Vim's[J

Zeile 17:   " exists() function because it doesn't load auto-load scripts that haven't[J

Zeile 18:   " already been loaded yet (last tested on Vim 7.3).[J

Zeile 19:   call type(g:xolox#misc#version)[J

Suche nach "autoload/xolox/misc.vim" in "/c/Users/108012516/.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill,/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-[J
Suche nach "/c/Users/108012516/.vim/autoload/xolox/misc.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/autoload/xolox/misc.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/autoload/xolox/misc.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/autoload/xolox/misc.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight/autoload/xolox/misc.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/autoload/xolox/misc.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim/autoload/xolox/misc.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/autoload/xolox/misc.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf/autoload/xolox/misc.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter/autoload/xolox/misc.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary/autoload/xolox/misc.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/autoload/xolox/misc.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes/autoload/xolox/misc.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow/autoload/xolox/misc.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/autoload/xolox/misc.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons/autoload/xolox/misc.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/autoload/xolox/misc.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-misc/autoload/xolox/misc.vim"[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-misc/autoload/xolox)[J
fchdir() to previous dir[J
Zeile 19: lese "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-misc/autoload/xolox/misc.vim"[J
Zeile 1: " The version of my miscellaneous scripts.[J

Zeile 2: "[J

Zeile 3: " Author: Peter Odding <peter@peterodding.com>[J

Zeile 4: " Last Change: May 21, 2015[J

Zeile 5: " URL: http://peterodding.com/code/vim/misc/[J

Zeile 6: [J

Zeile 7: let g:xolox#misc#version = '1.17.6'[J

Lesen von /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-misc/autoload/xolox/misc.vim beendet[J
weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-colorscheme-switcher/plugin/colorscheme-switcher.vim[J
Zeile 20: catch[J

Zeile 21:   echomsg "Warning: The vim-colorscheme-switcher plug-in requires the vim-misc plug-in which seems not to be installed! For more information please review the installation instructions in the readme (also available on the homepage and on GitHub). The vim-colorscheme-switcher plug-in will now be disabled."[J

Zeile 22:   let g:loaded_colorscheme_switcher = 1[J

Zeile 23:   finish[J

Zeile 24: endtry[J

Zeile 25: [J

Zeile 26: if xolox#misc#option#get('colorscheme_switcher_define_mappings', 1)[J

Suche nach "autoload/xolox/misc/option.vim" in "/c/Users/108012516/.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill,/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/aweso[J
Suche nach "/c/Users/108012516/.vim/autoload/xolox/misc/option.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/autoload/xolox/misc/option.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/autoload/xolox/misc/option.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/autoload/xolox/misc/option.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight/autoload/xolox/misc/option.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/autoload/xolox/misc/option.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim/autoload/xolox/misc/option.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/autoload/xolox/misc/option.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf/autoload/xolox/misc/option.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter/autoload/xolox/misc/option.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary/autoload/xolox/misc/option.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/autoload/xolox/misc/option.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes/autoload/xolox/misc/option.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow/autoload/xolox/misc/option.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/autoload/xolox/misc/option.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons/autoload/xolox/misc/option.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/autoload/xolox/misc/option.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-misc/autoload/xolox/misc/option.vim"[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-misc/autoload/xolox/misc)[J
fchdir() to previous dir[J
Zeile 26: lese "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-misc/autoload/xolox/misc/option.vim"[J
Zeile 1: " Vim and plug-in option handling.[J

Zeile 2: "[J

Zeile 3: " Author: Peter Odding <peter@peterodding.com>[J

Zeile 4: " Last Change: April 1, 2015[J

Zeile 5: " URL: http://peterodding.com/code/vim/misc/[J

Zeile 6: [J

Zeile 7: function! xolox#misc#option#get(name, ...) " {{{1[J

Zeile 27: [J

Zeile 28: function! xolox#misc#option#split(value) " {{{1[J

Zeile 42: [J

Zeile 43: function! s:unescape(s)[J

Zeile 46: [J

Zeile 47: function! xolox#misc#option#join(values) " {{{1[J

Zeile 55: [J

Zeile 56: function! s:escape(s)[J

Zeile 59: [J

Zeile 60: function! xolox#misc#option#split_tags(value) " {{{1[J

Zeile 68: [J

Zeile 69: function! s:unescape_tags(s)[J

Zeile 72: [J

Zeile 73: function! xolox#misc#option#join_tags(values) " {{{1[J

Zeile 80: [J

Zeile 81: function! s:escape_tags(s)[J

Zeile 84: [J

Zeile 85: function! xolox#misc#option#eval_tags(value, ...) " {{{1[J

Zeile 115: [J

Zeile 116: " vim: ts=2 sw=2 et[J

Lesen von /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-misc/autoload/xolox/misc/option.vim beendet[J
weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-colorscheme-switcher/plugin/colorscheme-switcher.vim[J
rufe xolox#misc#option#get auf[J('colorscheme_switcher_define_mappings', 1)

Zeile 1:   " Expects one or two arguments: 1. The name of a variable and 2. the default[J

Zeile 2:   " value if the variable does not exist.[J

Zeile 3:   "[J

Zeile 4:   " Returns the value of the variable from a buffer local variable, global[J

Zeile 5:   " variable or the default value, depending on which is defined.[J

Zeile 6:   "[J

Zeile 7:   " This is used by some of my Vim plug-ins for option handling, so that users[J

Zeile 8:   " can customize options for specific buffers.[J

Zeile 9:   if exists('b:' . a:name)[J

Zeile 10:     " Buffer local variable.[J

Zeile 11:     return eval('b:' . a:name)[J

Zeile 12:   elseif exists('g:' . a:name)[J

Zeile 13:     " Global variable.[J

Zeile 14:     return eval('g:' . a:name)[J

Zeile 15:   elseif exists('a:1')[J

Zeile 16:     " Default value.[J

Zeile 17:     return a:1[J

xolox#misc#option#get lieferte #1 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-colorscheme-switcher/plugin/colorscheme-switcher.vim[J

Zeile 27:   inoremap <silent> <F8> <C-O>:NextColorScheme<CR>[J

Zeile 28:   nnoremap <silent> <F8> :NextColorScheme<CR>[J

Zeile 29:   inoremap <silent> <S-F8> <C-O>:PrevColorScheme<CR>[J

Zeile 30:   nnoremap <silent> <S-F8> :PrevColorScheme<CR>[J

Zeile 31:   inoremap <silent> <C-F8> <C-O>:RandomColorScheme<CR>[J

Zeile 32:   nnoremap <silent> <C-F8> :RandomColorScheme<CR>[J

Zeile 33: endif[J

Zeile 34: [J

Zeile 35: command! -bar NextColorScheme call xolox#colorscheme_switcher#next()[J

Zeile 36: command! -bar PrevColorScheme call xolox#colorscheme_switcher#previous()[J

Zeile 37: command! -bar RandomColorScheme call xolox#colorscheme_switcher#random()[J

Zeile 38: [J

Zeile 39: " Don't reload the plug-in once it has loaded successfully.[J

Zeile 40: let g:loaded_colorscheme_switcher = 1[J

Zeile 41: [J

Zeile 42: " vim: ts=2 sw=2 et[J

Lesen von /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-colorscheme-switcher/plugin/colorscheme-switcher.vim beendet[J
Suche nach "/usr/share/vim/vimfiles/plugin/**/*.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-polyglot/plugin/**/*.vim"[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-polyglot/plugin)[J
fchdir() to previous dir[J
lese "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-polyglot/plugin/polyglot.vim"[J
Zeile 1: call polyglot#init#init()[J

rufe polyglot#init#init auf[J()

Zeile 1:   " A no-op as sourcing this file is enough[J

polyglot#init#init lieferte #0 zurÃ¼ck[J

weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-polyglot/plugin/polyglot.vim[J

Zeile 2: [J

Zeile 3: " Turn on filetype plugins (:help filetype-plugin).[J

Zeile 4: if has('autocmd') && !(exists("did_load_filetypes") && exists("did_indent_on"))[J

Zeile 5:   filetype plugin indent on[J

Zeile 6: endif[J

Zeile 7: [J

Zeile 8: " Enable syntax highlighting.[J

Zeile 9: if has('syntax') && !exists('g:syntax_on')[J

Zeile 10:   syntax enable[J

Zeile 11: endif[J

Zeile 12: [J

Zeile 13: " No need to duplicate work[J

Zeile 14: if exists('g:loaded_sensible')[J

Zeile 15:   finish[J

Zeile 16: endif[J

Zeile 17: [J

Zeile 18: " Code taken from https://github.com/tpope/vim-sensible[J

Zeile 19: " and (mostly comments) from https://github.com/sheerun/vimrc[J

Zeile 20: "[J

Zeile 21: " Only settings that matter for proper editing are left[J

Zeile 22: if !has_key(g:polyglot_is_disabled, 'sensible')[J

Zeile 23:   " Allow backspace in insert mode.[J

Zeile 24:   if &backspace == ""[J

Zeile 25:     set backspace=indent,eol,start[J

Zeile 26:   endif[J

Zeile 27: [J

Zeile 28:   " Allow for mappings including `Esc`, while preserving[J

Zeile 29:   " zero timeout after pressing it manually.[J

Zeile 30:   " (only vim needs a fix for this)[J

Zeile 31:   if !has('nvim') && &ttimeoutlen == -1[J

Zeile 32:     set ttimeout[J

Zeile 33:     set ttimeoutlen=100[J

Zeile 34:   endif[J

Zeile 35: [J

Zeile 36:   " Set default whitespace characters when using `:set list`[J

Zeile 37:   if &listchars ==# 'eol:$'[J

Zeile 38:     set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+[J

Zeile 39:   endif[J

Zeile 40: [J

Zeile 41:   " Delete comment character when joining commented lines[J

Zeile 42:   if v:version > 703 || v:version == 703 && has("patch541")[J

Zeile 43:     set formatoptions+=j[J

Zeile 44:   endif[J

Zeile 45: [J

Zeile 46:   " Search upwards for tags file instead only locally[J

Zeile 47:   if has('path_extra')[J

Zeile 48:     setglobal tags-=./tags tags-=./tags; tags^=./tags;[J

Zeile 49:   endif[J

Zeile 50: [J

Zeile 51:   " Fix issues with fish shell[J

Zeile 52:   " https://github.com/tpope/vim-sensible/issues/50[J

Zeile 53:   if &shell =~# 'fish$' && (v:version < 704 || v:version == 704 && !has('patch276'))[J

Zeile 54:     set shell=/usr/bin/env\ bash[J

Zeile 55:   endif[J

Zeile 56: [J

Zeile 57:   " Increase history size to 1000 items.[J

Zeile 58:   if &history < 1000[J

Zeile 59:     set history=1000[J

Zeile 60:   endif[J

Zeile 61: [J

Zeile 62:   " Allow for up to 50 opened tabs on Vim start.[J

Zeile 63:   if &tabpagemax < 50[J

Zeile 64:     set tabpagemax=50[J

Zeile 65:   endif[J

Zeile 66: [J

Zeile 67:   " Reduce updatetime from 4000 to 300 to avoid issues with coc.nvim[J

Zeile 68:   if &updatetime == 4000[J

Zeile 69:     set updatetime=300[J

Zeile 70:   endif[J

Zeile 71: [J

Zeile 72:   " Automatically reload file if changed somewhere else[J

Zeile 73:   redir => capture[J

Zeile 74:   silent autocmd CursorHold[J

Zeile 75:   redir END[J

Zeile 76:   if match(capture, 'checktime') == -1[J

Zeile 77:     augroup polyglot-sensible[J

Zeile 78:       au![J

Zeile 79:       au CursorHold * silent! checktime[J

Zeile 80:     augroup END[J

Zeile 81:   endif[J

Zeile 82: [J

Zeile 83:   " Always save upper case variables to viminfo file.[J

Zeile 84:   if !empty(&viminfo)[J

Zeile 85:     set viminfo^=![J

Zeile 86:   endif[J

Zeile 87: [J

Zeile 88:   " Don't save options in sessions and views[J

Zeile 89:   set sessionoptions-=options[J

Zeile 90:   set viewoptions-=options[J

Zeile 91: [J

Zeile 92:   " Allow color schemes to do bright colors without forcing bold.[J

Zeile 93:   if &t_Co == 8 && $TERM !~# '^Eterm'[J

Zeile 94:     set t_Co=16[J

Zeile 95:   endif[J

Zeile 96: [J

Zeile 97:   " Load matchit.vim, but only if the user hasn't installed a newer version.[J

Zeile 98:   if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''[J

Zeile 99:     runtime! macros/matchit.vim[J

Suche nach "macros/matchit.vim" in "/c/Users/108012516/.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill,/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-color[J
Suche nach "/c/Users/108012516/.vim/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-misc/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-colorscheme-switcher/macros/matchit.vim"[J
Suche nach "/usr/share/vim/vimfiles/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-polyglot/macros/matchit.vim"[J
Suche nach "/usr/share/vim/vim82/macros/matchit.vim"[J
chdir(/usr/share/vim/vim82/macros)[J
fchdir() to previous dir[J
Zeile 99: lese "/usr/share/vim/vim82/macros/matchit.vim"[J
Zeile 1: " Load the matchit package.[J

Zeile 2: " For those users who were loading the matchit plugin from here.[J

Zeile 3: if 1[J

Zeile 4:     packadd matchit[J

Suche nach "pack/*/start/matchit" in "/c/Users/108012516/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim82,/usr/share/vim/vimfiles/after,/c/Users/108012516/.vim/after"[J
Suche nach "/c/Users/108012516/.vim/pack/*/start/matchit"[J
Suche nach "/usr/share/vim/vimfiles/pack/*/start/matchit"[J
Suche nach "/usr/share/vim/vim82/pack/*/start/matchit"[J
Suche nach "/usr/share/vim/vimfiles/after/pack/*/start/matchit"[J
Suche nach "/c/Users/108012516/.vim/after/pack/*/start/matchit"[J
in 'packpath' nicht gefunden: "pack/*/start/matchit"[J
Suche nach "pack/*/opt/matchit" in "/c/Users/108012516/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim82,/usr/share/vim/vimfiles/after,/c/Users/108012516/.vim/after"[J
Suche nach "/c/Users/108012516/.vim/pack/*/opt/matchit"[J
Suche nach "/usr/share/vim/vimfiles/pack/*/opt/matchit"[J
Suche nach "/usr/share/vim/vim82/pack/*/opt/matchit"[J
chdir(/usr/share/vim/vim82)[J
fchdir() to previous dir[J
chdir(/c/Users/108012516/.vim)[J
fchdir() to previous dir[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim)[J
fchdir() to previous dir[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive)[J
fchdir() to previous dir[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter)[J
fchdir() to previous dir[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight)[J
fchdir() to previous dir[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill)[J
fchdir() to previous dir[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim)[J
fchdir() to previous dir[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim)[J
fchdir() to previous dir[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf)[J
fchdir() to previous dir[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter)[J
fchdir() to previous dir[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary)[J
fchdir() to previous dir[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline)[J
fchdir() to previous dir[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes)[J
fchdir() to previous dir[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow)[J
fchdir() to previous dir[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons)[J
fchdir() to previous dir[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons)[J
fchdir() to previous dir[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes)[J
fchdir() to previous dir[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-misc)[J
fchdir() to previous dir[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-colorscheme-switcher)[J
fchdir() to previous dir[J
chdir(/usr/share/vim/vimfiles)[J
fchdir() to previous dir[J
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-polyglot)[J
fchdir() to previous dir[J
chdir(/usr/share/vim/vim82)[J
fchdir() to previous dir[J
chdir(/usr/share/vim/vim82/pack/dist/opt)[J
fchdir() to previous dir[J
chdir(/usr/share/vim/vim82/pack/dist/opt/matchit/plugin)[J
fchdir() to previous dir[J
Zeile 4: lese "/usr/share/vim/vim82/pack/dist/opt/matchit/plugin/matchit.vim"[J
Zeile 1: "  matchit.vim: (global plugin) Extended "%" matching[J

Zeile 2: "  Maintainer:  Christian Brabandt[J

Zeile 3: "  Version:     1.17[J

Zeile 4: "  Last Change: 2019 Oct 24[J

Zeile 5: "  Repository:  https://github.com/chrisbra/matchit[J

Zeile 6: "  Previous URL:http://www.vim.org/script.php?script_id=39[J

Zeile 7: "  Previous Maintainer:  Benji Fisher PhD   <benji@member.AMS.org>[J

Zeile 8: [J

Zeile 9: " Documentation:[J

Zeile 10: "  The documentation is in a separate file: ../doc/matchit.txt[J

Zeile 11: [J

Zeile 12: " Credits:[J

Zeile 13: "  Vim editor by Bram Moolenaar (Thanks, Bram!)[J

Zeile 14: "  Original script and design by Raul Segura Acevedo[J

Zeile 15: "  Support for comments by Douglas Potts[J

Zeile 16: "  Support for back references and other improvements by Benji Fisher[J

Zeile 17: "  Support for many languages by Johannes Zellner[J

Zeile 18: "  Suggestions for improvement, bug reports, and support for additional[J

Zeile 19: "  languages by Jordi-Albert Batalla, Neil Bird, Servatius Brandt, Mark[J

Zeile 20: "  Collett, Stephen Wall, Dany St-Amant, Yuheng Xie, and Johannes Zellner.[J

Zeile 21: [J

Zeile 22: " Debugging:[J

Zeile 23: "  If you'd like to try the built-in debugging commands...[J

Zeile 24: "   :MatchDebug      to activate debugging for the current buffer[J

Zeile 25: "  This saves the values of several key script variables as buffer-local[J

Zeile 26: "  variables.  See the MatchDebug() function, below, for details.[J

Zeile 27: [J

Zeile 28: " TODO:  I should think about multi-line patterns for b:match_words.[J

Zeile 29: "   This would require an option:  how many lines to scan (default 1).[J

Zeile 30: "   This would be useful for Python, maybe also for *ML.[J

Zeile 31: " TODO:  Maybe I should add a menu so that people will actually use some of[J

Zeile 32: "   the features that I have implemented.[J

Zeile 33: " TODO:  Eliminate the MultiMatch function.  Add yet another argument to[J

Zeile 34: "   Match_wrapper() instead.[J

Zeile 35: " TODO:  Allow :let b:match_words = '\(\(foo\)\(bar\)\):\3\2:end\1'[J

Zeile 36: " TODO:  Make backrefs safer by using '\V' (very no-magic).[J

Zeile 37: " TODO:  Add a level of indirection, so that custom % scripts can use my[J

Zeile 38: "   work but extend it.[J

Zeile 39: [J

Zeile 40: " Allow user to prevent loading and prevent duplicate loading.[J

Zeile 41: if exists("g:loaded_matchit") || &cp[J

Zeile 42:   finish[J

Zeile 43: endif[J

Zeile 44: let g:loaded_matchit = 1[J

Zeile 45: [J

Zeile 46: let s:save_cpo = &cpo[J

Zeile 47: set cpo&vim[J

Zeile 48: [J

Zeile 49: nnoremap <silent> <Plug>(MatchitNormalForward)     :<C-U>call matchit#Match_wrapper('',1,'n')<CR>[J

Zeile 50: nnoremap <silent> <Plug>(MatchitNormalBackward)    :<C-U>call matchit#Match_wrapper('',0,'n')<CR>[J

Zeile 51: xnoremap <silent> <Plug>(MatchitVisualForward)     :<C-U>call matchit#Match_wrapper('',1,'v')<CR>m'gv``[J

Zeile 52: xnoremap <silent> <Plug>(MatchitVisualBackward)    :<C-U>call matchit#Match_wrapper('',0,'v')<CR>m'gv``[J

Zeile 53: onoremap <silent> <Plug>(MatchitOperationForward)  :<C-U>call matchit#Match_wrapper('',1,'o')<CR>[J

Zeile 54: onoremap <silent> <Plug>(MatchitOperationBackward) :<C-U>call matchit#Match_wrapper('',0,'o')<CR>[J

Zeile 55: [J

Zeile 56: nmap <silent> %  <Plug>(MatchitNormalForward)[J

Zeile 57: nmap <silent> g% <Plug>(MatchitNormalBackward)[J

Zeile 58: xmap <silent> %  <Plug>(MatchitVisualForward)[J

Zeile 59: xmap <silent> g% <Plug>(MatchitVisualBackward)[J

Zeile 60: omap <silent> %  <Plug>(MatchitOperationForward)[J

Zeile 61: omap <silent> g% <Plug>(MatchitOperationBackward)[J

Zeile 62: [J

Zeile 63: " Analogues of [{ and ]} using matching patterns:[J

Zeile 64: nnoremap <silent> <Plug>(MatchitNormalMultiBackward)    :<C-U>call matchit#MultiMatch("bW", "n")<CR>[J

Zeile 65: nnoremap <silent> <Plug>(MatchitNormalMultiForward)     :<C-U>call matchit#MultiMatch("W",  "n")<CR>[J

Zeile 66: xnoremap <silent> <Plug>(MatchitVisualMultiBackward)    :<C-U>call matchit#MultiMatch("bW", "n")<CR>m'gv``[J

Zeile 67: xnoremap <silent> <Plug>(MatchitVisualMultiForward)     :<C-U>call matchit#MultiMatch("W",  "n")<CR>m'gv``[J

Zeile 68: onoremap <silent> <Plug>(MatchitOperationMultiBackward) :<C-U>call matchit#MultiMatch("bW", "o")<CR>[J

Zeile 69: onoremap <silent> <Plug>(MatchitOperationMultiForward)  :<C-U>call matchit#MultiMatch("W",  "o")<CR>[J

Zeile 70: [J

Zeile 71: nmap <silent> [% <Plug>(MatchitNormalMultiBackward)[J

Zeile 72: nmap <silent> ]% <Plug>(MatchitNormalMultiForward)[J

Zeile 73: xmap <silent> [% <Plug>(MatchitVisualMultiBackward)[J

Zeile 74: xmap <silent> ]% <Plug>(MatchitVisualMultiForward)[J

Zeile 75: omap <silent> [% <Plug>(MatchitOperationMultiBackward)[J

Zeile 76: omap <silent> ]% <Plug>(MatchitOperationMultiForward)[J

Zeile 77: [J

Zeile 78: " text object:[J

Zeile 79: xmap <silent> <Plug>(MatchitVisualTextObject) <Plug>(MatchitVisualMultiBackward)o<Plug>(MatchitVisualMultiForward)[J

Zeile 80: xmap a% <Plug>(MatchitVisualTextObject)[J

Zeile 81: [J

Zeile 82: " Call this function to turn on debugging information.  Every time the main[J

Zeile 83: " script is run, buffer variables will be saved.  These can be used directly[J

Zeile 84: " or viewed using the menu items below.[J

Zeile 85: if !exists(":MatchDebug")[J

Zeile 86:   command! -nargs=0 MatchDebug call matchit#Match_debug()[J

Zeile 87: endif[J

Zeile 88: [J

Zeile 89: let &cpo = s:save_cpo[J

Zeile 90: unlet s:save_cpo[J

Zeile 91: [J

Zeile 92: " vim:sts=2:sw=2:et:[J

Lesen von /usr/share/vim/vim82/pack/dist/opt/matchit/plugin/matchit.vim beendet[J
weiter in /usr/share/vim/vim82/macros/matchit.vim[J
Zeile 4: augroup filetypedetect[J

Zeile 4: augroup END[J

Suche nach "/usr/share/vim/vimfiles/after/pack/*/opt/matchit"[J
Suche nach "/c/Users/108012516/.vim/after/pack/*/opt/matchit"[J
Zeile 5: endif[J

Lesen von /usr/share/vim/vim82/macros/matchit.vim beendet[J
weiter in /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-polyglot/plugin/polyglot.vim[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-polyglot/after/macros/matchit.vim"[J
Suche nach "/usr/share/vim/vimfiles/after/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/after/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/after/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/after/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/after/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight/after/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/after/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim/after/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/after/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf/after/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter/after/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary/after/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/after/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes/after/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow/after/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/after/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons/after/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/after/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-misc/after/macros/matchit.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-colorscheme-switcher/after/macros/matchit.vim"[J
Zeile 100:   endif[J

Zeile 101: [J

Zeile 102:   " `Ctrl-U` in insert mode deletes a lot. Use `Ctrl-G` u to first break undo,[J

Zeile 103:   " so that you can undo `Ctrl-U` without undoing what you typed before it.[J

Zeile 104:   if empty(mapcheck('<C-U>', 'i'))[J

Zeile 105:     inoremap <C-U> <C-G>u<C-U>[J

Zeile 106:   endif[J

Zeile 107: [J

Zeile 108:   if empty(mapcheck('<C-W>', 'i'))[J

Zeile 109:     inoremap <C-W> <C-G>u<C-W>[J

Zeile 110:   endif[J

Zeile 111: endif[J

Lesen von /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-polyglot/plugin/polyglot.vim beendet[J
Suche nach "/usr/share/vim/vim82/plugin/**/*.vim"[J
chdir(/usr/share/vim/vim82/plugin)[J
fchdir() to previous dir[J
lese "/usr/share/vim/vim82/plugin/getscriptPlugin.vim"[J
Zeile 1: " ---------------------------------------------------------------------[J

Zeile 2: " getscriptPlugin.vim[J

Zeile 3: "  Author:^ICharles E. Campbell[J

Zeile 4: "  Date:^INov 29, 2013[J

Zeile 5: "  Installing:^I:help glvs-install[J

Zeile 6: "  Usage:^I:help glvs[J

Zeile 7: "[J

Zeile 8: " GetLatestVimScripts: 642 1 :AutoInstall: getscript.vim[J

Zeile 9: "[J

Zeile 10: " (Rom 15:11 WEB) Again, "Praise the Lord, all you Gentiles!  Let[J

Zeile 11: " all the peoples praise Him."[J

Zeile 12: " ---------------------------------------------------------------------[J

Zeile 13: " Initialization:^I{{{1[J

Zeile 14: " if you're sourcing this file, surely you can't be[J

Zeile 15: " expecting vim to be in its vi-compatible mode[J

Zeile 16: if exists("g:loaded_getscriptPlugin")[J

Zeile 17:  finish[J

Zeile 18: endif[J

Zeile 19: if &cp[J

Zeile 20:  if &verbose[J

Zeile 21:   echo "GetLatestVimScripts is not vi-compatible; not loaded (you need to set nocp)"[J

Zeile 22:  endif[J

Zeile 23:  finish[J

Zeile 24: endif[J

Zeile 25: let g:loaded_getscriptPlugin = "v36"[J

Zeile 26: let s:keepcpo                = &cpo[J

Zeile 27: set cpo&vim[J

Zeile 28: [J

Zeile 29: " ---------------------------------------------------------------------[J

Zeile 30: "  Public Interface: {{{1[J

Zeile 31: com!        -nargs=0 GetLatestVimScripts call getscript#GetLatestVimScripts()[J

Zeile 32: com!        -nargs=0 GetScripts          call getscript#GetLatestVimScripts()[J

Zeile 33: sil! com    -nargs=0 GLVS                call getscript#GetLatestVimScripts()[J

Zeile 34: [J

Zeile 35: " ---------------------------------------------------------------------[J

Zeile 36: " Restore Options: {{{1[J

Zeile 37: let &cpo= s:keepcpo[J

Zeile 38: unlet s:keepcpo[J

Zeile 39: [J

Zeile 40: " ---------------------------------------------------------------------[J

Zeile 41: " vim: ts=8 sts=2 fdm=marker nowrap[J

Lesen von /usr/share/vim/vim82/plugin/getscriptPlugin.vim beendet[J
chdir(/usr/share/vim/vim82/plugin)[J
fchdir() to previous dir[J
lese "/usr/share/vim/vim82/plugin/gzip.vim"[J
Zeile 1: " Vim plugin for editing compressed files.[J

Zeile 2: " Maintainer: Bram Moolenaar <Bram@vim.org>[J

Zeile 3: " Last Change: 2016 Oct 30[J

Zeile 4: [J

Zeile 5: " Exit quickly when:[J

Zeile 6: " - this plugin was already loaded[J

Zeile 7: " - when 'compatible' is set[J

Zeile 8: " - some autocommands are already taking care of compressed files[J

Zeile 9: if exists("loaded_gzip") || &cp || exists("#BufReadPre#*.gz")[J

Zeile 10:   finish[J

Zeile 11: endif[J

Zeile 12: let loaded_gzip = 1[J

Zeile 13: [J

Zeile 14: augroup gzip[J

Zeile 15:   " Remove all gzip autocommands[J

Zeile 16:   au![J

Zeile 17: [J

Zeile 18:   " Enable editing of gzipped files.[J

Zeile 19:   " The functions are defined in autoload/gzip.vim.[J

Zeile 20:   "[J

Zeile 21:   " Set binary mode before reading the file.[J

Zeile 22:   " Use "gzip -d", gunzip isn't always available.[J

Zeile 23:   autocmd BufReadPre,FileReadPre^I*.gz,*.bz2,*.Z,*.lzma,*.xz,*.lz,*.zst,*.br,*.lzo setlocal bin[J

Zeile 24:   autocmd BufReadPost,FileReadPost^I*.gz  call gzip#read("gzip -dn")[J

Zeile 25:   autocmd BufReadPost,FileReadPost^I*.bz2 call gzip#read("bzip2 -d")[J

Zeile 26:   autocmd BufReadPost,FileReadPost^I*.Z   call gzip#read("uncompress")[J

Zeile 27:   autocmd BufReadPost,FileReadPost^I*.lzma call gzip#read("lzma -d")[J

Zeile 28:   autocmd BufReadPost,FileReadPost^I*.xz  call gzip#read("xz -d")[J

Zeile 29:   autocmd BufReadPost,FileReadPost^I*.lz  call gzip#read("lzip -d")[J

Zeile 30:   autocmd BufReadPost,FileReadPost^I*.zst call gzip#read("zstd -d --rm")[J

Zeile 31:   autocmd BufReadPost,FileReadPost^I*.br call gzip#read("brotli -d --rm")[J

Zeile 32:   autocmd BufReadPost,FileReadPost^I*.lzo call gzip#read("lzop -d -U")[J

Zeile 33:   autocmd BufWritePost,FileWritePost^I*.gz  call gzip#write("gzip")[J

Zeile 34:   autocmd BufWritePost,FileWritePost^I*.bz2 call gzip#write("bzip2")[J

Zeile 35:   autocmd BufWritePost,FileWritePost^I*.Z   call gzip#write("compress -f")[J

Zeile 36:   autocmd BufWritePost,FileWritePost^I*.lzma call gzip#write("lzma -z")[J

Zeile 37:   autocmd BufWritePost,FileWritePost^I*.xz  call gzip#write("xz -z")[J

Zeile 38:   autocmd BufWritePost,FileWritePost^I*.lz  call gzip#write("lzip")[J

Zeile 39:   autocmd BufWritePost,FileWritePost^I*.zst  call gzip#write("zstd --rm")[J

Zeile 40:   autocmd BufWritePost,FileWritePost^I*.br  call gzip#write("brotli --rm")[J

Zeile 41:   autocmd BufWritePost,FileWritePost^I*.lzo  call gzip#write("lzop -U")[J

Zeile 42:   autocmd FileAppendPre^I^I^I*.gz  call gzip#appre("gzip -dn")[J

Zeile 43:   autocmd FileAppendPre^I^I^I*.bz2 call gzip#appre("bzip2 -d")[J

Zeile 44:   autocmd FileAppendPre^I^I^I*.Z   call gzip#appre("uncompress")[J

Zeile 45:   autocmd FileAppendPre^I^I^I*.lzma call gzip#appre("lzma -d")[J

Zeile 46:   autocmd FileAppendPre^I^I^I*.xz   call gzip#appre("xz -d")[J

Zeile 47:   autocmd FileAppendPre^I^I^I*.lz   call gzip#appre("lzip -d")[J

Zeile 48:   autocmd FileAppendPre^I^I^I*.zst call gzip#appre("zstd -d --rm")[J

Zeile 49:   autocmd FileAppendPre^I^I^I*.br call gzip#appre("brotli -d --rm")[J

Zeile 50:   autocmd FileAppendPre^I^I^I*.lzo call gzip#appre("lzop -d -U")[J

Zeile 51:   autocmd FileAppendPost^I^I*.gz  call gzip#write("gzip")[J

Zeile 52:   autocmd FileAppendPost^I^I*.bz2 call gzip#write("bzip2")[J

Zeile 53:   autocmd FileAppendPost^I^I*.Z   call gzip#write("compress -f")[J

Zeile 54:   autocmd FileAppendPost^I^I*.lzma call gzip#write("lzma -z")[J

Zeile 55:   autocmd FileAppendPost^I^I*.xz call gzip#write("xz -z")[J

Zeile 56:   autocmd FileAppendPost^I^I*.lz call gzip#write("lzip")[J

Zeile 57:   autocmd FileAppendPost^I^I*.zst call gzip#write("zstd --rm")[J

Zeile 58:   autocmd FileAppendPost^I^I*.br call gzip#write("brotli --rm")[J

Zeile 59:   autocmd FileAppendPost^I^I*.lzo call gzip#write("lzop -U")[J

Zeile 60: augroup END[J

Lesen von /usr/share/vim/vim82/plugin/gzip.vim beendet[J
chdir(/usr/share/vim/vim82/plugin)[J
fchdir() to previous dir[J
lese "/usr/share/vim/vim82/plugin/logiPat.vim"[J
Zeile 1: " LogiPat: Boolean logical pattern matcher[J

Zeile 2: "   Author:  Charles E. Campbell[J

Zeile 3: "   Date:    Apr 04, 2016[J

Zeile 4: "   Version: 4[J

Zeile 5: "   Purpose: to do Boolean-logic based regular expression pattern matching[J

Zeile 6: " Copyright:    Copyright (C) 1999-2011 Charles E. Campbell {{{1[J

Zeile 7: "               Permission is hereby granted to use and distribute this code,[J

Zeile 8: "               with or without modifications, provided that this copyright[J

Zeile 9: "               notice is copied with it. Like most anything else that's free,[J

Zeile 10: "               LogiPat.vim is provided *as is* and comes with no warranty[J

Zeile 11: "               of any kind, either expressed or implied. By using this[J

Zeile 12: "               plugin, you agree that in no event will the copyright[J

Zeile 13: "               holder be liable for any damages resulting from the use[J

Zeile 14: "               of this software.[J

Zeile 15: "[J

Zeile 16: "   Usage: {{{1[J

Zeile 17: "       :LogiPat ...[J

Zeile 18: "[J

Zeile 19: "         Boolean logic supported:[J

Zeile 20: "            () grouping operators[J

Zeile 21: "            !  not the following pattern[J

Zeile 22: "            |  logical or[J

Zeile 23: "            &  logical and[J

Zeile 24: "            "..pattern.."[J

Zeile 25: "^IExample: {{{1[J

Zeile 26: "^I^I:LogiPat !("january"|"february")[J

Zeile 27: "^I^I  would match all strings not containing the strings january[J

Zeile 28: "^I^I  or february[J

Zeile 29: "^IGetLatestVimScripts: 1290 1 :AutoInstall: LogiPat.vim[J

Zeile 30: "[J

Zeile 31: "  Behold, you will conceive in your womb, and bring forth a son, {{{1[J

Zeile 32: "  and will call his name Jesus. He will be great, and will be[J

Zeile 33: "  called the Son of the Most High. The Lord God will give him the[J

Zeile 34: "  throne of his father, David, and he will reign over the house of[J

Zeile 35: "  Jacob forever. There will be no end to his kingdom. (Luke 1:31-33 WEB)[J

Zeile 36: [J

Zeile 37: " ---------------------------------------------------------------------[J

Zeile 38: " Load Once: {{{1[J

Zeile 39: if &cp || exists("loaded_logiPat")[J

Zeile 40:  finish[J

Zeile 41: endif[J

Zeile 42: let g:loaded_logiPat = "v4"[J

Zeile 43: let s:keepcpo        = &cpo[J

Zeile 44: set cpo&vim[J

Zeile 45: "DechoRemOn[J

Zeile 46: [J

Zeile 47: " ---------------------------------------------------------------------[J

Zeile 48: " Public Interface: {{{1[J

Zeile 49: com!     -nargs=* LogiPat^I^Icall   LogiPat(<q-args>,1)[J

Zeile 50: sil! com -nargs=* LP^I^I^Icall   LogiPat(<q-args>,1)[J

Zeile 51: sil! com -nargs=* LPR^I^I^Icall   LogiPat(<q-args>,1,"r")[J

Zeile 52: com!     -nargs=+ LPE^I^I^Iechomsg LogiPat(<q-args>)[J

Zeile 53: com!     -nargs=+ LogiPatFlags^Ilet  s:LogiPatFlags="<args>"[J

Zeile 54: sil! com -nargs=+ LPF^I^I^Ilet  s:LogiPatFlags="<args>"[J

Zeile 55: [J

Zeile 56: " =====================================================================[J

Zeile 57: " Functions: {{{1[J

Zeile 58: [J

Zeile 59: " ---------------------------------------------------------------------[J

Zeile 60: " LogiPat: this function interprets the boolean-logic pattern {{{2[J

Zeile 61: fun! LogiPat(pat,...)[J

Zeile 146: [J

Zeile 147: " ---------------------------------------------------------------------[J

Zeile 148: " s:String: Vim6.4 doesn't have string() {{{2[J

Zeile 149: func! s:String(str)[J

Zeile 152: [J

Zeile 153: " ---------------------------------------------------------------------[J

Zeile 154: " LP_PatPush: {{{2[J

Zeile 155: fun! s:LP_PatPush(pat)[J

Zeile 162: [J

Zeile 163: " ---------------------------------------------------------------------[J

Zeile 164: " LP_PatPop: pop a number/variable from LogiPat's pattern stack {{{2[J

Zeile 165: fun! s:LP_PatPop(lookup)[J

Zeile 178: [J

Zeile 179: " ---------------------------------------------------------------------[J

Zeile 180: " LP_OpPush: {{{2[J

Zeile 181: fun! s:LP_OpPush(op)[J

Zeile 232: [J

Zeile 233: " ---------------------------------------------------------------------[J

Zeile 234: " LP_Execute: execute operators from opstack using pattern stack {{{2[J

Zeile 235: fun! s:LP_Execute(preclvl)[J

Zeile 265: [J

Zeile 266: " ---------------------------------------------------------------------[J

Zeile 267: " LP_Not: writes a logical-not for a pattern {{{2[J

Zeile 268: fun! s:LP_Not(pat)[J

Zeile 279: [J

Zeile 280: " ---------------------------------------------------------------------[J

Zeile 281: " LP_Or: writes a logical-or branch using two patterns {{{2[J

Zeile 282: fun! s:LP_Or(pat1,pat2)[J

Zeile 288: [J

Zeile 289: " ---------------------------------------------------------------------[J

Zeile 290: " LP_And: writes a logical-and concat using two patterns {{{2[J

Zeile 291: fun! s:LP_And(pat1,pat2)[J

Zeile 297: [J

Zeile 298: " ---------------------------------------------------------------------[J

Zeile 299: " StackLook: {{{2[J

Zeile 300: fun! s:StackLook(description)[J

Zeile 334: [J

Zeile 335: " ---------------------------------------------------------------------[J

Zeile 336: "  Cleanup And Modeline: {{{1[J

Zeile 337: let &cpo= s:keepcpo[J

Zeile 338: unlet s:keepcpo[J

Zeile 339: " vim: ts=4 fdm=marker[J

Lesen von /usr/share/vim/vim82/plugin/logiPat.vim beendet[J
chdir(/usr/share/vim/vim82/plugin)[J
fchdir() to previous dir[J
lese "/usr/share/vim/vim82/plugin/manpager.vim"[J
Zeile 1: " Vim plugin for using Vim as manpager.[J

Zeile 2: " Maintainer: Enno Nagel <ennonagel+vim@gmail.com>[J

Zeile 3: " Last Change: 2018 Feb 04[J

Zeile 4: [J

Zeile 5: command! -nargs=0 MANPAGER call s:ManPager() | delcommand MANPAGER[J

Zeile 6: [J

Zeile 7: function! s:ManPager()[J

Lesen von /usr/share/vim/vim82/plugin/manpager.vim beendet[J
chdir(/usr/share/vim/vim82/plugin)[J
fchdir() to previous dir[J
lese "/usr/share/vim/vim82/plugin/matchparen.vim"[J
Zeile 1: " Vim plugin for showing matching parens[J

Zeile 2: " Maintainer:  Bram Moolenaar <Bram@vim.org>[J

Zeile 3: " Last Change: 2021 Apr 08[J

Zeile 4: [J

Zeile 5: " Exit quickly when:[J

Zeile 6: " - this plugin was already loaded (or disabled)[J

Zeile 7: " - when 'compatible' is set[J

Zeile 8: " - the "CursorMoved" autocmd event is not available.[J

Zeile 9: if exists("g:loaded_matchparen") || &cp || !exists("##CursorMoved")[J

Zeile 10:   finish[J

Zeile 11: endif[J

Zeile 12: let g:loaded_matchparen = 1[J

Zeile 13: [J

Zeile 14: if !exists("g:matchparen_timeout")[J

Zeile 15:   let g:matchparen_timeout = 300[J

Zeile 16: endif[J

Zeile 17: if !exists("g:matchparen_insert_timeout")[J

Zeile 18:   let g:matchparen_insert_timeout = 60[J

Zeile 19: endif[J

Zeile 20: [J

Zeile 21: augroup matchparen[J

Zeile 22:   " Replace all matchparen autocommands[J

Zeile 23:   autocmd! CursorMoved,CursorMovedI,WinEnter * call s:Highlight_Matching_Pair()[J

Zeile 24:   autocmd! WinLeave * call s:Remove_Matches()[J

Zeile 25:   if exists('##TextChanged')[J

Zeile 26:     autocmd! TextChanged,TextChangedI * call s:Highlight_Matching_Pair()[J

Zeile 27:   endif[J

Zeile 28: augroup END[J

Zeile 29: [J

Zeile 30: " Skip the rest if it was already done.[J

Zeile 31: if exists("*s:Highlight_Matching_Pair")[J

Zeile 32:   finish[J

Zeile 33: endif[J

Zeile 34: [J

Zeile 35: let s:cpo_save = &cpo[J

Zeile 36: set cpo-=C[J

Zeile 37: [J

Zeile 38: " The function that is invoked (very often) to define a ":match" highlighting[J

Zeile 39: " for any matching paren.[J

Zeile 40: func s:Highlight_Matching_Pair()[J

Zeile 196: [J

Zeile 197: func s:Remove_Matches()[J

Zeile 203: [J

Zeile 204: [J

Zeile 205: " Define commands that will disable and enable the plugin.[J

Zeile 206: command DoMatchParen call s:DoMatchParen()[J

Zeile 207: command NoMatchParen call s:NoMatchParen()[J

Zeile 208: [J

Zeile 209: func s:NoMatchParen()[J

Zeile 216: [J

Zeile 217: func s:DoMatchParen()[J

Zeile 223: [J

Zeile 224: let &cpo = s:cpo_save[J

Zeile 225: unlet s:cpo_save[J

Lesen von /usr/share/vim/vim82/plugin/matchparen.vim beendet[J
chdir(/usr/share/vim/vim82/plugin)[J
fchdir() to previous dir[J
lese "/usr/share/vim/vim82/plugin/netrwPlugin.vim"[J
Zeile 1: " netrwPlugin.vim: Handles file transfer and remote directory listing across a network[J

Zeile 2: "            PLUGIN SECTION[J

Zeile 3: " Date:^I^IFeb 08, 2016 - Jan 07, 2020[J

Zeile 4: " Maintainer:^ICharles E Campbell <NcampObell@SdrPchip.AorgM-NOSPAM>[J

Zeile 5: " GetLatestVimScripts: 1075 1 :AutoInstall: netrw.vim[J

Zeile 6: " Copyright:    Copyright (C) 1999-2013 Charles E. Campbell {{{1[J

Zeile 7: "               Permission is hereby granted to use and distribute this code,[J

Zeile 8: "               with or without modifications, provided that this copyright[J

Zeile 9: "               notice is copied with it. Like anything else that's free,[J

Zeile 10: "               netrw.vim, netrwPlugin.vim, and netrwSettings.vim are provided[J

Zeile 11: "               *as is* and comes with no warranty of any kind, either[J

Zeile 12: "               expressed or implied. By using this plugin, you agree that[J

Zeile 13: "               in no event will the copyright holder be liable for any damages[J

Zeile 14: "               resulting from the use of this software.[J

Zeile 15: "[J

Zeile 16: "  But be doers of the Word, and not only hearers, deluding your own selves {{{1[J

Zeile 17: "  (James 1:22 RSV)[J

Zeile 18: " =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-[J

Zeile 19: " Load Once: {{{1[J

Zeile 20: if &cp || exists("g:loaded_netrwPlugin")[J

Zeile 21:  finish[J

Zeile 22: endif[J

Zeile 23: let g:loaded_netrwPlugin = "v170"[J

Zeile 24: let s:keepcpo = &cpo[J

Zeile 25: set cpo&vim[J

Zeile 26: "DechoRemOn[J

Zeile 27: [J

Zeile 28: " ---------------------------------------------------------------------[J

Zeile 29: " Public Interface: {{{1[J

Zeile 30: [J

Zeile 31: " Local Browsing Autocmds: {{{2[J

Zeile 32: augroup FileExplorer[J

Zeile 33:  au![J

Zeile 34:  au BufLeave *  if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif[J

Zeile 35:  au BufEnter *^Isil call s:LocalBrowse(expand("<amatch>"))[J

Zeile 36:  au VimEnter *^Isil call s:VimEnter(expand("<amatch>"))[J

Zeile 37:  if has("win32") || has("win95") || has("win64") || has("win16")[J

Zeile 38:   au BufEnter .* sil call s:LocalBrowse(expand("<amatch>"))[J

Zeile 39:  endif[J

Zeile 40: augroup END[J

Zeile 41: [J

Zeile 42: " Network Browsing Reading Writing: {{{2[J

Zeile 43: augroup Network[J

Zeile 44:  au![J

Zeile 45:  au BufReadCmd   file://*^I^I^I^I^I^I^I^I^I^I^Icall netrw#FileUrlEdit(expand("<amatch>"))[J

Zeile 46:  au BufReadCmd   ftp://*,rcp://*,scp://*,http://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe "sil doau BufReadPre ".fnameescape(expand("<amatch>"))|call netrw#Nread(2,expand("<amatch>"))|exe "sil doau BufReadPost ".fnameescape(expand("<amatch>"))[J

Zeile 47:  au FileReadCmd  ftp://*,rcp://*,scp://*,http://*,file://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe "sil doau FileReadPre ".fnameescape(expand("<amatch>"))|call netrw#Nread(1,expand("<amatch>"))|exe "sil doau FileReadPost ".fnameescape(expand("<amatch>"))[J

Zeile 48:  au BufWriteCmd  ftp://*,rcp://*,scp://*,http://*,file://*,dav://*,davs://*,rsync://*,sftp://*^I^I^Iexe "sil doau BufWritePre ".fnameescape(expand("<amatch>"))|exe 'Nwrite '.fnameescape(expand("<amatch>"))|exe "sil doau BufWritePost ".fnameescape(expand("<amatch>"))[J

Zeile 49:  au FileWriteCmd ftp://*,rcp://*,scp://*,http://*,file://*,dav://*,davs://*,rsync://*,sftp://*^I^I^Iexe "sil doau FileWritePre ".fnameescape(expand("<amatch>"))|exe "'[,']".'Nwrite '.fnameescape(expand("<amatch>"))|exe "sil doau FileWritePost ".fnameescape(expand("<amatch>"))[J

Zeile 50:  try[J

Zeile 51:   au SourceCmd   ftp://*,rcp://*,scp://*,http://*,file://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe 'Nsource '.fnameescape(expand("<amatch>"))[J

Zeile 52:  catch /^Vim\%((\a\+)\)\=:E216/[J

Zeile 53:   au SourcePre   ftp://*,rcp://*,scp://*,http://*,file://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe 'Nsource '.fnameescape(expand("<amatch>"))[J

Zeile 54:  endtry[J

Zeile 55: augroup END[J

Zeile 56: [J

Zeile 57: " Commands: :Nread, :Nwrite, :NetUserPass {{{2[J

Zeile 58: com! -count=1 -nargs=*^INread^I^Ilet s:svpos= winsaveview()<bar>call netrw#NetRead(<count>,<f-args>)<bar>call winrestview(s:svpos)[J

Zeile 59: com! -range=% -nargs=*^INwrite^I^Ilet s:svpos= winsaveview()<bar><line1>,<line2>call netrw#NetWrite(<f-args>)<bar>call winrestview(s:svpos)[J

Zeile 60: com! -nargs=*^I^INetUserPass^Icall NetUserPass(<f-args>)[J

Zeile 61: com! -nargs=*^I        Nsource^I^Ilet s:svpos= winsaveview()<bar>call netrw#NetSource(<f-args>)<bar>call winrestview(s:svpos)[J

Zeile 62: com! -nargs=?^I^INtree^I^Icall netrw#SetTreetop(1,<q-args>)[J

Zeile 63: [J

Zeile 64: " Commands: :Explore, :Sexplore, Hexplore, Vexplore, Lexplore {{{2[J

Zeile 65: com! -nargs=* -bar -bang -count=0 -complete=dir^IExplore^I^Icall netrw#Explore(<count>,0,0+<bang>0,<q-args>)[J

Zeile 66: com! -nargs=* -bar -bang -count=0 -complete=dir^ISexplore^Icall netrw#Explore(<count>,1,0+<bang>0,<q-args>)[J

Zeile 67: com! -nargs=* -bar -bang -count=0 -complete=dir^IHexplore^Icall netrw#Explore(<count>,1,2+<bang>0,<q-args>)[J

Zeile 68: com! -nargs=* -bar -bang -count=0 -complete=dir^IVexplore^Icall netrw#Explore(<count>,1,4+<bang>0,<q-args>)[J

Zeile 69: com! -nargs=* -bar       -count=0 -complete=dir^ITexplore^Icall netrw#Explore(<count>,0,6        ,<q-args>)[J

Zeile 70: com! -nargs=* -bar -bang^I^I^INexplore^Icall netrw#Explore(-1,0,0,<q-args>)[J

Zeile 71: com! -nargs=* -bar -bang^I^I^IPexplore^Icall netrw#Explore(-2,0,0,<q-args>)[J

Zeile 72: com! -nargs=* -bar -bang -count=0 -complete=dir Lexplore^Icall netrw#Lexplore(<count>,<bang>0,<q-args>)[J

Zeile 73: [J

Zeile 74: " Commands: NetrwSettings {{{2[J

Zeile 75: com! -nargs=0^INetrwSettings^Icall netrwSettings#NetrwSettings()[J

Zeile 76: com! -bang^INetrwClean^Icall netrw#Clean(<bang>0)[J

Zeile 77: [J

Zeile 78: " Maps:[J

Zeile 79: if !exists("g:netrw_nogx")[J

Zeile 80:  if maparg('gx','n') == ""[J

Zeile 81:   if !hasmapto('<Plug>NetrwBrowseX')[J

Zeile 82:    nmap <unique> gx <Plug>NetrwBrowseX[J

Zeile 83:   endif[J

Zeile 84:   nno <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(netrw#GX(),netrw#CheckIfRemote(netrw#GX()))<cr>[J

Zeile 85:  endif[J

Zeile 86:  if maparg('gx','v') == ""[J

Zeile 87:   if !hasmapto('<Plug>NetrwBrowseXVis')[J

Zeile 88:    vmap <unique> gx <Plug>NetrwBrowseXVis[J

Zeile 89:   endif[J

Zeile 90:   vno <silent> <Plug>NetrwBrowseXVis :<c-u>call netrw#BrowseXVis()<cr>[J

Zeile 91:  endif[J

Zeile 92: endif[J

Zeile 93: if exists("g:netrw_usetab") && g:netrw_usetab[J

Zeile 94:  if maparg('<c-tab>','n') == ""[J

Zeile 95:   nmap <unique> <c-tab> <Plug>NetrwShrink[J

Zeile 96:  endif[J

Zeile 97:  nno <silent> <Plug>NetrwShrink :call netrw#Shrink()<cr>[J

Zeile 98: endif[J

Zeile 99: [J

Zeile 100: " ---------------------------------------------------------------------[J

Zeile 101: " LocalBrowse: invokes netrw#LocalBrowseCheck() on directory buffers {{{2[J

Zeile 102: fun! s:LocalBrowse(dirname)[J

Zeile 144: [J

Zeile 145: " ---------------------------------------------------------------------[J

Zeile 146: " s:VimEnter: after all vim startup stuff is done, this function is called. {{{2[J

Zeile 147: "             Its purpose: to look over all windows and run s:LocalBrowse() on[J

Zeile 148: "             them, which checks if they're directories and will create a directory[J

Zeile 149: "             listing when appropriate.[J

Zeile 150: "             It also sets s:vimentered, letting s:LocalBrowse() know that s:VimEnter()[J

Zeile 151: "             has already been called.[J

Zeile 152: fun! s:VimEnter(dirname)[J

Zeile 160: [J

Zeile 161: " ---------------------------------------------------------------------[J

Zeile 162: " NetrwStatusLine: {{{1[J

Zeile 163: fun! NetrwStatusLine()[J

Zeile 174: [J

Zeile 175: " ------------------------------------------------------------------------[J

Zeile 176: " NetUserPass: set username and password for subsequent ftp transfer {{{1[J

Zeile 177: "   Usage:  :call NetUserPass()^I^I^I-- will prompt for userid and password[J

Zeile 178: "^I    :call NetUserPass("uid")^I^I-- will prompt for password[J

Zeile 179: "^I    :call NetUserPass("uid","password") -- sets global userid and password[J

Zeile 180: fun! NetUserPass(...)[J

Zeile 204: [J

Zeile 205: " ------------------------------------------------------------------------[J

Zeile 206: " Modelines And Restoration: {{{1[J

Zeile 207: let &cpo= s:keepcpo[J

Zeile 208: unlet s:keepcpo[J

Zeile 209: " vim:ts=8 fdm=marker[J

Lesen von /usr/share/vim/vim82/plugin/netrwPlugin.vim beendet[J
chdir(/usr/share/vim/vim82/plugin)[J
fchdir() to previous dir[J
lese "/usr/share/vim/vim82/plugin/rrhelper.vim"[J
Zeile 1: " Vim plugin with helper function(s) for --remote-wait[J

Zeile 2: " Maintainer: Flemming Madsen <fma@cci.dk>[J

Zeile 3: " Last Change: 2008 May 29[J

Zeile 4: [J

Zeile 5: " Has this already been loaded?[J

Zeile 6: if exists("loaded_rrhelper") || !has("clientserver")[J

Zeile 7:   finish[J

Lesen von /usr/share/vim/vim82/plugin/rrhelper.vim beendet[J
chdir(/usr/share/vim/vim82/plugin)[J
fchdir() to previous dir[J
lese "/usr/share/vim/vim82/plugin/spellfile.vim"[J
Zeile 1: " Vim plugin for downloading spell files[J

Zeile 2: " Maintainer:  Bram Moolenaar <Bram@vim.org>[J

Zeile 3: " Last Change: 2006 Feb 01[J

Zeile 4: [J

Zeile 5: " Exit quickly when:[J

Zeile 6: " - this plugin was already loaded[J

Zeile 7: " - when 'compatible' is set[J

Zeile 8: " - some autocommands are already taking care of spell files[J

Zeile 9: if exists("loaded_spellfile_plugin") || &cp || exists("#SpellFileMissing")[J

Zeile 10:   finish[J

Zeile 11: endif[J

Zeile 12: let loaded_spellfile_plugin = 1[J

Zeile 13: [J

Zeile 14: " The function is in the autoload directory.[J

Zeile 15: autocmd SpellFileMissing * call spellfile#LoadFile(expand('<amatch>'))[J

Lesen von /usr/share/vim/vim82/plugin/spellfile.vim beendet[J
chdir(/usr/share/vim/vim82/plugin)[J
fchdir() to previous dir[J
lese "/usr/share/vim/vim82/plugin/tarPlugin.vim"[J
Zeile 1: " tarPlugin.vim -- a Vim plugin for browsing tarfiles[J

Zeile 2: " Original was copyright (c) 2002, Michael C. Toren <mct@toren.net>[J

Zeile 3: " Modified by Charles E. Campbell[J

Zeile 4: " Distributed under the GNU General Public License.[J

Zeile 5: "[J

Zeile 6: " Updates are available from <http://michael.toren.net/code/>.  If you[J

Zeile 7: " find this script useful, or have suggestions for improvements, please[J

Zeile 8: " let me know.[J

Zeile 9: " Also look there for further comments and documentation.[J

Zeile 10: "[J

Zeile 11: " This part only sets the autocommands.  The functions are in autoload/tar.vim.[J

Zeile 12: " ---------------------------------------------------------------------[J

Zeile 13: "  Load Once: {{{1[J

Zeile 14: if &cp || exists("g:loaded_tarPlugin")[J

Zeile 15:  finish[J

Zeile 16: endif[J

Zeile 17: let g:loaded_tarPlugin = "v32"[J

Zeile 18: let s:keepcpo          = &cpo[J

Zeile 19: set cpo&vim[J

Zeile 20: [J

Zeile 21: " ---------------------------------------------------------------------[J

Zeile 22: "  Public Interface: {{{1[J

Zeile 23: augroup tar[J

Zeile 24:   au![J

Zeile 25:   au BufReadCmd   tarfile::*^Icall tar#Read(expand("<amatch>"), 1)[J

Zeile 26:   au FileReadCmd  tarfile::*^Icall tar#Read(expand("<amatch>"), 0)[J

Zeile 27:   au BufWriteCmd  tarfile::*^Icall tar#Write(expand("<amatch>"))[J

Zeile 28:   au FileWriteCmd tarfile::*^Icall tar#Write(expand("<amatch>"))[J

Zeile 29: [J

Zeile 30:   if has("unix")[J

Zeile 31:    au BufReadCmd   tarfile::*/*^Icall tar#Read(expand("<amatch>"), 1)[J

Zeile 32:    au FileReadCmd  tarfile::*/*^Icall tar#Read(expand("<amatch>"), 0)[J

Zeile 33:    au BufWriteCmd  tarfile::*/*^Icall tar#Write(expand("<amatch>"))[J

Zeile 34:    au FileWriteCmd tarfile::*/*^Icall tar#Write(expand("<amatch>"))[J

Zeile 35:   endif[J

Zeile 36: [J

Zeile 37:   au BufReadCmd   *.tar.gz^I^Icall tar#Browse(expand("<amatch>"))[J

Zeile 38:   au BufReadCmd   *.tar^I^I^Icall tar#Browse(expand("<amatch>"))[J

Zeile 39:   au BufReadCmd   *.lrp^I^I^Icall tar#Browse(expand("<amatch>"))[J

Zeile 40:   au BufReadCmd   *.tar.bz2^I^Icall tar#Browse(expand("<amatch>"))[J

Zeile 41:   au BufReadCmd   *.tar.Z^I^Icall tar#Browse(expand("<amatch>"))[J

Zeile 42:   au BufReadCmd   *.tbz^I^I^Icall tar#Browse(expand("<amatch>"))[J

Zeile 43:   au BufReadCmd   *.tgz^I^I^Icall tar#Browse(expand("<amatch>"))[J

Zeile 44:   au BufReadCmd   *.tar.lzma^Icall tar#Browse(expand("<amatch>"))[J

Zeile 45:   au BufReadCmd   *.tar.xz^I^Icall tar#Browse(expand("<amatch>"))[J

Zeile 46:   au BufReadCmd   *.txz^I^I^Icall tar#Browse(expand("<amatch>"))[J

Zeile 47:   au BufReadCmd   *.tar.zst^I^Icall tar#Browse(expand("<amatch>"))[J

Zeile 48:   au BufReadCmd   *.tzs^I^I^Icall tar#Browse(expand("<amatch>"))[J

Zeile 49: augroup END[J

Zeile 50: com! -nargs=? -complete=file Vimuntar call tar#Vimuntar(<q-args>)[J

Zeile 51: [J

Zeile 52: " ---------------------------------------------------------------------[J

Zeile 53: " Restoration And Modelines: {{{1[J

Zeile 54: " vim: fdm=marker[J

Zeile 55: let &cpo= s:keepcpo[J

Zeile 56: unlet s:keepcpo[J

Lesen von /usr/share/vim/vim82/plugin/tarPlugin.vim beendet[J
chdir(/usr/share/vim/vim82/plugin)[J
fchdir() to previous dir[J
lese "/usr/share/vim/vim82/plugin/tohtml.vim"[J
Zeile 1: " Vim plugin for converting a syntax highlighted file to HTML.[J

Zeile 2: " Maintainer: Ben Fritz <fritzophrenic@gmail.com>[J

Zeile 3: " Last Change: 2019 Nov 13[J

Zeile 4: "[J

Zeile 5: " The core of the code is in $VIMRUNTIME/autoload/tohtml.vim and[J

Zeile 6: " $VIMRUNTIME/syntax/2html.vim[J

Zeile 7: "[J

Zeile 8: if exists('g:loaded_2html_plugin')[J

Zeile 9:   finish[J

Zeile 10: endif[J

Zeile 11: let g:loaded_2html_plugin = 'vim8.1_v2'[J

Zeile 12: [J

Zeile 13: "[J

Zeile 14: " Changelog: {{{[J

Zeile 15: "   8.1_v2  (this version): - Fix Bitbucket issue #19: fix calculation of tab[J

Zeile 16: "                             stop position to use in expanding a tab, when that[J

Zeile 17: "                             tab occurs after a syntax match which in turn[J

Zeile 18: "                             comes after previously expanded tabs.[J

Zeile 19: "                           - Set eventignore while splitting a window for the[J

Zeile 20: "                             destination file to ignore FileType events;[J

Zeile 21: "                             speeds up processing when the destination file[J

Zeile 22: "                             already exists and HTML highlight takes too long.[J

Zeile 23: "                           - Fix Bitbucket issue #20: progress bar could not be[J

Zeile 24: "                             seen when DiffDelete background color matched[J

Zeile 25: "                             StatusLine background color. Added TOhtmlProgress[J

Zeile 26: "                             highlight group for manual user override, but[J

Zeile 27: "                             calculate it to be visible compared to StatusLine[J

Zeile 28: "                             by default.[J

Zeile 29: "                           - Fix Bitbucket issue #1: Remove workaround for old[J

Zeile 30: "                             browsers which don't support 'ch' CSS unit, since[J

Zeile 31: "                             all modern browsers, including IE>=9, support it.[J

Zeile 32: "                           - Fix Bitbucket issue #10: support termguicolors[J

Zeile 33: "                           - Fix Bitbucket issue #21: default to using[J

Zeile 34: "                             generated content instead of <input> tags for[J

Zeile 35: "                             uncopyable text, so that text is correctly[J

Zeile 36: "                             prevented from being copied in chrome. Use[J

Zeile 37: "                             g:html_use_input_for_pc option to control the[J

Zeile 38: "                             method used.[J

Zeile 39: "                           - Switch to HTML5 to allow using vnu as a validator[J

Zeile 40: "                             in unit test.[J

Zeile 41: "                           - Fix fallback sizing of <input> tags for browsers[J

Zeile 42: "                             without "ch" support.[J

Zeile 43: "                           - Fix cursor on unselectable diff filler text.[J

Zeile 44: "   8.1_v1  (Vim 8.1.0528): - Fix Bitbucket issue #6: Don't generate empty[J

Zeile 45: "                             script tag.[J

Zeile 46: "                           - Fix Bitbucket issue #5: javascript should[J

Zeile 47: "                             declare variables with "var".[J

Zeile 48: "                           - Fix Bitbucket issue #13: errors thrown sourcing[J

Zeile 49: "                             2html.vim directly when plugins not loaded.[J

Zeile 50: "                           - Fix Bitbucket issue #16: support 'vartabstop'.[J

Zeile 51: "[J

Zeile 52: "   7.4 updates: {{{[J

Zeile 53: "   7.4_v2  (Vim 7.4.0899): Fix error raised when converting a diff containing[J

Zeile 54: "                           an empty buffer. Jan Stocker: allow g:html_font to[J

Zeile 55: "                           take a list so it is easier to specfiy fallback[J

Zeile 56: "                           fonts in the generated CSS.[J

Zeile 57: "   7.4_v1  (Vim 7.4.0000): Fix modeline mangling for new "Vim:" format, and[J

Zeile 58: "^I^I^I    also for version-specific modelines like "vim>703:".[J

Zeile 59: "}}}[J

Zeile 60: "[J

Zeile 61: "   7.3 updates: {{{[J

Zeile 62: "   7.3_v14 (Vim 7.3.1246): Allow suppressing line number anchors using[J

Zeile 63: "^I^I^I    g:html_line_ids=0. Allow customizing[J

Zeile 64: "^I^I^I    important IDs (like line IDs and fold IDs) using[J

Zeile 65: "^I^I^I    g:html_id_expr evalutated when the buffer conversion[J

Zeile 66: "^I^I^I    is started.[J

Zeile 67: "   7.3_v13 (Vim 7.3.1088): Keep foldmethod at manual in the generated file and[J

Zeile 68: "^I^I^I    insert modeline to set it to manual.[J

Zeile 69: "^I^I^I    Fix bug: diff mode with 2 unsaved buffers creates a[J

Zeile 70: "^I^I^I    duplicate of one buffer instead of including both.[J

Zeile 71: "^I^I^I    Add anchors to each line so you can put '#L123'[J

Zeile 72: "^I^I^I    or '#123' at the end of the URL to jump to line 123[J

Zeile 73: "^I^I^I    (idea by Andy Spencer). Add javascript to open folds[J

Zeile 74: "^I^I^I    to show the anchor being jumped to if it is hidden.[J

Zeile 75: "^I^I^I    Fix XML validation error: &nsbp; not part of XML.[J

Zeile 76: "^I^I^I    Allow TOhtml to chain together with other commands[J

Zeile 77: "^I^I^I    using |.[J

Zeile 78: "   7.3_v12 (Vim 7.3.0616): Fix modeline mangling to also work for when multiple[J

Zeile 79: "^I^I^I    highlight groups make up the start-of-modeline text.[J

Zeile 80: "^I^I^I    Improve render time of page with uncopyable regions[J

Zeile 81: "^I^I^I    by not using one-input-per-char. Change name of[J

Zeile 82: "^I^I^I    uncopyable option from html_unselectable to[J

Zeile 83: "^I^I^I    html_prevent_copy. Added html_no_invalid option and[J

Zeile 84: "^I^I^I    default to inserting invalid markup for uncopyable[J

Zeile 85: "^I^I^I    regions to prevent MS Word from pasting undeletable[J

Zeile 86: "^I^I^I    <input> elements. Fix 'cpo' handling (Thilo Six).[J

Zeile 87: "^I^I 7.3_v12b1: Add html_unselectable option. Rework logic to[J

Zeile 88: "^I^I^I    eliminate post-processing substitute commands in[J

Zeile 89: "^I^I^I    favor of doing the work up front. Remove unnecessary[J

Zeile 90: "^I^I^I    special treatment of 'LineNr' highlight group. Minor[J

Zeile 91: "^I^I^I    speed improvements. Fix modeline mangling in[J

Zeile 92: "^I^I^I    generated output so it works for text in the first[J

Zeile 93: "^I^I^I    column. Fix missing line number and fold column in[J

Zeile 94: "^I^I^I    diff filler lines. Fix that some fonts have a 1px[J

Zeile 95: "^I^I^I    gap (using a dirty hack, improvements welcome). Add[J

Zeile 96: "^I^I^I    "colorscheme" meta tag. Does NOT include support for[J

Zeile 97: "^I^I^I    the new default foldtext added in v11, as the patch[J

Zeile 98: "^I^I^I    adding it has not yet been included in Vim.[J

Zeile 99: "   7.3_v11 ( unreleased ): Support new default foldtext from patch by Christian[J

Zeile 100: "^I^I^I    Brabandt in[J

Zeile 101: "^I^I^I    http://groups.google.com/d/topic/vim_dev/B6FSGfq9VoI/discussion.[J

Zeile 102: "^I^I^I    This patch has not yet been included in Vim, thus[J

Zeile 103: "^I^I^I    these changes are removed in the next version.[J

Zeile 104: "   7.3_v10 (Vim 7.3.0227): Fix error E684 when converting a range wholly inside[J

Zeile 105: "^I^I^I    multiple nested folds with dynamic folding on.[J

Zeile 106: "^I^I^I    Also fix problem with foldtext in this situation.[J

Zeile 107: "   7.3_v9  (Vim 7.3.0170): Add html_pre_wrap option active with html_use_css[J

Zeile 108: "^I^I^I    and without html_no_pre, default value same as[J

Zeile 109: "^I^I^I    'wrap' option, (Andy Spencer). Don't use[J

Zeile 110: "^I^I^I    'fileencoding' for converted document encoding if[J

Zeile 111: "^I^I^I    'buftype' indicates a special buffer which isn't[J

Zeile 112: "^I^I^I    written.[J

Zeile 113: "   7.3_v8  (Vim 7.3.0100): Add html_expand_tabs option to allow leaving tab[J

Zeile 114: "^I^I^I    characters in generated output (Andy Spencer).[J

Zeile 115: "^I^I^I    Escape text that looks like a modeline so Vim[J

Zeile 116: "^I^I^I    doesn't use anything in the converted HTML as a[J

Zeile 117: "^I^I^I    modeline. Bugfixes: Fix folding when a fold starts[J

Zeile 118: "^I^I^I    before the conversion range. Remove fold column when[J

Zeile 119: "^I^I^I    there are no folds.[J

Zeile 120: "   7.3_v7  (Vim 7-3-0063): see betas released on vim_dev below:[J

Zeile 121: "^I^I  7.3_v7b3: Fixed bug, convert Unicode to UTF-8 all the way.[J

Zeile 122: "^I^I  7.3_v7b2: Remove automatic detection of encodings that are not[J

Zeile 123: "^I^I^I    supported by all major browsers according to[J

Zeile 124: "^I^I^I    http://wiki.whatwg.org/wiki/Web_Encodings and[J

Zeile 125: "^I^I^I    convert to UTF-8 for all Unicode encodings. Make[J

Zeile 126: "^I^I^I    HTML encoding to Vim encoding detection be[J

Zeile 127: "^I^I^I    case-insensitive for built-in pairs.[J

Zeile 128: "^I^I  7.3_v7b1: Remove use of setwinvar() function which cannot be[J

Zeile 129: "^I^I^I    called in restricted mode (Andy Spencer). Use[J

Zeile 130: "^I^I^I    'fencoding' instead of 'encoding' to determine by[J

Zeile 131: "^I^I^I    charset, and make sure the 'fenc' of the generated[J

Zeile 132: "^I^I^I    file matches its indicated charset. Add charsets for[J

Zeile 133: "^I^I^I    all of Vim's natively supported encodings.[J

Zeile 134: "   7.3_v6  (Vim 7.3.0000): Really fix bug with 'nowrapscan', 'magic' and other[J

Zeile 135: "^I^I^I    user settings interfering with diff mode generation,[J

Zeile 136: "^I^I^I    trailing whitespace (e.g. line number column) when[J

Zeile 137: "^I^I^I    using html_no_pre, and bugs when using[J

Zeile 138: "^I^I^I    html_hover_unfold.[J

Zeile 139: "   7.3_v5  ( unreleased ): Fix bug with 'nowrapscan' and also with out-of-sync[J

Zeile 140: "^I^I^I    folds in diff mode when first line was folded.[J

Zeile 141: "   7.3_v4  (Vim 7.3.0000): Bugfixes, especially for xhtml markup, and diff mode[J

Zeile 142: "   7.3_v3  (Vim 7.3.0000): Refactor option handling and make html_use_css[J

Zeile 143: "^I^I^I    default to true when not set to anything. Use strict[J

Zeile 144: "^I^I^I    doctypes where possible. Rename use_xhtml option to[J

Zeile 145: "^I^I^I    html_use_xhtml for consistency. Use .xhtml extension[J

Zeile 146: "^I^I^I    when using this option. Add meta tag for settings.[J

Zeile 147: "   7.3_v2  (Vim 7.3.0000): Fix syntax highlighting in diff mode to use both the[J

Zeile 148: "^I^I^I    diff colors and the normal syntax colors[J

Zeile 149: "   7.3_v1  (Vim 7.3.0000): Add conceal support and meta tags in output[J

Zeile 150: "}}}[J

Zeile 151: "}}}[J

Zeile 152: [J

Zeile 153: " TODO: {{{[J

Zeile 154: "   * Check the issue tracker:[J

Zeile 155: "     https://bitbucket.org/fritzophrenic/vim-tohtml/issues?status=new&status=open[J

Zeile 156: "   * Options for generating the CSS in external style sheets. New :TOcss[J

Zeile 157: "     command to convert the current color scheme into a (mostly) generic CSS[J

Zeile 158: "     stylesheet which can be re-used. Alternate stylesheet support? Good start[J

Zeile 159: "     by Erik Falor[J

Zeile 160: "     ( https://groups.google.com/d/topic/vim_use/7XTmC4D22dU/discussion ).[J

Zeile 161: "   * Add optional argument to :TOhtml command to specify mode (gui, cterm,[J

Zeile 162: "     term) to use for the styling. Suggestion by "nacitar".[J

Zeile 163: "   * Add way to override or specify which RGB colors map to the color numbers[J

Zeile 164: "     in cterm. Get better defaults than just guessing? Suggestion by "nacitar".[J

Zeile 165: "   * Disable filetype detection until after all processing is done.[J

Zeile 166: "   * Add option for not generating the hyperlink on stuff that looks like a[J

Zeile 167: "     URL? Or just color the link to fit with the colorscheme (and only special[J

Zeile 168: "     when hovering)?[J

Zeile 169: "   * Bug: Opera does not allow printing more than one page if uncopyable[J

Zeile 170: "     regions is turned on. Possible solution: Add normal text line numbers with[J

Zeile 171: "     display:none, set to display:inline for print style sheets, and hide[J

Zeile 172: "     <input> elements for print, to allow Opera printing multiple pages (and[J

Zeile 173: "     other uncopyable areas?). May need to make the new text invisible to IE[J

Zeile 174: "     with conditional comments to prevent copying it, IE for some reason likes[J

Zeile 175: "     to copy hidden text. Other browsers too?[J

Zeile 176: "   * Bug: still a 1px gap throughout the fold column when html_prevent_copy is[J

Zeile 177: "     "fn" in some browsers. Specifically, in Chromium on Ubuntu (but not Chrome[J

Zeile 178: "     on Windows). Perhaps it is font related?[J

Zeile 179: "   * Bug: still some gaps in the fold column when html_prevent_copy contains[J

Zeile 180: "     'd' and showing the whole diff (observed in multiple browsers). Only gaps[J

Zeile 181: "     on diff lines though.[J

Zeile 182: "   * Undercurl support via CSS3, with fallback to dotted or something:[J

Zeile 183: "^Ihttps://groups.google.com/d/topic/vim_use/BzXA6He1pHg/discussion[J

Zeile 184: "   * Redo updates for modified default foldtext (v11) when/if the patch is[J

Zeile 185: "     accepted to modify it.[J

Zeile 186: "   * Test case +diff_one_file-dynamic_folds+expand_tabs-hover_unfold[J

Zeile 187: "^I^I+ignore_conceal-ignore_folding+no_foldcolumn+no_pre+no_progress[J

Zeile 188: "^I^I+number_lines-pre_wrap-use_css+use_xhtml+whole_filler.xhtml[J

Zeile 189: "     does not show the whole diff filler as it is supposed to?[J

Zeile 190: "   * Bug: when 'isprint' is wrong for the current encoding, will generate[J

Zeile 191: "     invalid content. Can/should anything be done about this? Maybe a separate[J

Zeile 192: "     plugin to correct 'isprint' based on encoding?[J

Zeile 193: "   * Check to see if the windows-125\d encodings actually work in Unix without[J

Zeile 194: "     the 8bit- prefix. Add prefix to autoload dictionaries for Unix if not.[J

Zeile 195: "   * Font auto-detection similar to[J

Zeile 196: "     http://www.vim.org/scripts/script.php?script_id=2384 but for a variety of[J

Zeile 197: "     platforms.[J

Zeile 198: "   * Pull in code from http://www.vim.org/scripts/script.php?script_id=3113 :[J

Zeile 199: "^I- listchars support[J

Zeile 200: "^I- full-line background highlight[J

Zeile 201: "^I- other?[J

Zeile 202: "   * Make it so deleted lines in a diff don't create side-scrolling (get it[J

Zeile 203: "     free with full-line background highlight above).[J

Zeile 204: "   * Restore open/closed folds and cursor position after processing each file[J

Zeile 205: "     with option not to restore for speed increase.[J

Zeile 206: "   * Add extra meta info (generation time, etc.)?[J

Zeile 207: "   * Tidy up so we can use strict doctype in even more situations[J

Zeile 208: "   * Implementation detail: add threshold for writing the lines to the html[J

Zeile 209: "     buffer before we're done (5000 or so lines should do it)[J

Zeile 210: "   * TODO comments for code cleanup scattered throughout[J

Zeile 211: "}}}[J

Zeile 212: [J

Zeile 213: " Define the :TOhtml command when:[J

Zeile 214: " - 'compatible' is not set[J

Zeile 215: " - this plugin or user override was not already loaded[J

Zeile 216: " - user commands are available. {{{[J

Zeile 217: if !&cp && !exists(":TOhtml") && has("user_commands")[J

Zeile 218:   command -range=% -bar TOhtml :call tohtml#Convert2HTML(<line1>, <line2>)[J

Zeile 219: endif "}}}[J

Zeile 220: [J

Zeile 221: " Make sure any patches will probably use consistent indent[J

Zeile 222: "   vim: ts=8 sw=2 sts=2 noet fdm=marker[J

Lesen von /usr/share/vim/vim82/plugin/tohtml.vim beendet[J
chdir(/usr/share/vim/vim82/plugin)[J
fchdir() to previous dir[J
lese "/usr/share/vim/vim82/plugin/vimballPlugin.vim"[J
Zeile 1: " vimballPlugin : construct a file containing both paths and files[J

Zeile 2: " Author: Charles E. Campbell[J

Zeile 3: " Copyright: (c) 2004-2014 by Charles E. Campbell[J

Zeile 4: "            The VIM LICENSE applies to Vimball.vim, and Vimball.txt[J

Zeile 5: "            (see |copyright|) except use "Vimball" instead of "Vim".[J

Zeile 6: "            No warranty, express or implied.[J

Zeile 7: "  *** ***   Use At-Your-Own-Risk!   *** ***[J

Zeile 8: "[J

Zeile 9: " (Rom 2:1 WEB) Therefore you are without excuse, O man, whoever you are who[J

Zeile 10: "      judge. For in that which you judge another, you condemn yourself. For[J

Zeile 11: "      you who judge practice the same things.[J

Zeile 12: " GetLatestVimScripts: 1502 1 :AutoInstall: vimball.vim[J

Zeile 13: [J

Zeile 14: " ---------------------------------------------------------------------[J

Zeile 15: "  Load Once: {{{1[J

Zeile 16: if &cp || exists("g:loaded_vimballPlugin")[J

Zeile 17:  finish[J

Zeile 18: endif[J

Zeile 19: let g:loaded_vimballPlugin = "v37"[J

Zeile 20: let s:keepcpo              = &cpo[J

Zeile 21: set cpo&vim[J

Zeile 22: [J

Zeile 23: " ------------------------------------------------------------------------------[J

Zeile 24: " Public Interface: {{{1[J

Zeile 25: com! -range   -complete=file -nargs=+ -bang MkVimball^I^Icall vimball#MkVimball(<line1>,<line2>,<bang>0,<f-args>)[J

Zeile 26: com! -nargs=? -complete=dir  UseVimball^I^I^I^I^I^Icall vimball#Vimball(1,<f-args>)[J

Zeile 27: com! -nargs=0                VimballList^I^I^I^I^Icall vimball#Vimball(0)[J

Zeile 28: com! -nargs=* -complete=dir  RmVimball^I^I^I^I^I^Icall vimball#SaveSettings()|call vimball#RmVimball(<f-args>)|call vimball#RestoreSettings()[J

Zeile 29: augroup Vimball[J

Zeile 30:  au![J

Zeile 31:  au BufEnter  *.vba,*.vba.gz,*.vba.bz2,*.vba.zip,*.vba.xz^Isetlocal bt=nofile fmr=[[[,]]] fdm=marker|if &ff != 'unix'|setlocal ma ff=unix noma|endif|if line('$') > 1|call vimball#ShowMesg(0,"Source this file to extract it! (:so %)")|endif[J

Zeile 32:  au SourceCmd *.vba.gz,*.vba.bz2,*.vba.zip,*.vba.xz^I^I^Ilet s:origfile=expand("%")|if expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|endif|call vimball#Decompress(expand("<amatch>"))|so %|if s:origfile!=expand("<afile>")|close|endif[J

Zeile 33:  au SourceCmd *.vba^I^I^I^I^I^I^I^I^I^I^Iif expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|call vimball#Vimball(1)|close|else|call vimball#Vimball(1)|endif[J

Zeile 34:  au BufEnter  *.vmb,*.vmb.gz,*.vmb.bz2,*.vmb.zip,*.vmb.xz^Isetlocal bt=nofile fmr=[[[,]]] fdm=marker|if &ff != 'unix'|setlocal ma ff=unix noma|endif|if line('$') > 1|call vimball#ShowMesg(0,"Source this file to extract it! (:so %)")|endif[J

Zeile 35:  au SourceCmd *.vmb.gz,*.vmb.bz2,*.vmb.zip,*.vmb.xz^I^I^Ilet s:origfile=expand("%")|if expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|endif|call vimball#Decompress(expand("<amatch>"))|so %|if s:origfile!=expand("<afile>")|close|endif[J

Zeile 36:  au SourceCmd *.vmb^I^I^I^I^I^I^I^I^I^I^Iif expand("%")!=expand("<afile>") | exe "1sp" fnameescape(expand("<afile>"))|call vimball#Vimball(1)|close|else|call vimball#Vimball(1)|endif[J

Zeile 37: augroup END[J

Zeile 38: [J

Zeile 39: " =====================================================================[J

Zeile 40: " Restoration And Modelines: {{{1[J

Zeile 41: " vim: fdm=marker[J

Zeile 42: let &cpo= s:keepcpo[J

Zeile 43: unlet s:keepcpo[J

Lesen von /usr/share/vim/vim82/plugin/vimballPlugin.vim beendet[J
chdir(/usr/share/vim/vim82/plugin)[J
fchdir() to previous dir[J
lese "/usr/share/vim/vim82/plugin/zipPlugin.vim"[J
Zeile 1: " zipPlugin.vim: Handles browsing zipfiles[J

Zeile 2: "            PLUGIN PORTION[J

Zeile 3: " Date:^I^I^IJan 07, 2020[J

Zeile 4: " Maintainer:^ICharles E Campbell <NcampObell@SdrPchip.AorgM-NOSPAM>[J

Zeile 5: " License:^I^IVim License  (see vim's :help license)[J

Zeile 6: " Copyright:    Copyright (C) 2005-2016 Charles E. Campbell {{{1[J

Zeile 7: "               Permission is hereby granted to use and distribute this code,[J

Zeile 8: "               with or without modifications, provided that this copyright[J

Zeile 9: "               notice is copied with it. Like anything else that's free,[J

Zeile 10: "               zipPlugin.vim is provided *as is* and comes with no warranty[J

Zeile 11: "               of any kind, either expressed or implied. By using this[J

Zeile 12: "               plugin, you agree that in no event will the copyright[J

Zeile 13: "               holder be liable for any damages resulting from the use[J

Zeile 14: "               of this software.[J

Zeile 15: "[J

Zeile 16: " (James 4:8 WEB) Draw near to God, and he will draw near to you.[J

Zeile 17: " Cleanse your hands, you sinners; and purify your hearts, you double-minded.[J

Zeile 18: " ---------------------------------------------------------------------[J

Zeile 19: " Load Once: {{{1[J

Zeile 20: if &cp || exists("g:loaded_zipPlugin")[J

Zeile 21:  finish[J

Zeile 22: endif[J

Zeile 23: let g:loaded_zipPlugin = "v31"[J

Zeile 24: let s:keepcpo          = &cpo[J

Zeile 25: set cpo&vim[J

Zeile 26: [J

Zeile 27: " ---------------------------------------------------------------------[J

Zeile 28: " Options: {{{1[J

Zeile 29: if !exists("g:zipPlugin_ext")[J

Zeile 30:  let g:zipPlugin_ext='*.aar,*.apk,*.celzip,*.crtx,*.docm,*.docx,*.dotm,*.dotx,*.ear,*.epub,*.gcsx,*.glox,*.gqsx,*.ja,*.jar,*.kmz,*.odb,*.odc,*.odf,*.odg,*.odi,*.odm,*.odp,*.ods,*.odt,*.otc,*.otf,*.otg,*.oth,*.oti,*.otp,*.ots,*.ott,*.oxt,*.potm,*.potx,*.ppam,*.ppsm,*.ppsx,*.pptm,*.pptx,*.sldx,*.thmx,*.vdw,*.war,*.wsz,*.xap,*.xlam,*.xlam,*.xlsb,*.xlsm,*.xlsx,*.xltm,*.xltx,*.xpi,*.zip'[J

Zeile 31: endif[J

Zeile 32: [J

Zeile 33: " ---------------------------------------------------------------------[J

Zeile 34: " Public Interface: {{{1[J

Zeile 35: augroup zip[J

Zeile 36:  au![J

Zeile 37:  au BufReadCmd   zipfile:*^Icall zip#Read(expand("<amatch>"), 1)[J

Zeile 38:  au FileReadCmd  zipfile:*^Icall zip#Read(expand("<amatch>"), 0)[J

Zeile 39:  au BufWriteCmd  zipfile:*^Icall zip#Write(expand("<amatch>"))[J

Zeile 40:  au FileWriteCmd zipfile:*^Icall zip#Write(expand("<amatch>"))[J

Zeile 41: [J

Zeile 42:  if has("unix")[J

Zeile 43:   au BufReadCmd   zipfile:*/*^Icall zip#Read(expand("<amatch>"), 1)[J

Zeile 44:   au FileReadCmd  zipfile:*/*^Icall zip#Read(expand("<amatch>"), 0)[J

Zeile 45:   au BufWriteCmd  zipfile:*/*^Icall zip#Write(expand("<amatch>"))[J

Zeile 46:   au FileWriteCmd zipfile:*/*^Icall zip#Write(expand("<amatch>"))[J

Zeile 47:  endif[J

Zeile 48: [J

Zeile 49:  exe "au BufReadCmd ".g:zipPlugin_ext.' call zip#Browse(expand("<amatch>"))'[J

Zeile 49: au BufReadCmd *.aar,*.apk,*.celzip,*.crtx,*.docm,*.docx,*.dotm,*.dotx,*.ear,*.epub,*.gcsx,*.glox,*.gqsx,*.ja,*.jar,*.kmz,*.odb,*.odc,*.odf,*.odg,*.odi,*.odm,*.odp,*.ods,*.odt,*.otc,*.otf,*.otg,*.oth,*.oti,*.otp,*.ots,*.ott,*.oxt,*.potm,*.potx,*.ppam,*.ppsm,*.ppsx,*.pptm,*.pptx,*.sldx,*.thmx,*.vdw,*.war,*.wsz,*.xap,*.xlam,*.xlam,*.xlsb,*.xlsm,*.xlsx,*.xltm,*.xltx,*.xpi,*.zip call zip#Browse(expand("<amatch>"))[J

Zeile 50: augroup END[J

Zeile 51: [J

Zeile 52: " ---------------------------------------------------------------------[J

Zeile 53: "  Restoration And Modelines: {{{1[J

Zeile 54: "  vim: fdm=marker[J

Zeile 55: let &cpo= s:keepcpo[J

Zeile 56: unlet s:keepcpo[J

Lesen von /usr/share/vim/vim82/plugin/zipPlugin.vim beendet[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/plugin/**/*.vim"[J
Suche nach "pack/*/start/*" in "/c/Users/108012516/.vim,/usr/share/vim/vimfiles,/usr/share/vim/vim82,/usr/share/vim/vimfiles/after,/c/Users/108012516/.vim/after"[J
Suche nach "/c/Users/108012516/.vim/pack/*/start/*"[J
Suche nach "/usr/share/vim/vimfiles/pack/*/start/*"[J
Suche nach "/usr/share/vim/vim82/pack/*/start/*"[J
Suche nach "/usr/share/vim/vimfiles/after/pack/*/start/*"[J
Suche nach "/c/Users/108012516/.vim/after/pack/*/start/*"[J
in 'packpath' nicht gefunden: "pack/*/start/*"[J
Suche nach "plugin/**/*.vim" in "/c/Users/108012516/.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill,/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorsch[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-polyglot/after/plugin/**/*.vim"[J
Suche nach "/usr/share/vim/vimfiles/after/plugin/**/*.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/after/plugin/**/*.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/after/plugin/**/*.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/after/plugin/**/*.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/after/plugin/**/*.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight/after/plugin/**/*.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/after/plugin/**/*.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim/after/plugin/**/*.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/after/plugin/**/*.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf/after/plugin/**/*.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter/after/plugin/**/*.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary/after/plugin/**/*.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/after/plugin/**/*.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes/after/plugin/**/*.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow/after/plugin/**/*.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons/after/plugin/**/*.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons/after/plugin/**/*.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/awesome-vim-colorschemes/after/plugin/**/*.vim"[J
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-misc/after/plugin/**/*.vim"[J
Suche nach "/c/Users/108012516/.vim/bundle/vim-colorscheme-switcher/after/plugin/**/*.vim"[J
in 'runtimepath' nicht gefunden: "plugin/**/*.vim"[J
Lesen der viminfo-Datei "/c/Users/108012516/.viminfo" Information oldfiles[J[?1000h
BetÃ¤tigen Sie die EINGABETASTE oder geben Sie einen Befehl ein[?1000l[?25h
rufe <SNR>28_FocusGainedHandler auf(1)

Zeile 1:   if exists("s:timer") && a:timer == s:timer && exists('#airline')

Zeile 2:     augroup airline

Zeile 3:       au FocusGained * call s:on_focus_gained()

Zeile 4:     augroup END

Zeile 5:   endif

<SNR>28_FocusGainedHandler lieferte #0 zurÃ¼ck
[?25l[J[J[J[J[J[J[J[?25h[?1000h[?1049h[22;0;0t[>4;2m[?1h=[?2004h[?1004h[1;61r[?12h[?12l[22;2t[22;1t[27m[23m[29m[m[38;5;253m[48;5;235m[H[2J[?25l[61;1HAusfÃ¼[61;6Hhrung von BufWinEnter Autokommandos fÃ¼[61;44Hr "*"
Autokommando if &ft == "" && expand("<afile>:e") == "" | call s:Observe('shebang#Detect') | endif
FÃ¼[61;3Hhre aus: if &ft == "" && expand("<afile>:e") == "" | call s:Observe('shebang#Detect') | endif
FÃ¼[61;3Hhre aus:  call s:Observe('shebang#Detect') | endif
rufe <SNR>6_Observe auf('shebang#Detect')
Zeile 1:   let b:PolyglotObserve = function("polyglot#" . a:fn)
Zeile 2:   augroup polyglot-observer
Zeile 3:     au!
Zeile 4:     au CursorHold,CursorHoldI <buffer> if (&ft == "" || &ft == "conf") | call b:PolyglotObserve() | endif
Zeile 5:   augroup END
<SNR>6_Observe lieferte #0 zurÃ¼[61;32Hck
weiter in BufWinEnter Autokommandos fÃ¼[61;39Hr "*"
FÃ¼[61;3Hhre aus:  endif
AusfÃ¼[61;6Hhrung von BufWinEnter Autokommandos fÃ¼[61;44Hr "*"
Autokommando setlocal cursorline
FÃ¼[61;3Hhre aus: setlocal cursorline
AusfÃ¼[61;6Hhrung von BufWinEnter Autokommandos fÃ¼[61;44Hr "*"
Autokommando let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())
FÃ¼[61;3Hhre aus: let g:fzf#vim#buffers[bufnr('')] = reltimefloat(reltime())
AusfÃ¼[61;6Hhrung von BufWinEnter Autokommandos fÃ¼[61;44Hr "*"
Autokommando call <sid>on_window_changed('BufWinEnter')
FÃ¼[61;3Hhre aus: call <sid>on_window_changed('BufWinEnter')
rufe <SNR>28_on_window_changed auf('BufWinEnter')
Zeile 1:   " don't trigger for Vim popup windows
Zeile 2:   if &buftype is# 'popup'
Zeile 3:     return
Zeile 4:   endif
Zeile 5:
Zeile 6:   if pumvisible() && (!&previewwindow || g:airline_exclude_preview)
Zeile 7:     " do not trigger for previewwindows
Zeile 8:     return
Zeile 9:   endif
Zeile 10:   let s:active_winnr = winnr()
Zeile 11:   " Handle each window only once, since we might come here several times for
Zeile 12:   " different autocommands.
Zeile 13:   let l:key = [bufnr('%'), s:active_winnr, winnr('$'), tabpagenr(), &ft]
Zeile 14:   if get(g:, 'airline_last_window_changed', []) == l:key && &stl is# '%!airline#statusline('.s:active_winnr.')' && &ft !~? 'gitcommit'
Zeile 17:     " fugitive is special, it changes names and filetypes several times,
Zeile 18:     " make sure the caching does not get into its way
Zeile 19:     return
Zeile 20:   endif
Zeile 21:   let g:airline_last_window_changed = l:key
Zeile 22:   call s:init()
rufe <SNR>28_init auf()
Zeile 1:   if s:airline_initialized
Zeile 2:     return
Zeile 3:   endif
Zeile 4:   let s:airline_initialized = 1
Zeile 5:
Zeile 6:   call airline#extensions#load()
Suche nach "autoload/airline/extensions.vim" in "/c/Users/108012516/.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive,/c/U
[60;196Hs[61;1Hers/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill,/c/Use
[60;196Hr[61;1Hs/108012516/dotfiles/vimConf/vim/bundle/ack.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf,/c/Users/108012516/dotfiles/vimConf/vim/b
[60;196Hu[61;1Hndle/vim-rooter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline
[60;196H-[61;1Hthemes,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons,/c/Use
[60;196Hr[61;1Hs/108012516/dotfiles/vimConf/vim/bundle/awes
Suche nach "/c/Users/108012516/.vim/autoload/airline/extensions.vim"
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/autoload/airline/extensions.vim"
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/autoload/airline/extensions.vim"
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/autoload/airline/extensions.vim"
[?1000l[38;5;121m-- Mehr --[?25h[m[38;5;253m[48;5;235m[61;1H[K[?1000h[?25l[61;1HSuche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight/autoload/airline/extensions.vim"
[?1000l[38;5;121m-- Mehr --[?25h[m[38;5;253m[48;5;235m[61;1H[K[?1000h[?25l[61;1HSuche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill/autoload/airline/extensions.vim"
[?1000l[38;5;121m-- Mehr --[?25h[m[38;5;253m[48;5;235m[61;1H[K[?1000h[?25l[61;1HSuche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/ack.vim/autoload/airline/extensions.vim"
[?1000l[38;5;121m-- Mehr --[?25h[m[38;5;253m[48;5;235m[61;1H[K[?1000h[?25l[61;1HSuche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim/autoload/airline/extensions.vim"
[?1000l[38;5;121m-- Mehr --[?25h[m[38;5;253m[48;5;235m[61;1H[K[?1000h[?25l[61;1HSuche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf/autoload/airline/extensions.vim"
[?1000l[38;5;121m-- Mehr --[?25h[m[38;5;253m[48;5;235m[61;1H[K[?1000h[?25l[61;1HSuche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rooter/autoload/airline/extensions.vim"
[?1000l[38;5;121m-- Mehr --[?25h[m[38;5;253m[48;5;235m[61;1H[K[?1000h[?25l[61;1HSuche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary/autoload/airline/extensions.vim"
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/autoload/airline/extensions.vim"
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/autoload/airline)
fchdir() to previous dir
Zeile 6: lese "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/autoload/airline/extensions.vim"
Zeile 1: " MIT License. Copyright (c) 2013-2021 Bailey Ling et al.
[97m[41mFehler beim AusfÃ¼[61;18Hhren von "BufWinEnter Autokommandos fÃ¼[61;56Hr "*"..function <SNR>28_on_window_changed[22]..<SNR>28_init[6]..script /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/autoload/a[m[38;5;253m[48;5;235m
[60;196H[97m[41mi[61;1Hrline/extensions.vim":[m[38;5;253m[48;5;235m
[93mZeile    1:[m[38;5;253m[48;5;235m
[97m[41mUnterbrochen[m[38;5;253m[48;5;235m
Lesen von /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline/autoload/airline/extensions.vim beendet
weiter in <SNR>28_init
<SNR>28_init abgebrochen
weiter in <SNR>28_on_window_changed
<SNR>28_on_window_changed abgebrochen
weiter in BufWinEnter Autokommandos fÃ¼[61;39Hr "*"
AusfÃ¼[61;6Hhrung von CursorMoved Autokommandos fÃ¼[61;44Hr "*"[?1000l
[38;5;121mBetÃ¤tigen Sie die EINGABETASTE oder geben Sie einen Befehl ein[?25h[?1000h[m[38;5;253m[48;5;235m
[?25lAutokommando execute ''[?1000l
[38;5;121mBetÃ¤tigen Sie die EINGABETASTE oder geben Sie einen Befehl ein[?1000h[m[38;5;253m[48;5;235m
FÃ¼[61;3Hhre aus: execute ''
FÃ¼[61;3Hhre aus:
AusfÃ¼[61;6Hhrung von CursorMoved Autokommandos fÃ¼[61;44Hr "*"[?1000l
[38;5;121mBetÃ¤tigen Sie die EINGABETASTE oder geben Sie einen Befehl ein[?1000h[m[38;5;253m[48;5;235m
Autokommando call <sid>on_cursor_moved()[?1000l
[38;5;121mBetÃ¤tigen Sie die EINGABETASTE oder geben Sie einen Befehl ein[?1000h[m[38;5;253m[48;5;235m
FÃ¼[61;3Hhre aus: call <sid>on_cursor_moved()
rufe <SNR>28_on_cursor_moved auf()
Zeile 1:   if winnr() != s:active_winnr || !exists('w:airline_active')
Zeile 2:     call s:on_window_changed('CursorMoved')
rufe <SNR>28_on_window_changed auf('CursorMoved')
Zeile 1:   " don't trigger for Vim popup windows
Zeile 2:   if &buftype is# 'popup'
Zeile 3:     return
Zeile 4:   endif
Zeile 5:
Zeile 6:   if pumvisible() && (!&previewwindow || g:airline_exclude_preview)
Zeile 7:     " do not trigger for previewwindows
Zeile 8:     return
Zeile 9:   endif
Zeile 10:   let s:active_winnr = winnr()
Zeile 11:   " Handle each window only once, since we might come here several times for
Zeile 12:   " different autocommands.
Zeile 13:   let l:key = [bufnr('%'), s:active_winnr, winnr('$'), tabpagenr(), &ft]
Zeile 14:   if get(g:, 'airline_last_window_changed', []) == l:key && &stl is# '%!airline#statusline('.s:active_winnr.')' && &ft !~? 'gitcommit'
Zeile 17:     " fugitive is special, it changes names and filetypes several times,
Zeile 18:     " make sure the caching does not get into its way
Zeile 19:     return
Zeile 20:   endif
Zeile 21:   let g:airline_last_window_changed = l:key
Zeile 22:   call s:init()
rufe <SNR>28_init auf()
Zeile 1:   if s:airline_initialized
Zeile 2:     return
<SNR>28_init lieferte #0 zurÃ¼[61;30Hck
weiter in <SNR>28_on_window_changed
Zeile 23:   call airline#update_statusline()
rufe airline#update_statusline auf()
Zeile 1:   if airline#util#stl_disabled(winnr())
rufe airline#util#stl_disabled auf(1)
Zeile 1:   " setting the statusline is disabled,
Zeile 2:   " either globally, per window, or per buffer
Zeile 3:   " w:airline_disabled is deprecated!
Zeile 4:   return get(g:, 'airline_disable_statusline', 0) || airline#util#getwinvar(a:winnr, 'airline_disable_statusline', 0) || airline#util#getwinvar(a:winnr, 'airline_disabled', 0) || airline
[60;196H#[61;1Hutil#getbufvar(winbufnr(a:winnr), 'airline_disable_statusline', 0)
rufe airline#util#getwinvar auf(1, 'airline_disable_statusline', 0)
Zeile 1:     return getwinvar(a:winnr, a:key, a:def)
airline#util#getwinvar lieferte #0 zurÃ¼[61;40Hck
weiter in airline#util#stl_disabled
rufe airline#util#getwinvar auf(1, 'airline_disabled', 0)
Zeile 1:     return getwinvar(a:winnr, a:key, a:def)
airline#util#getwinvar lieferte #0 zurÃ¼[61;40Hck
weiter in airline#util#stl_disabled
rufe airline#util#getbufvar auf(1, 'airline_disable_statusline', 0)
Zeile 1:     return getbufvar(a:bufnr, a:key, a:def)
airline#util#getbufvar lieferte #0 zurÃ¼[61;40Hck
weiter in airline#util#stl_disabled
airline#util#stl_disabled lieferte #0 zurÃ¼[61;43Hck
weiter in airline#update_statusline
Zeile 2:     return
Zeile 3:   endif
Zeile 4:   let range = filter(range(1, winnr('$')), 'v:val != winnr()')
Zeile 5:   " create inactive statusline
Zeile 6:   call airline#update_statusline_inactive(range)
rufe airline#update_statusline_inactive auf([])
Zeile 1:   if airline#util#stl_disabled(winnr())
[?1000l[38;5;121m-- Mehr --[?25h[m[38;5;253m[48;5;235m[61;1H[K[?1000h[61;1H
[?25lairline#update_statusline_inactive abgebrochen
weiter in airline#update_statusline
airline#update_statusline abgebrochen
weiter in <SNR>28_on_window_changed
<SNR>28_on_window_changed abgebrochen
weiter in <SNR>28_on_cursor_moved
<SNR>28_on_cursor_moved abgebrochen
weiter in CursorMoved Autokommandos fÃ¼[61;39Hr "*"
[27m[23m[29m[m[38;5;253m[48;5;235m[H[2J[1;1H[4m[38;5;243m[48;5;237m  1 [m[38;5;253m[48;5;235m[48;5;237m                                                                                                                                                                                                [m[38;5;253m[48;5;235m[2;1H[38;5;251m[48;5;235m~                                                                                                                                                                                                   [3;1H~                                                                                                                                                                                                   [4;1H~                                                                                                                                                                                                   [5;1H~                                                                                                                                                                                                   [6;1H~                                                                                                                                                                                                   [7;1H~                                                                                                                                                                                                   [8;1H~                                                                                                                                                                                                   [9;1H~                                                                                                                                                                                                   [10;1H~                                                                                                                                                                                                   [11;1H~                                                                                                                                                                                                   [12;1H~                                                                                                                                                                                                   [13;1H~                                                                                                                                                                                                   [14;1H~                                                                                                                                                                                                   [15;1H~                                                                                                                                                                                                   [16;1H~                                                                                                                                                                                                   [17;1H~                                                                                                                                                                                                   [18;1H~                                                                                                                                                                                                   [19;1H~                                                                                                                                                                                                   [20;1H~                                                                                                                                                                                                   [21;1H~                                                                                                                                                                                                   [22;1H~                                                                                                                                                                                                   [23;1H~                                                                                                                                                                                                   [24;1H~                                                                                                                                                                                                   [25;1H~                                                                                                                                                                                                   [26;1H~                                                                                                                                                                                                   [27;1H~                                                                                                                                                                                                   [28;1H~                                                                                                                                                                                                   [29;1H~                                                                                                                                                                                                   [30;1H~                                                                                                                                                                                                   [31;1H~                                                                                                                                                                                                   [32;1H~                                                                                                                                                                                                   [33;1H~                                                                                                                                                                                                   [34;1H~                                                                                                                                                                                                   [35;1H~                                                                                                                                                                                                   [36;1H~                                                                                                                                                                                                   [37;1H~                                                                                                                                                                                                   [38;1H~                                                                                                                                                                                                   [39;1H~                                                                                                                                                                                                   [40;1H~                                                                                                                                                                                                   [41;1H~                                                                                                                                                                                                   [42;1H~                                                                                                                                                                                                   [43;1H~                                                                                                                                                                                                   [44;1H~                                                                                                                                                                                                   [45;1H~                                                                                                                                                                                                   [46;1H~                                                                                                                                                                                                   [47;1H~                                                                                                                                                                                                   [48;1H~                                                                                                                                                                                                   [49;1H~                                                                                                                                                                                                   [50;1H~                                                                                                                                                                                                   [51;1H~                                                                                                                                                                                                   [52;1H~                                                                                                                                                                                                   [53;1H~                                                                                                                                                                                                   [54;1H~                                                                                                                                                                                                   [55;1H~                                                                                                                                                                                                   [56;1H~                                                                                                                                                                                                   [57;1H~                                                                                                                                                                                                   [58;1H~                                                                                                                                                                                                   [59;1H~                                                                                                                                                                                                   [m[38;5;253m[48;5;235m[60;1H[1m[7m[38;5;237m[48;5;243m[Unbenannt]                                                                                                                                                               (unix/) (line 0/1, col 0)\[m[38;5;253m[48;5;235m[25;88HVIM - verbesserter Vi[27;91HVersion 8.2.2859[28;84Hvon Bram Moolenaar und Anderen[29;72HVim ist Open Source und kann frei weitergegeben werden[31;79HUnterstÃ¼[31;87Htzen Sie die Entwicklung von Vim[32;70HTippe  :help sponsor[38;5;243m<Enter>[m[38;5;253m[48;5;235m     fÃ¼[32;104Hr mehr Informationen    [34;70HTippe  :q[38;5;243m<Enter>[m[38;5;253m[48;5;235m                zum Beenden               [35;70HTippe  :help[38;5;243m<Enter>[m[38;5;253m[48;5;235m  oder [38;5;243m<F1>[m[38;5;253m[48;5;235m  fÃ¼[35;104Hr Online Hilfe          [36;70HTippe  :help version8[38;5;243m<Enter>[m[38;5;253m[48;5;235m    fÃ¼[36;104Hr Versions-Informationen[1;5H[?25h[?25l[61;1HTippe:  :qa  und drÃ¼[61;21Hcke <Enter> um Vim zu beenden[1;5H[?25h[?25l[61;1HAusfÃ¼[61;6Hhrung von CursorHold Autokommandos fÃ¼[61;43Hr "*"[61;48H[K[61;1H
Autokommando call gitgutter#process_buffer(bufnr(''), 0)[?1000l
[38;5;68mBetÃ¤tigen Sie die EINGABETASTE oder geben Sie einen Befehl ein[?25h[?1000h[m[38;5;253m[48;5;235m
[?25lFÃ¼[61;3Hhre aus: call gitgutter#process_buffer(bufnr(''), 0)
Suche nach "autoload/gitgutter.vim" in "/c/Users/108012516/.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive,/c/Users/1080
[60;196H1[61;1H2516/dotfiles/vimConf/vim/bundle/vim-gitgutter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-cpp-enhanced-highlight,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-bufkill,/c/Users/108012
[60;196H5[61;1H16/dotfiles/vimConf/vim/bundle/ack.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf.vim,/c/Users/108012516/dotfiles/vimConf/vim/bundle/fzf,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim
[60;196H-[61;1Hrooter,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-commentary,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-airline-themes,/
[60;196Hc[61;1H/Users/108012516/dotfiles/vimConf/vim/bundle/vim-rainbow,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-devicons,/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-webdevicons,/c/Users/108012
[60;196H5[61;1H16/dotfiles/vimConf/vim/bundle/awesome-vim-c[?1000l
[38;5;68mBetÃ¤tigen Sie die EINGABETASTE oder geben Sie einen Befehl ein[?1000h[m[38;5;253m[48;5;235m
Suche nach "/c/Users/108012516/.vim/autoload/gitgutter.vim"[?1000l
[38;5;68mBetÃ¤tigen Sie die EINGABETASTE oder geben Sie einen Befehl ein[?1000h[m[38;5;253m[48;5;235m
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/Vundle.vim/autoload/gitgutter.vim"[?1000l
[38;5;68mBetÃ¤tigen Sie die EINGABETASTE oder geben Sie einen Befehl ein[?1000h[m[38;5;253m[48;5;235m
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-fugitive/autoload/gitgutter.vim"[?1000l
[38;5;68mBetÃ¤tigen Sie die EINGABETASTE oder geben Sie einen Befehl ein[?1000h[m[38;5;253m[48;5;235m
Suche nach "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/autoload/gitgutter.vim"[?1000l
[38;5;68mBetÃ¤tigen Sie die EINGABETASTE oder geben Sie einen Befehl ein[?1000h[m[38;5;253m[48;5;235m
chdir(/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/autoload)[?1000l
[38;5;68mBetÃ¤tigen Sie die EINGABETASTE oder geben Sie einen Befehl ein[?1000h[m[38;5;253m[48;5;235m
fchdir() to previous dir[?1000l
[38;5;68mBetÃ¤tigen Sie die EINGABETASTE oder geben Sie einen Befehl ein[?1000h[m[38;5;253m[48;5;235m
Zeile 0: lese "/c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/autoload/gitgutter.vim"[?1000l
[38;5;68mBetÃ¤tigen Sie die EINGABETASTE oder geben Sie einen Befehl ein[?1000h[m[38;5;253m[48;5;235m
Zeile 1: " Primary functions {{{
Zeile 2:
Zeile 3: function! gitgutter#all(force) abort
Zeile 19:
Zeile 20:
Zeile 21: function! gitgutter#process_buffer(bufnr, force) abort
Zeile 55:
Zeile 56:
Zeile 57: function! gitgutter#disable() abort
Zeile 70:
Zeile 71: function! gitgutter#enable() abort
Zeile 75:
Zeile 76: function! gitgutter#toggle() abort
Zeile 83:
Zeile 84:
Zeile 85: function! gitgutter#buffer_disable() abort
Zeile 90:
Zeile 91: function! gitgutter#buffer_enable() abort
Zeile 96:
Zeile 97: function! gitgutter#buffer_toggle() abort
Zeile 104:
Zeile 105: " }}}
Zeile 106:
Zeile 107: function! gitgutter#setup_maps()
Zeile 155:
Zeile 156: function! s:setup_path(bufnr, continuation)
Zeile 161:
Zeile 162: function! s:has_fresh_changes(bufnr) abort
Zeile 165:
Zeile 166: function! s:reset_tick(bufnr) abort
Zeile 169:
Zeile 170: function! s:clear(bufnr)
Zeile 176:
Zeile 177:
Zeile 178: " Note:
Zeile 179: " - this runs synchronously
Zeile 180: " - it ignores unsaved changes in buffers
Zeile 181: " - it does not change to the repo root
Zeile 182: function! gitgutter#quickfix(current_file)
Lesen von /c/Users/108012516/dotfiles/vimConf/vim/bundle/vim-gitgutter/autoload/gitgutter.vim beendet[?1000l
[38;5;68mBetÃ¤tigen Sie die EINGABETASTE oder geben Sie einen Befehl ein[?1000h[m[38;5;253m[48;5;235m
weiter in CursorHold Autokommandos fÃ¼[61;38Hr "*"[?1000l
[38;5;68mBetÃ¤tigen Sie die EINGABETASTE oder geben Sie einen Befehl ein[?1000h[m[38;5;253m[48;5;235m
rufe gitgutter#process_buffer auf(1, 0)
Zeile 1:   " NOTE a:bufnr is not necessarily the current buffer.
Zeile 2:
Zeile 3:   if gitgutter#utility#is_active(a:bufnr)
rufe gitgutter#utility#is_active auf(1)
Zeile 1:   return g:gitgutter_enabled && gitgutter#utility#getbufvar(a:bufnr, 'enabled', 1) && !pumvisible() && s:is_file_buffer(a:bufnr) && s:exists_file(a:bufnr) && s:not_git_dir(a:bufnr)
rufe gitgutter#utility#getbufvar auf(1, 'enabled', 1)
Zeile 1:   let ggvars = getbufvar(a:buffer, 'gitgutter')
Zeile 2:   if type(ggvars) == type({}) && has_key(ggvars, a:varname)
Zeile 3:     return ggvars[a:varname]
Zeile 4:   endif
Zeile 5:   if a:0
Zeile 6:     return a:1
gitgutter#utility#getbufvar lieferte #1 zurÃ¼[61;45Hck
weiter in gitgutter#utility#is_active
rufe <SNR>20_is_file_buffer auf(1)
Zeile 1:   return empty(getbufvar(a:bufnr, '&buftype'))
<SNR>20_is_file_buffer lieferte #1 zurÃ¼[61;40Hck
weiter in gitgutter#utility#is_active
rufe <SNR>20_exists_file auf(1)
Zeile 1:   return filereadable(s:abs_path(a:bufnr, 0))
rufe <SNR>20_abs_path auf(1, 0)
Zeile 1:   let p = resolve(expand('#'.a:bufnr.':p'))
Zeile 2:
Zeile 3:   " Remove extra parts from fugitive's filepaths
Zeile 4:   let p = substitute(substitute(p, '^fugitive:', '', ''), '\v\.git/\x{40,}/', '', '')
Zeile 5:
Zeile 6:   return a:shellesc ? gitgutter#utility#shellescape(p) : p
<SNR>20_abs_path lieferte "''" zurÃ¼[61;36Hck
weiter in <SNR>20_exists_file
<SNR>20_exists_file lieferte #0 zurÃ¼[61;37Hck
weiter in gitgutter#utility#is_active
gitgutter#utility#is_active lieferte #0 zurÃ¼[61;45Hck
weiter in gitgutter#process_buffer
Zeile 4:
Zeile 5:     if has('patch-7.4.1559')
Zeile 6:[7Clet l:Callback = function('gitgutter#process_buffer', [a:bufnr, a:force])
Zeile 7:     else
Zeile 8:[7Clet l:Callback = {'function': 'gitgutter#process_buffer', 'arguments': [a:bufnr, a:force]}
Zeile 9:     endif
Zeile 10:     let how = s:setup_path(a:bufnr, l:Callback)
Zeile 11:     if [how] == ['async']  " avoid string-to-number conversion if how is a number
Zeile 12:[7Creturn
Zeile 13:     endif
Zeile 14:
Zeile 15:     if a:force || s:has_fresh_changes(a:bufnr)
Zeile 16:
Zeile 17:[7Clet diff = 'NOT SET'
Zeile 18:[7Ctry
Zeile 19:[9Clet diff = gitgutter#diff#run_diff(a:bufnr, g:gitgutter_diff_relative_to, 0)
Zeile 20:[7Ccatch /gitgutter not tracked/
Zeile 21:[9Ccall gitgutter#debug#log('Not tracked: '.gitgutter#utility#file(a:bufnr))
Zeile 22:[7Ccatch /gitgutter diff failed/
Zeile 23:[9Ccall gitgutter#debug#log('Diff failed: '.gitgutter#utility#file(a:bufnr))
Zeile 24:[9Ccall gitgutter#hunk#reset(a:bufnr)
Zeile 25:[7Cendtry
Zeile 26:
Zeile 27:[7Cif diff != 'async' && diff != 'NOT SET'
Zeile 28:[9Ccall gitgutter#diff#handler(a:bufnr, diff)
Zeile 29:[7Cendif
[?1000l[38;5;114m-- Mehr --[?25h[m[38;5;253m[48;5;235m[61;1H[K[?1000h[61;1H
[?25lgitgutter#process_buffer abgebrochen
weiter in CursorHold Autokommandos fÃ¼[61;38Hr "*"
[27m[23m[29m[m[38;5;253m[48;5;235m[H[2J[1;1H[4m[38;5;243m[48;5;237m  1 [m[38;5;253m[48;5;235m[48;5;237m                                                                                                                                                                                                [m[38;5;253m[48;5;235m[2;1H[38;5;251m[48;5;235m~                                                                                                                                                                                                   [3;1H~                                                                                                                                                                                                   [4;1H~                                                                                                                                                                                                   [5;1H~                                                                                                                                                                                                   [6;1H~                                                                                                                                                                                                   [7;1H~                                                                                                                                                                                                   [8;1H~                                                                                                                                                                                                   [9;1H~                                                                                                                                                                                                   [10;1H~                                                                                                                                                                                                   [11;1H~                                                                                                                                                                                                   [12;1H~                                                                                                                                                                                                   [13;1H~                                                                                                                                                                                                   [14;1H~                                                                                                                                                                                                   [15;1H~                                                                                                                                                                                                   [16;1H~                                                                                                                                                                                                   [17;1H~                                                                                                                                                                                                   [18;1H~                                                                                                                                                                                                   [19;1H~                                                                                                                                                                                                   [20;1H~                                                                                                                                                                                                   [21;1H~                                                                                                                                                                                                   [22;1H~                                                                                                                                                                                                   [23;1H~                                                                                                                                                                                                   [24;1H~                                                                                                                                                                                                   [25;1H~                                                                                                                                                                                                   [26;1H~                                                                                                                                                                                                   [27;1H~                                                                                                                                                                                                   [28;1H~                                                                                                                                                                                                   [29;1H~                                                                                                                                                                                                   [30;1H~                                                                                                                                                                                                   [31;1H~                                                                                                                                                                                                   [32;1H~                                                                                                                                                                                                   [33;1H~                                                                                                                                                                                                   [34;1H~                                                                                                                                                                                                   [35;1H~                                                                                                                                                                                                   [36;1H~                                                                                                                                                                                                   [37;1H~                                                                                                                                                                                                   [38;1H~                                                                                                                                                                                                   [39;1H~                                                                                                                                                                                                   [40;1H~                                                                                                                                                                                                   [41;1H~                                                                                                                                                                                                   [42;1H~                                                                                                                                                                                                   [43;1H~                                                                                                                                                                                                   [44;1H~                                                                                                                                                                                                   [45;1H~                                                                                                                                                                                                   [46;1H~                                                                                                                                                                                                   [47;1H~                                                                                                                                                                                                   [48;1H~                                                                                                                                                                                                   [49;1H~                                                                                                                                                                                                   [50;1H~                                                                                                                                                                                                   [51;1H~                                                                                                                                                                                                   [52;1H~                                                                                                                                                                                                   [53;1H~                                                                                                                                                                                                   [54;1H~                                                                                                                                                                                                   [55;1H~                                                                                                                                                                                                   [56;1H~                                                                                                                                                                                                   [57;1H~                                                                                                                                                                                                   [58;1H~                                                                                                                                                                                                   [59;1H~                                                                                                                                                                                                   [m[38;5;253m[48;5;235m[60;1H[1m[7m[38;5;237m[48;5;243m[Unbenannt]                                                                                                                                                               (unix/) (line 0/1, col 0)\[1;5H[?25h[?25l[m[38;5;253m[48;5;235m[61;186Hq[1;5H[?25h[?25l[61;187Hq[1;5H[61;1H[1m[38;5;114maufzeichnen @q[m[38;5;253m[48;5;235m[61;186H[K[1;5H[?25h[?25l[61;186H:[1;5H[61;1H[K[61;1H:[?25hq[?25lFÃ¼[61;3Hhre aus: q
AusfÃ¼[61;6Hhrung von BufUnload Autokommandos fÃ¼[61;42Hr "*"
Autokommando call <sid>on_window_changed('BufUnload')
FÃ¼[61;3Hhre aus: call <sid>on_window_changed('BufUnload')
rufe <SNR>28_on_window_changed auf('BufUnload')
Zeile 1:   " don't trigger for Vim popup windows
Zeile 2:   if &buftype is# 'popup'
Zeile 3:     return
Zeile 4:   endif
Zeile 5:
Zeile 6:   if pumvisible() && (!&previewwindow || g:airline_exclude_preview)
Zeile 7:     " do not trigger for previewwindows
Zeile 8:     return
Zeile 9:   endif
Zeile 10:   let s:active_winnr = winnr()
Zeile 11:   " Handle each window only once, since we might come here several times for
Zeile 12:   " different autocommands.
Zeile 13:   let l:key = [bufnr('%'), s:active_winnr, winnr('$'), tabpagenr(), &ft]
Zeile 14:   if get(g:, 'airline_last_window_changed', []) == l:key && &stl is# '%!airline#statusline('.s:active_winnr.')' && &ft !~? 'gitcommit'
Zeile 17:     " fugitive is special, it changes names and filetypes several times,
Zeile 18:     " make sure the caching does not get into its way
Zeile 19:     return
Zeile 20:   endif
Zeile 21:   let g:airline_last_window_changed = l:key
Zeile 22:   call s:init()
rufe <SNR>28_init auf()
Zeile 1:   if s:airline_initialized
Zeile 2:     return
<SNR>28_init lieferte #0 zurÃ¼[61;30Hck
weiter in <SNR>28_on_window_changed
Zeile 23:   call airline#update_statusline()
rufe airline#update_statusline auf()
Zeile 1:   if airline#util#stl_disabled(winnr())
rufe airline#util#stl_disabled auf(1)
Zeile 1:   " setting the statusline is disabled,
Zeile 2:   " either globally, per window, or per buffer
Zeile 3:   " w:airline_disabled is deprecated!
Zeile 4:   return get(g:, 'airline_disable_statusline', 0) || airline#util#getwinvar(a:winnr, 'airline_disable_statusline', 0) || airline#util#getwinvar(a:winnr, 'airline_disabled', 0) || airline
[60;196H#[61;1Hutil#getbufvar(winbufnr(a:winnr), 'airline_disable_statusline', 0)
rufe airline#util#getwinvar auf(1, 'airline_disable_statusline', 0)
Zeile 1:     return getwinvar(a:winnr, a:key, a:def)
airline#util#getwinvar lieferte #0 zurÃ¼[61;40Hck
weiter in airline#util#stl_disabled
rufe airline#util#getwinvar auf(1, 'airline_disabled', 0)
Zeile 1:     return getwinvar(a:winnr, a:key, a:def)
airline#util#getwinvar lieferte #0 zurÃ¼[61;40Hck
weiter in airline#util#stl_disabled
rufe airline#util#getbufvar auf(1, 'airline_disable_statusline', 0)
Zeile 1:     return getbufvar(a:bufnr, a:key, a:def)
airline#util#getbufvar lieferte #0 zurÃ¼[61;40Hck
weiter in airline#util#stl_disabled
airline#util#stl_disabled lieferte #0 zurÃ¼[61;43Hck
weiter in airline#update_statusline
Zeile 2:     return
Zeile 3:   endif
Zeile 4:   let range = filter(range(1, winnr('$')), 'v:val != winnr()')
Zeile 5:   " create inactive statusline
Zeile 6:   call airline#update_statusline_inactive(range)
rufe airline#update_statusline_inactive auf([])
Zeile 1:   if airline#util#stl_disabled(winnr())
[?1000l[38;5;114m-- Mehr --[?25h[m[38;5;253m[48;5;235m[61;1H[K[?1000h[61;1H
[?25lairline#update_statusline_inactive abgebrochen
weiter in airline#update_statusline
airline#update_statusline abgebrochen
weiter in <SNR>28_on_window_changed
<SNR>28_on_window_changed abgebrochen
weiter in BufUnload Autokommandos fÃ¼[61;37Hr "*"
Schreiben der viminfo-Datei "/c/Users/108012516/.viminfo"[?1000l[?2004l[>4;m[23;2t[23;1t[39;49m[?1004l[?2004l[?1l>[?25h[>4;m[?1049l[23;0;0t
