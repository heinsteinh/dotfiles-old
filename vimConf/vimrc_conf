set nocompatible

if(has("win32") || has("win95") || has("win64") || has("win16"))
    let g:iswindows=1
else
    let g:iswindows=0
endif


" use .vimrc if present in local directory
set exrc
set secure

set mouse=a

set history=1000

set ruler
set showcmd
set showmode
set display=truncate

set incsearch
set hlsearch
set smartcase
set ignorecase

set hidden
set wrap
set linebreak
"set nolist "list disables linebreak
set backspace=indent,eol,start

" set tab width
set autoindent
set smartindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

set autoread
set splitbelow
set splitright
"set cursorline
set lazyredraw

syntax on               " Enable syntax highlighting
filetype indent on      " Enable indenting for files

set number              " Enable line numbers
"set relativenumber
"set number "relativenumber

set wildmenu            " Display command line's tab complete options as a menu.
"set wildmenu                    " Enable enhanced tab autocomplete.
set wildmode=list:longest,full  " Complete till longest string, then open menu.

set undofile   " Maintain undo history between sessions

set splitbelow 
set splitright 

set backspace=indent,eol,start

set ruler
set showcmd

" folding thte code
"set foldmethod=indent
"set nofoldenable
set foldenable
set foldmethod=syntax

if(g:iswindows==1)

  let webBrowser = "C:\Program Files\Google\Chrome\Application\chrome.exe"
  let $scrapbook = "W:\\WorkDir\\scrapbook.textile"
  "map <F12> :silent! !"C:\Program Files\Google\Chrome\Application\chrome.exe" % <CR>
else
   let $scrapbook = $HOME."/scrapbook.textile"
   set guifont=Monaco\ 11
endif

if has("gui_running")
  if has("gui_gtk2")
    set guifont=Monospace\ 13
  elseif has("gui_win32")
    set guifont=Consolas:h10:cANSI
  endif
endif




" FINDING FILES:
" Search down into subfolders
" Provides tab-completion for all file-related tasks
set path+=**



" Helps force plugins to load correctly when it is turned back on below
filetype off

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

source ~/.vim/settings/plugins.vim


" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on

" Turn on syntax highlighting
syntax on

" For plugins to load correctly
filetype plugin indent on


" Highlighting {{{
" show errors
 highlight Errors ctermbg=green guibg=darkred
" }}}




" Source local cutomizations
if filereadable(expand("~/.vimrc.local"))
	source ~/.vimrc.local
endif


" source all the helper files
for f in split(glob('$HOME/.vim/functions/*.vim'), '\n')
 "echo "sourcing dir"
  exec 'source' f
endfor

" source all the helper files
for f in split(glob('$$HOME/.vim/helpers/**/*.vim'), '\n')
   exec 'source' f
endfor


"let mapleader = " " " map leader to Space
let mapleader = "," " map leader to comma
let maplocalleader = ","


if has("gui_running")

" Always show cursor
set ruler

" Highlight the current line
set cursorline


" Hide the toolbar
"set guioptions-=T
"set guioptions-=m  "remove menu bar
"set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand,scroll bar
set guioptions-=L  "remove left-hand scroll bar

"set guifont=Consolas:h11:cANSI
set guifont=FiraCode_Nerd_Font_Mono:h10
"set guifont=Hack_Nerd_Font_Mono:h11
"set guifont=DejaVuSansMono_Nerd_Font_Mono:h11
"
" " Only set guifont once, since it resizes gVim when sourcing $MYVIMRC
"  if !exists('s:set_guifont')
"        let s:set_guifont = 1

"        if has('win32')
"            set guifont=FiraCode_Nerd_Font_Mono:h11
"        else
"            set guifont=Ubuntu\ Mono\ Regular\ 18
"        endif
"    endif
endif





" Color scheme (terminal)
if !has('gui_running')
  set t_Co=256
endif

"set background=dark
"colorscheme slate
"colorscheme gruvbox
"colorscheme darkblue
colorscheme oceanicNext



"{{{{





"}}}}




"colorscheme OceanicNext
"highlight Normal guifg=white guibg=black
"colorscheme delek

"{{{
" Start NERDTree and leave the cursor in it.
"autocmd VimEnter * NERDTree

" map <leader>ne :NERDTreeFind<cr>
" map <C-o> :NERDTreeToggle %<CR>


" Start NERDTree when Vim is started without file arguments.
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists('s:std_in') | NERDTree | endif
"
"
"Air Vim Pluggin setting
"let g:airline#extensions#tabline#enabled = 1
"let g:airline#extensions#tabline#left_sep = ' '
"let g:airline#extensions#tabline#left_alt_sep = '|'


"enable rainbow it globally
"au FileType c,cpp,objc,objcpp call rainbow#load()
"let g:rainbow_active = 1
"

""}}}

" source custom files

"load here my custom settings
"source ~/.vim/settings.vim
"source ~/.vim/settings/settings-extra.vim
"source ~/.vim/settings-light.vim

"source ~/.vim/settings/functions.vim
"source ~/.vim/settings/keymaps.vim
"source ~/.vim/settings/movements.vim
"source ~/.vim/settings/spelling.vim

"source ~/.vim/settings/settings-extra.vim
"source ~/.vim/settings/settings-extra.vim


source ~/.vim/plugins/backupFiles.vim
source ~/.vim/plugins/automkdir.vim
source ~/.vim/plugins/neocomplete.vim

source ~/.vim/settings/vimrc_mappings.vim


:let g:session_autosave = 'no'



"if has("gui_running")
"  " GUI is running or is about to start.
"  " Maximize gvim window (for an alternative on Windows, see simalt below).
"  set lines=50 columns=180
"else
"  " This is console Vim.
"  if exists("+lines")
"    set lines=50
"  endif
"  if exists("+columns")
"    set columns=150
"  endif
"endif

"Automatically remove trailing spaces when saving a file.
"autocmd BufRead,BufWrite * if ! &bin | silent! %s/\s\+$//ge | endif


" Plugin-related settings below are commented out. Uncomment them to enable
" the plugin functionality once you download the plugins.



"Changing number base on the mode we are in
"augroup toggle_relative_number
"autocmd InsertEnter * :setlocal norelativenumber
"autocmd InsertLeave * :setlocal relativenumber

if has ('autocmd') " Remain compatible with earlier versions

" Preserve last editing position in vim
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" treat C files differently from C++ files
augroup project
	autocmd!
	autocmd BufRead,BufNewFile *.h,*.c set filetype=c.doxygen
augroup END


 augroup vimrc     " Source vim configuration upon save
    autocmd! BufWritePost $MYVIMRC source % | echom "Reloaded " . $MYVIMRC | redraw
    autocmd! BufWritePost $MYGVIMRC if has('gui_running') | so % | echom "Reloaded " . $MYGVIMRC | endif | redraw
  augroup END
endif " has autocmd


autocmd StdinReadPre * let s:std_in=1
let NERDTreeShowHidden=1
let NERDTreeShowBookmarks = 1   " Display bookmarks on startup.
"autocmd VimEnter * NERDTree     " Enable NERDTree on Vim startup.
"" open a NERDTree automatically when vim starts up

"" close vim if the only window left open is a NERDTree
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif " close vim if the only window left open is a NERDTree
"" open a NERDTree automatically when vim starts up if no files were specified
"autocmd StdinReadPre * let s:std_in=1 
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif 
"" open NERDTree automatically when vim starts up on opening a directory
"autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif

"autocmd vimenter * NERDTree | wincmd p
"autocmd VimEnter * exe "vertical resize 60"
""Autoclose NERDTree if it's the only open window left.
"autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Cursor style {{{
let &t_SI.="\e[5 q" "SI = INSERT mode
let &t_SR.="\e[4 q" "SR = REPLACE mode
let &t_EI.="\e[1 q" "EI = NORMAL mode (ELSE)
" }}}
