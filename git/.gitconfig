[user]
    name  = Heinstein
    email = heinsteinh@gmail.com
    signingkey = 70996C617B3F1675
[github]
    user = heinsteinh

[commit]
    gpgsign = false

[tag]
    gpgsign = True
    forceSignAnnotated = True

[gpg]
    program = /usr/bin/gpg2

[core]
    excludesfile = ~/.gitignore_global
    editor = vim
    filemode = false
    trustctime = false

[alias]
    st = status
    s = status -sb
    stl = ls-files -m -o --exclude-standard
    ci = commit
    br = branch
    co = checkout
    cr = clone --recursive
    df = diff --word-diff
    unstage = reset --hard HEAD
    ag = !sh -c 'git ls-files -m -o --exclude-standard | grep $1 | xargs git add --verbose' -
    l = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    ll = log --pretty=oneline --graph --abbrev-commit
    lm = log --pretty=format:'* %s (%h)'
    lg = log -p
    g = grep --break --heading --line-number
    amend = commit --amend --reuse-message=HEAD
    contrib = shortlog --summary --numbered
	# List files ignored by .gitignore and friends
	show-ignored = "! git clean -ndX | perl -pe 's/Would remove/Ignored:/'"

    cm = !git add -A && git commit -m
	hist = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short
    preview = diff --stat --cached

   snapshot = "!snapshot() { COMMENT=wip; if [ \"$*\" ]; then  COMMENT=\"$*\"; fi; git add -A; git commit -m \"$COMMENT\"; }; snapshot"
   #backup = "!backup() { git snapshot \"\$*\"; git push; }; backup"
   #create-file = "!createFile() { for name in \"\$@\"; do echo \$name>\$name.txt; done; }; createFile"
   #simple-commit = "!simpleCommit() { for name in \"\$@\"; do git create-file \"\$name\"; git snapshot \$name; done; }; simpleCommit"
   empty-commit = "!emptyCommit() { git commit --allow-empty -m \"Empty commit\"; }; emptyCommit"
   empty-init = "!emptyInit() { git init ; git commit --allow-empty -m \"Initial empty commit\"; }; emptyInit"

    list-remote-branches = "!listRemoteBranches() { git branch -r | sed \"/->/d; s/  origin\\///g\"; }; listRemoteBranches"
    checkout-remote-branches = "!checkoutRemoteBranches() { for name in `git list-remote-branches`; do git checkout $name; done; }; checkoutRemoteBranches"
    clone-with-branches = "!cloneWithBranches() { git clone $1 $2; cd $2; git checkout-remote-branches; git remote rm origin; }; cloneWithBranches"


[color]
    ui = auto
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[credential]
	helper = cache

[grep]
    lineNumber = true

[help]
    autocorrect = 1

[difftool]
    prompt = false

[mergetool]
    prompt = false

[push]
    default = simple

[fetch]
  prune = true

[diff]
    renames = copies
    tool = Kaleidoscope
[difftool "Kaleidoscope"]
    cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
[difftool "sourcetree"]
	cmd = /usr/local/bin/ksdiff -w \"$LOCAL\" \"$REMOTE\"
	path =

[merge]
    tool = Kaleidoscope
    conflictstyle = diff3
    defaultToUpstream = true
[mergetool "Kaleidoscope"]
    cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
    trustExitCode = true
[mergetool "sourcetree"]
	cmd = /usr/local/bin/ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
	trustExitCode = true
[cola]
	spellcheck = false
