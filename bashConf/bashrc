# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return


export VISUAL=vim
export EDITOR="$VISUAL"

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

export PS1="\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ "
export EDITOR="vim"

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi


#https://github.com/scagle/public_dotfiles/blob/e1c4ffeb4828ef7aa5e44985cbf356e45878997e/shell/.config/shell/extra.rc
# FZF {{{

if [[ -x ~/.fzf/bin/fzf ]]; then
    export FZF_BINDS="--bind ctrl-y:yank,ctrl-a:select-all,ctrl-d:deselect-all,ctrl-t:toggle-all"
    # Fuzzy edit
    fe () {
        FZF_MATCHES=$(fzf $FZF_BINDS -m --preview="head -n 100 {}")
        [[ ! -z $FZF_MATCHES ]] && $EDITOR $FZF_MATCHES
    }

    # Fuzzy Pushd to directory
    fp () {
        GREPPED_FILES=$(find $@ -type d) 
        if [[ ! -z $GREPPED_FILES ]] ; then
            FZF_MATCH=$(echo $GREPPED_FILES | tr " " "\n" | fzf $FZF_BINDS --preview="tree -L 2 {}")
            [[ ! -z $FZF_MATCH ]] && pushd $FZF_MATCH
        fi
    }

    # Fuzzy Pushd to Parent of file
    fpp () {
        GREPPED_FILES=$(find $@) 
        if [[ ! -z $GREPPED_FILES ]] ; then
            FZF_MATCH=$(echo $GREPPED_FILES | tr " " "\n" | fzf $FZF_BINDS)
            [[ ! -z $FZF_MATCH ]] && pushd $(dirname $FZF_MATCH)
        fi
    }
fi

# }}}

# Ripgrep {{{

if [[ -x /bin/rg || -x /usr/local/bin/rg || -x /snap/bin/rg ]]; then
    export RIPGREP_CONFIG_PATH=$HOME/.config/rg/.ripgreprc
    alias rgf="rg --files | rg"

    # Ripgrep + FZF
    if [[ -x ~/.fzf/bin/fzf ]]; then
        # Grep edit
        ge () {
            GREPPED_FILES=$(rg -l --no-ignore $@) 
            if [[ ! -z $GREPPED_FILES ]] ; then
                FZF_MATCHES=$(echo $GREPPED_FILES | tr " " "\n" | fzf -m $FZF_BINDS --preview="rg $@ {} -C 2 -n --color=always")
                [[ ! -z $FZF_MATCHES ]] && $EDITOR $FZF_MATCHES
            fi
        }

        # Grep file(s) edit
        gfe () {
            GREPPED_FILES=$(rg --files --no-ignore | rg $@) 
            if [[ ! -z $GREPPED_FILES ]] ; then
                FZF_MATCHES=$(echo $GREPPED_FILES | tr " " "\n" | fzf -m $FZF_BINDS --preview="head -n 100 {}")
                [[ ! -z $FZF_MATCHES ]] && $EDITOR $FZF_MATCHES
            fi
        }
    fi
fi

# }}}

# Makefiles {{{

if [[ -f /usr/bin/make ]]; then 
    alias m='make'
    if [[ -f /usr/bin/unbuffer ]]; then 
        # Less Make (unbuffer used to keep colors)
        alias lm='unbuffer make | less -R'
    fi
fi

# }}}


# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/profile.d/bash_completion ] && ! shopt -oq posix; then
    . /etc/profile.d/bash_completion
fi


[ -f ~/.fzf.bash ] && source ~/.fzf.bash
source /etc/profile.d/bash_completion.sh
