#!/usr/bin/env bash
alias sudo='nocorrect sudo' 
alias pacman='sudo pacman'

# Pacman alias examples
alias pacupg='sudo pacman -Syu'		   # Synchronize with repositories and then upgrade packages that are out of date on the local system.
alias pacdl='pacman -Sw'		       # Download specified package(s) as .tar.xz ball
alias pacin='sudo pacman -S'		   # Install specific package(s) from the repositories
alias pacins='sudo pacman -U'		   # Install specific package not from the repositories but from a file
alias pacre='sudo pacman -R'		   # Remove the specified package(s), retaining its configuration(s) and required dependencies
alias pacrem='sudo pacman -Rns'		   # Remove the specified package(s), its configuration(s) and unneeded dependencies
alias pacrep='pacman -Si'		       # Display information about a given package in the repositories
alias pacreps='pacman -Ss'		       # Search for package(s) in the repositories
alias pacloc='pacman -Qi'		       # Display information about a given package in the local database
alias paclocs='pacman -Qs'		       # Search for package(s) in the local database
alias paclo="pacman -Qdt"		       # List all packages which are orphaned
alias pacc="sudo pacman -Scc"		   # Clean cache - delete all the package files in the cache
alias paclf="pacman -Ql"		       # List all files installed by a given package
alias pacown="pacman -Qo"		       # Show package(s) owning the specified file(s)
alias pacexpl="pacman -D --asexp"	   # Mark one or more installed packages as explicitly installed
alias pacimpl="pacman -D --asdep"	   # Mark one or more installed packages as non explicitly installed

# Simplified pacman aliases
alias pacman-upgrade="sudo pacman -Syu"     # Synchronize with repositories and then upgrade packages that are out of date on the local system.
alias pacman-download="pacman -Sw"            # Download specified package(s) as .tar.xz ball
alias pacman-install="sudo pacman -S"        # Install specific package(s) from the repositories
alias pacman-install-file="sudo pacman -U"       # Install specific package not from the repositories but from a file
alias pacman-remove="sudo pacman -R"        # Remove the specified package(s), retaining its configuration(s) and required dependencies
alias pacman-purge="sudo pacman -Rns"     # Remove the specified package(s), its configuration(s) and unneeded dependencies
alias pacman-repoinfo="pacman -Si"           # Display information about a given package in the repositories
alias pacman-search="pacman -Ss"          # Search for package(s) in the repositories
alias pacman-dbinfo="pacman -Qi"           # Display information about a given package in the local database
alias pacman-dbsearch="pacman -Qs"          # Search for package(s) in the local database
alias pacman-list-orphaned="pacman -Qdt"           # List all packages which are orphaned
alias pacman-clean-cache="sudo pacman -Scc"       # Clean cache - delete all the package files in the cache
alias pacman-list-package-files="pacman -Ql"            # List all files installed by a given package
alias pacman-provides-="pacman -Qo"           # Show package(s) owning the specified file(s)
alias pacman-force-installed="pacman -D --asexp"   # Mark one or more installed packages as explicitly installed
alias pacman-force-uninstalled="pacman -D --asdep"   # Mark one or more installed packages as non explicitly installed

alias pacman-log='tail -n 40 /var/log/pacman.log | ccze -A'

function pacman-news() {
    sudo find /etc -name '*.pacnew' | sed -e 's|^/etc/||' -e 's/.pacnew$//'
}


#us Pacman candy
alias pac-install="pacman -Slq | fzf --multi --preview 'pacman -Si {1}' | xargs -ro sudo pacman -S"
alias pac-remove="pacman -Qqe | fzf --multi --preview 'pacman -Qi {1}' | xargs -ro sudo pacman -Rns"
alias pac-info="pacman -Qq | fzf --multi --preview 'bat <(pacman -Qi {1}) <(pacman -Fl {1} | awk \"{print \$2}\")'"

alias aur-install="yay -Slq --aur | fzf --multi --preview 'yay -Si {1}' | xargs -ro yay -S"

# arch keyring
#alias pacman-key-update='      sudo rm -rf /etc/pacman.d/gnupg ; sudo pacman-key --init; sudo pacman-key --populate archlinux; sudo pacman -S archlinux-keyring ;sudo pacman-key --refresh'
#alias pacman-key-update-arm='                                    sudo pacman-key --init && sudo pacman-key --populate archlinuxarm  && sudo pacman -S archlinux-keyring && sudo pacman-key --refresh-keys && sudo pacman -Syy'
alias pacman-key-update='     sudo rm -r /etc/pacman.d/gnupg ; sudo pacman-key --init ; sudo pacman-key --populate archlinux ;    sudo pacman-key --refresh-keys ; sudo pacman -S archlinux-keyring ; sudo pacman -S seahorse ; sudo pacman -Syyu'
alias pacman-key-update-arm=' sudo rm -r /etc/pacman.d/gnupg ; sudo pacman-key --init ; sudo pacman-key --populate archlinuxarm ; sudo pacman-key --refresh-keys ; sudo pacman -S archlinux-keyring ; sudo pacman -S seahorse ; sudo pacman -Syyu'

# '[r]emove [o]rphans' - recursively remove ALL orphaned packages
alias pacman-remove-orphan="pacman -Qtdq > /dev/null && sudo pacman -Rns \$(pacman -Qtdq | sed -e ':a;N;$!ba;s/\n/ /g')"

# Additional pacman alias examples
alias pacupd='sudo pacman -Sy && sudo abs'         # Update and refresh the local package and ABS databases against repositories
alias pacinsd='sudo pacman -S --asdeps'            # Install given package(s) as dependencies
alias pacmir='sudo pacman -Syy'                    # Force refresh of all package lists after updating /etc/pacman.d/mirrorlist

alias paclsorphans='sudo pacman -Qdt'
alias pacrmorphans='sudo pacman -Rs $(pacman -Qtdq)'

# update pacman mirrors
alias pacmirrorupd='sudo /usr/bin/reflector --verbose -l 200 -p http --sort rate --save /etc/pacman.d/mirrorlist'

# dealing with the following message from pacman:
#
#     error: couldnt lock database: file exists
#     if you are sure a package manager is not already running, you can remove /var/lib/pacman/db.lck

alias pacunlock="sudo rm /var/lib/pacman/db.lck"   # Delete the lock file /var/lib/pacman/db.lck
alias paclock="sudo touch /var/lib/pacman/db.lck"  # Create the lock file /var/lib/pacman/db.lck

# update, clean and optimize pacman, rebuild index, free memory
#alias daily="sudo pacman -Syu; sudo aura -Akua; sudo paccache -rvk3; sudo pacman-optimize; sudo updatedb; ~/bin/freemem"
alias daily="sudo pacman -Syu; sudo yay -Syu; sudo paccache -rvk3; sudo pacman-optimize; sudo updatedb; ~/bin/freemem"
alias pacman-maintenace='sudo pacman -Syu; sudo paccache -r; sudo paccache -ruk0;'




#alias sdisable=' sudo systemctl disable $@'
#alias senable='sudo systemctl enable $@'
#alias srestart='sudo systemctl restart $@'
#alias sstart='sudo systemctl start $@'
#alias sstop='sudo systemctl stop $@'
alias sstatus='sudo systemctl status $@'

#alias sstatus="systemctl status"
alias sstart="sudo systemctl start"
alias sstop="sudo systemctl stop"
alias senable="sudo systemctl enable"
alias sdisable="sudo systemctl disable"
alias sreload="sudo systemctl reload"
alias srestart="sudo systemctl restart"
alias sdaemonreload="sudo systemctl --system daemon-reload"


alias sustatus="systemctl --user status "
alias sustart=" systemctl --user start "
alias sustop=" systemctl --user stop "
alias suenable=" systemctl --user enable "
alias sudisable=" systemctl --user disable "
alias sureload=" systemctl --user reload"
alias surestart=" systemctl --user restart"
alias sudaemonreload=" systemctl --user daemon-reload"

start() { sudo systemctl start $1.service; sudo systemctl status $1.service; }
sysctrl_stop() { sudo systemctl stop $1.service; sudo systemctl status $1.service; }
sysctrl_restart() { sudo systemctl restart $1.service; sudo systemctl status $1.service; }
sysctrl_status() { sudo systemctl status $1.service; }
sysctrl_enabled() { cd /usr/lib/systemd/system; sudo systemctl enable $1.service;  }
sysctrl_disabled() { sudo systemctl disable $1.service;  }

sysctrl_startu() { systemctl --user start $1.service; systemctl --user status $1.service; }
sysctrl_stopu() { systemctl --user stop $1.service; systemctl --user status $1.service; }
sysctrl_statusu() { systemctl --user status $1.service; }



# systemd
alias ssyslsall='sudo systemctl list-units'
alias ssyslstim='sudo systemctl list-timers'
alias ssyslsfail='sudo systemctl --failed'
alias ssyslog='sudo journalctl -xe'

alias syslsall='systemctl --user list-units'
alias syslstim='systemctl --user list-timers'
alias syslsfail='systemctl --user --failed'
alias syslog='journalctl -xe'



#arch
#alias yrt="yaourt -S"
#alias yrt_update="yaourt -Syua"

# Package manager aliases yaourt and pacman
#alias y=yaourt
#alias yrtu="echo yaourt -Syu: Updates database and upgrades packages; yaourt -Syu"
#alias yrta="echo yaourt -Syua: Updates database and upgrades packages including AUR; yaourt -Syua"
##alias yrtd="echo yaourt -Syua --devel: Updates database and upgrades packages including AUR and git; yaourt -Syua --devel"
#alias yrtr="echo yaourt -Rns: Removes package, its configurations + dependencies; yaourt -Rns"
#alias yrtr="aur-remove-vote"
#alias yrti="echo yaourt -Qi: Display information about a given package in the local database; yaourt -Qi"
#alias yrtl="echo yaourt -Qe: List all installed package; yaourt -Qe"
#alias yrtll="echo yaourt -Ql: List all files installed by a given package; yaourt -Ql"
#alias yrto="echo yaourt -Qtdq: Check for orphan packages among Arch Linux; yaourt -Qtdq"

alias y="yay -S" #installation.
alias yn="yay -S --noconfirm" #installation without confirmation.
alias ygpg="- mflags '--nocheck --skippgpcheck --noconfirm'"  #setting and ignoring the gpg key check.
alias ys="yay" #search with further selection by digit.
alias ysn="yay --noconfirm" #search with further selection by digit, without confirmation.
alias yc="yay -Sc" #partial clearing of the cache.
alias yy="yay -Syy" #mirror base synchronization.
alias yu="yay -Syu" #update.
alias yun="yay -Syu --noconfirm" #update without confirmation.
alias yr="yay -R" #deletion package (s)
alias yrn="yay -R --noconfirm" #deleting the package (s) without confirmation.

alias pac-yay-u='yay -Sy'
alias pac-yay-up='yay -Syu'
alias pac-yay-i='yay --needed -S'
alias pac-yay-ii='yay --noconfirm --needed -S'
alias pac-yay-rm='yay -Rs'
alias pac-yay-clean='yay -Yc'
alias pac-yay-search='yay --sortby popularity'


pac-yay-files () { yay -Fl "$1" | less ; }
pac-yay-which () { yay -Qo "$(which "$1")" ; }
alias pac-yay-info='yay -Si'
alias pac-yay-stats='yay -Ps'


#pacman: show package info
function pacinfo() {
    if [[ -z $@ ]]; then
        echo "Error! No package name was given."
    else
        pacman -Qi "$@"
    fi
}

# pacman: show package dependencies
pacdep() { pacman -Qi "$@" | grep Depends }

# pacman: show size of the package
pacsize() { pacman -Qi "$@" | grep Size }

# pacman: size of the cache dir
paccachesize() { du -hs /var/cache/pacman }



pacsize() {
	sudo pacman -Qi | \
	awk 'BEGIN{sort="sort -k2 -n"} /Name/ {name=$3} /Size/ {size=$4/1024;print name":",size,"Mb"|sort}' | \
	less
}

# pacman shortcuts
alias pacpurge='sudo pacman -Rcns $(pacman -Qdtq)'
sizestr='/^Name/ {pkg=$3} /Size/ {print $4$5,pkg}'
alias pacsize="pacman -Qei | awk '$sizestr' | sort -n"
depsstr='/^Name/ {pkg=$3} /^Depends On/ {print NF - 3,pkg}'
alias pacdeps="pacman -Qei | awk '$depsstr' | sort -n"



#=[ PAC-INSTALL ]=#

sp() 
{
    read selection <<< $(pacman -Ssq | fzf --layout=reverse --preview='pacman -Si {}')
    if [[ $selection != "" ]]; then sudo pacman -S $selection --noconfirm
    else true; fi
}


#=[ PAC-REMOVE ]=#

rp() 
{
    read selection <<< $(pacman -Qsq | fzf --layout=reverse --preview='pacman -Qi {}')
    if [[ $selection != "" ]]; then sudo pacman -Rns $selection --noconfirm
    else true; fi
}
#=[ FZF-KILL ]=#

# fkill() 
# {
#     read selection <<< $(ps -aux | fzf --layout=reverse)
#     if [[ $selection != "" ]]; then sel=$(echo $selection | awk '{print $2}');
#     kill -9 $sel
#     else true; fi

# }

# Ranger
alias rr="ranger"


# pacman: list or search in cache
paccachelist() {

    cache_dir=/var/cache/pacman/pkg
    cache_dir_yaourt=/var/cache/pacman/pkg-yaourt

    # fi $1 is empty, then just list all the packages
    if [[ $1 == "" ]]; then
    echo "--------------------------------------------------------------------------"
    echo "==> Listing $cache_dir:"
         ls -l $cache_dir
    echo "--------------------------------------------------------------------------"
        if [[ -d $cache_dir_yaourt ]]; then
            echo "==> Listing $cache_dir_yaourt:"
            ls -l $cache_dir_yaourt
            echo "--------------------------------------------------------------------------"
        fi
    # if $1 is NOT empty, then it's a search
    else
    echo "--------------------------------------------------------------------------"
    echo "==> Search results for $1 in $cache_dir:"
          ls -l $cache_dir | grep $1

          if [[ -d $cache_dir_yaourt ]]; then
            echo "--------------------------------------------------------------------------"
            echo "==> Search results for $1 in $cache_dir_yaourt:"
            ls -l $cache_dir_yaourt | grep $1
            echo "--------------------------------------------------------------------------"
          fi
    fi
}



# generate and download a new mirrorlist from https://www.archlinux.org/mirrorlist
getmirrorlist() {
    generated_mirrorlist=/tmp/mirrorlist
    echo "=> Downloading the generated mirrorlist..."
    wget --quiet --show-progress 'https://www.archlinux.org/mirrorlist/?country=DE&country=FR&protocol=http&protocol=https&ip_version=4&use_mirror_status=on' -O "$generated_mirrorlist"
    echo "=> Uncommenting the servers in the mirrorlist"
    sed -i 's/^#Server/Server/' "$generated_mirrorlist"
    echo "=> Creating a backup of the original mirrorlist"
    sudo mv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak
    echo "=> Moving the new mirrorlist to /etc/pacman.d"
    sudo mv "$generated_mirrorlist" /etc/pacman.d
}

# pacman log
# based on: https://bbs.archlinux.org/viewtopic.php?pid=1281605#p1281605
paclog(){
	LOGFILE="/var/log/pacman.log"
	case "$1" in
		-h)	# Show help
		    echo "paclog"
            echo "Usage: paclog [-option]"
            echo ""
            echo "\033[1;34m      -i\033[0m                Show log entries for installed."
            echo "\033[1;34m      -r\033[0m                Show log entries for removed."
            echo "\033[1;34m      -u\033[0m                Show log entries for upgraded."
            echo "\033[1;34m      -d\033[0m                Show log entries for downgraded."
            echo "\033[1;34m      -m\033[0m                Show log entries for messages."
            echo "\033[1;34m      -s <keyword>\033[0m      Search for <keyword> in the log entries."
            echo "\033[1;34m      -h\033[0m                This help."
            echo ""
            echo "Without an option, the \033[1;34mpaclog\033[0m command shows the entire log."
		    ;;
		-i) # Show installed
			grep 'installed' $LOGFILE | grep -v 'ALPM-SCRIPTLET' | less
		    ;;
		-r) # Show removed
			grep 'removed' $LOGFILE | grep -v 'ALPM-SCRIPTLET' | less
		    ;;
		-u) # Show upgraded
			grep 'upgraded' $LOGFILE | grep -v 'ALPM-SCRIPTLET' | less
		    ;;
        -d) # Show downgraded

            grep 'downgraded' $LOGFILE | grep -v 'ALPM-SCRIPTLET' | less
		    ;;
        -s) # Search in log
			grep -i $2 $LOGFILE | less
		    ;;
		-m) # Show messages
			grep 'ALPM-SCRIPTLET' -B 1 $LOGFILE | less
			;;
		*)  # Show the entire log
		    less $LOGFILE
		esac
}

# locate pac* files
# https://wiki.archlinux.org/index.php/Pacnew_and_Pacsave_files#Locating_.pac.2A_files
pacfilesfinder() {
    echo "==> Listing pac* files in /etc:"
    find /etc -regextype posix-extended -regex ".+\.pac(new|save|orig)" 2> /dev/null
}

# last upgrade date/time
# source: https://bbs.archlinux.org/viewtopic.php?pid=1345525#p1345525
paclastupg() { awk '/upgraded/ {line=$0;} END { $0=line; gsub(/[\[\]]/,"",$0); printf "\033[1;34mPacman > Last Upgraded:\033[0m %s %s\n",$1,$2; exit;}' /var/log/pacman.log }

# checkupdates + filter out ignored packages
paccheck() {
    ignorelist=$(awk '/IgnorePkg.+=/{for(i=1;i<3;i++) $i="";gsub(/^[ \t]+|[ \t]+$/,"");gsub(" ","|");print}' /etc/pacman.conf)
    packages=$(checkupdates | sed -r "/($ignorelist)/d")
    count=$(echo -n "$packages" | wc -l)
    if [[ $count -gt 0 ]]; then
        echo -e "------------\033[1;33mC\033[0m o o o o o o o o"
        echo -e "\033[1;33m$count\033[0m package update(s) available"
        echo -e "------------------------------"
        echo "$packages"
    else
        echo "No package updates available."
    fi
}


# archlinux news
function news_archlinux() {
  echo -e "$(echo $(curl --silent https://www.archlinux.org/feeds/news/ | sed -e ':a;N;$!ba;s/\n/ /g') | \
  sed -e 's/&gt;/ç/g' |
  sed -e 's/&lt;\/aç/£/g' |
  sed -e 's/href\=\"/§/g' |
  sed -e 's/<title>/\\n\\n  :: \\e[01;31m/g' -e 's/<\/title>/\\e[00m ::\\n/g' |
  sed -e 's/<link>/ \>\\e[01;36m/g' -e 's/<\/link>/\\e[00m</g' |
  sed -e 's/<description>/\\n\\n\\e[00;37m/g' -e 's/<\/description>/\\e[00m\\n\\n/g' |
  sed -e 's/&lt;pç/\n/g' |
  sed -e 's/&lt;bç\|&lt;strongç/\\e[01;30m/g' -e 's/&lt;\/bç\|&lt;\/strongç/\\e[00;37m/g' |
  sed -e 's/&lt;a[^§]*§\([^\"]*\)\"[^ç]*ç\([^£]*\)[^£]*£/\\e[01;32m\2\\e[00;37m \\e[01;34m[ \\e[01;35m\1\\e[00;37m\\e[01;34m ]\\e[00;37m/g' |
  sed -e 's/&lt;liç/\n \\e[01;34m*\\e[00;37m /g' |
  sed -e 's/<[^>]*>/ /g' |
  sed -e 's/&lt;[^ç]*ç//g' |
  sed -e 's/[ç£§]//g')\n" | tail -n +5 | head -n 30
  echo -e "...\nhttps://www.archlinux.org/news/\n"
}

# vim: set syntax=sh filetype=sh :
